{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, Injectable, Inject, forwardRef, Directive, Input, Output, HostListener, Pipe, NgModule } from '@angular/core';\nimport { __awaiter } from 'tslib';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nimport { DOCUMENT } from '@angular/common';\nconst config = new InjectionToken('ngx-mask config');\nconst NEW_CONFIG = new InjectionToken('new ngx-mask config');\nconst INITIAL_CONFIG = new InjectionToken('initial ngx-mask config');\nconst initialConfig = {\n  suffix: '',\n  prefix: '',\n  thousandSeparator: ' ',\n  decimalMarker: ['.', ','],\n  clearIfNotMatch: false,\n  showTemplate: false,\n  showMaskTyped: false,\n  placeHolderCharacter: '_',\n  dropSpecialCharacters: true,\n  hiddenInput: undefined,\n  shownMaskExpression: '',\n  separatorLimit: '',\n  allowNegativeNumbers: false,\n  validation: true,\n  // eslint-disable-next-line @typescript-eslint/quotes\n  specialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '\"', \"'\"],\n  leadZeroDateTime: false,\n  triggerOnMaskChange: false,\n  maskFilled: new EventEmitter(),\n  patterns: {\n    '0': {\n      pattern: new RegExp('\\\\d')\n    },\n    '9': {\n      pattern: new RegExp('\\\\d'),\n      optional: true\n    },\n    X: {\n      pattern: new RegExp('\\\\d'),\n      symbol: '*'\n    },\n    A: {\n      pattern: new RegExp('[a-zA-Z0-9]')\n    },\n    S: {\n      pattern: new RegExp('[a-zA-Z]')\n    },\n    U: {\n      pattern: new RegExp('[A-Z]')\n    },\n    L: {\n      pattern: new RegExp('[a-z]')\n    },\n    d: {\n      pattern: new RegExp('\\\\d')\n    },\n    m: {\n      pattern: new RegExp('\\\\d')\n    },\n    M: {\n      pattern: new RegExp('\\\\d')\n    },\n    H: {\n      pattern: new RegExp('\\\\d')\n    },\n    h: {\n      pattern: new RegExp('\\\\d')\n    },\n    s: {\n      pattern: new RegExp('\\\\d')\n    }\n  }\n};\nconst timeMasks = ['Hh:m0:s0', 'Hh:m0', 'm0:s0'];\nconst withoutValidation = ['percent', 'Hh', 's0', 'm0', 'separator', 'd0/M0/0000', 'd0/M0', 'd0', 'M0'];\n\nclass MaskApplierService {\n  constructor(_config) {\n    this._config = _config;\n    this.maskExpression = '';\n    this.actualValue = '';\n    this.shownMaskExpression = '';\n\n    this._formatWithSeparators = (str, thousandSeparatorChar, decimalChars, precision) => {\n      var _a, _b, _c;\n\n      let x = [];\n      let decimalChar = '';\n\n      if (Array.isArray(decimalChars)) {\n        const regExp = new RegExp(decimalChars.map(v => '[\\\\^$.|?*+()'.indexOf(v) >= 0 ? `\\\\${v}` : v).join('|'));\n        x = str.split(regExp);\n        decimalChar = (_b = (_a = str.match(regExp)) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : '';\n      } else {\n        x = str.split(decimalChars);\n        decimalChar = decimalChars;\n      }\n\n      const decimals = x.length > 1 ? `${decimalChar}${x[1]}` : '';\n      let res = (_c = x[0]) !== null && _c !== void 0 ? _c : '';\n      const separatorLimit = this.separatorLimit.replace(/\\s/g, '');\n\n      if (separatorLimit && +separatorLimit) {\n        if (res[0] === '-') {\n          res = `-${res.slice(1, res.length).slice(0, separatorLimit.length)}`;\n        } else {\n          res = res.slice(0, separatorLimit.length);\n        }\n      }\n\n      const rgx = /(\\d+)(\\d{3})/;\n\n      while (thousandSeparatorChar && rgx.test(res)) {\n        res = res.replace(rgx, '$1' + thousandSeparatorChar + '$2');\n      }\n\n      if (precision === undefined) {\n        return res + decimals;\n      } else if (precision === 0) {\n        return res;\n      }\n\n      return res + decimals.substring(0, precision + 1);\n    };\n\n    this.percentage = str => {\n      return Number(str) >= 0 && Number(str) <= 100;\n    };\n\n    this.getPrecision = maskExpression => {\n      const x = maskExpression.split('.');\n\n      if (x.length > 1) {\n        return Number(x[x.length - 1]);\n      }\n\n      return Infinity;\n    };\n\n    this.checkAndRemoveSuffix = inputValue => {\n      var _a, _b, _c, _d;\n\n      for (let i = ((_a = this.suffix) === null || _a === void 0 ? void 0 : _a.length) - 1; i >= 0; i--) {\n        const substr = this.suffix.substring(i, (_b = this.suffix) === null || _b === void 0 ? void 0 : _b.length);\n\n        if (inputValue.includes(substr) && i !== ((_c = this.suffix) === null || _c === void 0 ? void 0 : _c.length) - 1 && (i - 1 < 0 || !inputValue.includes(this.suffix.substring(i - 1, (_d = this.suffix) === null || _d === void 0 ? void 0 : _d.length)))) {\n          return inputValue.replace(substr, '');\n        }\n      }\n\n      return inputValue;\n    };\n\n    this.checkInputPrecision = (inputValue, precision, decimalMarker) => {\n      var _a, _b, _c;\n\n      if (precision < Infinity) {\n        // TODO need think about decimalMarker\n        if (Array.isArray(decimalMarker)) {\n          const marker = decimalMarker.find(dm => dm !== this.thousandSeparator); // eslint-disable-next-line no-param-reassign\n\n          decimalMarker = marker ? marker : decimalMarker[0];\n        }\n\n        const precisionRegEx = new RegExp(this._charToRegExpExpression(decimalMarker) + `\\\\d{${precision}}.*$`);\n        const precisionMatch = (_a = inputValue.match(precisionRegEx)) !== null && _a !== void 0 ? _a : [];\n        const precisionMatchLength = (_c = (_b = precisionMatch[0]) === null || _b === void 0 ? void 0 : _b.length) !== null && _c !== void 0 ? _c : 0;\n\n        if (precisionMatchLength - 1 > precision) {\n          const diff = precisionMatchLength - 1 - precision; // eslint-disable-next-line no-param-reassign\n\n          inputValue = inputValue.substring(0, inputValue.length - diff);\n        }\n\n        if (precision === 0 && this._compareOrIncludes(inputValue[inputValue.length - 1], decimalMarker, this.thousandSeparator)) {\n          // eslint-disable-next-line no-param-reassign\n          inputValue = inputValue.substring(0, inputValue.length - 1);\n        }\n      }\n\n      return inputValue;\n    };\n\n    this._shift = new Set();\n    this.clearIfNotMatch = this._config.clearIfNotMatch;\n    this.dropSpecialCharacters = this._config.dropSpecialCharacters;\n    this.maskSpecialCharacters = this._config.specialCharacters;\n    this.maskAvailablePatterns = this._config.patterns;\n    this.prefix = this._config.prefix;\n    this.suffix = this._config.suffix;\n    this.thousandSeparator = this._config.thousandSeparator;\n    this.decimalMarker = this._config.decimalMarker;\n    this.hiddenInput = this._config.hiddenInput;\n    this.showMaskTyped = this._config.showMaskTyped;\n    this.placeHolderCharacter = this._config.placeHolderCharacter;\n    this.validation = this._config.validation;\n    this.separatorLimit = this._config.separatorLimit;\n    this.allowNegativeNumbers = this._config.allowNegativeNumbers;\n    this.leadZeroDateTime = this._config.leadZeroDateTime;\n  }\n\n  applyMaskWithPattern(inputValue, maskAndPattern) {\n    const [mask, customPattern] = maskAndPattern;\n    this.customPattern = customPattern;\n    return this.applyMask(inputValue, mask);\n  }\n\n  applyMask(inputValue, maskExpression, position = 0, justPasted = false, backspaced = false, // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n  cb = () => {}) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;\n\n    if (!maskExpression || typeof inputValue !== 'string') {\n      return '';\n    }\n\n    let cursor = 0;\n    let result = '';\n    let multi = false;\n    let backspaceShift = false;\n    let shift = 1;\n    let stepBack = false;\n\n    if (inputValue.slice(0, this.prefix.length) === this.prefix) {\n      // eslint-disable-next-line no-param-reassign\n      inputValue = inputValue.slice(this.prefix.length, inputValue.length);\n    }\n\n    if (!!this.suffix && (inputValue === null || inputValue === void 0 ? void 0 : inputValue.length) > 0) {\n      // eslint-disable-next-line no-param-reassign\n      inputValue = this.checkAndRemoveSuffix(inputValue);\n    }\n\n    const inputArray = inputValue.toString().split('');\n\n    if (maskExpression === 'IP') {\n      const valuesIP = inputValue.split('.');\n      this.ipError = this._validIP(valuesIP); // eslint-disable-next-line no-param-reassign\n\n      maskExpression = '099.099.099.099';\n    }\n\n    const arr = [];\n\n    for (let i = 0; i < inputValue.length; i++) {\n      if ((_a = inputValue[i]) === null || _a === void 0 ? void 0 : _a.match('\\\\d')) {\n        arr.push((_b = inputValue[i]) !== null && _b !== void 0 ? _b : '');\n      }\n    }\n\n    if (maskExpression === 'CPF_CNPJ') {\n      this.cpfCnpjError = arr.length !== 11 && arr.length !== 14;\n\n      if (arr.length > 11) {\n        // eslint-disable-next-line no-param-reassign\n        maskExpression = '00.000.000/0000-00';\n      } else {\n        // eslint-disable-next-line no-param-reassign\n        maskExpression = '000.000.000-00';\n      }\n    }\n\n    if (maskExpression.startsWith('percent')) {\n      if (inputValue.match('[a-z]|[A-Z]') || // eslint-disable-next-line no-useless-escape\n      inputValue.match(/[-!$%^&*()_+|~=`{}\\[\\]:\";'<>?,\\/.]/)) {\n        // eslint-disable-next-line no-param-reassign\n        inputValue = this._stripToDecimal(inputValue);\n        const precision = this.getPrecision(maskExpression); // eslint-disable-next-line no-param-reassign\n\n        inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n      }\n\n      if (inputValue.indexOf('.') > 0 && !this.percentage(inputValue.substring(0, inputValue.indexOf('.')))) {\n        const base = inputValue.substring(0, inputValue.indexOf('.') - 1); // eslint-disable-next-line no-param-reassign\n\n        inputValue = `${base}${inputValue.substring(inputValue.indexOf('.'), inputValue.length)}`;\n      }\n\n      if (this.percentage(inputValue)) {\n        result = inputValue;\n      } else {\n        result = inputValue.substring(0, inputValue.length - 1);\n      }\n    } else if (maskExpression.startsWith('separator')) {\n      if (inputValue.match('[wа-яА-Я]') || inputValue.match('[ЁёА-я]') || inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[-@#!$%\\\\^&*()_£¬'+|~=`{}\\]:\";<>.?/]/) || inputValue.match('[^A-Za-z0-9,]')) {\n        // eslint-disable-next-line no-param-reassign\n        inputValue = this._stripToDecimal(inputValue);\n      } // eslint-disable-next-line no-param-reassign\n\n\n      inputValue = inputValue.length > 1 && inputValue[0] === '0' && inputValue[1] !== this.thousandSeparator && !this._compareOrIncludes(inputValue[1], this.decimalMarker, this.thousandSeparator) && !backspaced ? inputValue.slice(0, inputValue.length - 1) : inputValue;\n\n      if (backspaced) {\n        // eslint-disable-next-line no-param-reassign\n        inputValue = this._compareOrIncludes(inputValue[inputValue.length - 1], this.decimalMarker, this.thousandSeparator) ? inputValue.slice(0, inputValue.length - 1) : inputValue;\n      } // TODO: we had different rexexps here for the different cases... but tests dont seam to bother - check this\n      //  separator: no COMMA, dot-sep: no SPACE, COMMA OK, comma-sep: no SPACE, COMMA OK\n\n\n      const thousandSeparatorCharEscaped = this._charToRegExpExpression(this.thousandSeparator);\n\n      let invalidChars = '@#!$%^&*()_+|~=`{}\\\\[\\\\]:\\\\s,\\\\.\";<>?\\\\/'.replace(thousandSeparatorCharEscaped, ''); //.replace(decimalMarkerEscaped, '');\n\n      if (Array.isArray(this.decimalMarker)) {\n        for (const marker of this.decimalMarker) {\n          invalidChars = invalidChars.replace(this._charToRegExpExpression(marker), '');\n        }\n      } else {\n        invalidChars = invalidChars.replace(this._charToRegExpExpression(this.decimalMarker), '');\n      }\n\n      const invalidCharRegexp = new RegExp('[' + invalidChars + ']');\n\n      if (inputValue.match(invalidCharRegexp) || inputValue.length === 1 && this._compareOrIncludes(inputValue, this.decimalMarker, this.thousandSeparator)) {\n        // eslint-disable-next-line no-param-reassign\n        inputValue = inputValue.substring(0, inputValue.length - 1);\n      }\n\n      const precision = this.getPrecision(maskExpression); // eslint-disable-next-line no-param-reassign\n\n      inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n      const strForSep = inputValue.replace(new RegExp(thousandSeparatorCharEscaped, 'g'), '');\n      result = this._formatWithSeparators(strForSep, this.thousandSeparator, this.decimalMarker, precision);\n      const commaShift = result.indexOf(',') - inputValue.indexOf(',');\n      const shiftStep = result.length - inputValue.length;\n\n      if (shiftStep > 0 && result[position] !== ',') {\n        backspaceShift = true;\n        let _shift = 0;\n\n        do {\n          this._shift.add(position + _shift);\n\n          _shift++;\n        } while (_shift < shiftStep);\n      } else if (commaShift !== 0 && position > 0 && !(result.indexOf(',') >= position && position > 3) || !(result.indexOf('.') >= position && position > 3) && shiftStep <= 0) {\n        this._shift.clear();\n\n        backspaceShift = true;\n        shift = shiftStep; // eslint-disable-next-line no-param-reassign\n\n        position += shiftStep;\n\n        this._shift.add(position);\n      } else {\n        this._shift.clear();\n      }\n    } else {\n      for ( // eslint-disable-next-line\n      let i = 0, inputSymbol = inputArray[0]; i < inputArray.length; i++, inputSymbol = (_c = inputArray[i]) !== null && _c !== void 0 ? _c : '') {\n        if (cursor === maskExpression.length) {\n          break;\n        }\n\n        if (this._checkSymbolMask(inputSymbol, (_d = maskExpression[cursor]) !== null && _d !== void 0 ? _d : '') && maskExpression[cursor + 1] === '?') {\n          result += inputSymbol;\n          cursor += 2;\n        } else if (maskExpression[cursor + 1] === '*' && multi && this._checkSymbolMask(inputSymbol, (_e = maskExpression[cursor + 2]) !== null && _e !== void 0 ? _e : '')) {\n          result += inputSymbol;\n          cursor += 3;\n          multi = false;\n        } else if (this._checkSymbolMask(inputSymbol, (_f = maskExpression[cursor]) !== null && _f !== void 0 ? _f : '') && maskExpression[cursor + 1] === '*') {\n          result += inputSymbol;\n          multi = true;\n        } else if (maskExpression[cursor + 1] === '?' && this._checkSymbolMask(inputSymbol, (_g = maskExpression[cursor + 2]) !== null && _g !== void 0 ? _g : '')) {\n          result += inputSymbol;\n          cursor += 3;\n        } else if (this._checkSymbolMask(inputSymbol, (_h = maskExpression[cursor]) !== null && _h !== void 0 ? _h : '')) {\n          if (maskExpression[cursor] === 'H') {\n            if (Number(inputSymbol) > 2) {\n              cursor += 1;\n\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n\n              i--;\n\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n\n              continue;\n            }\n          }\n\n          if (maskExpression[cursor] === 'h') {\n            if (result === '2' && Number(inputSymbol) > 3) {\n              cursor += 1;\n              i--;\n              continue;\n            }\n          }\n\n          if (maskExpression[cursor] === 'm') {\n            if (Number(inputSymbol) > 5) {\n              cursor += 1;\n\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n\n              i--;\n\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n\n              continue;\n            }\n          }\n\n          if (maskExpression[cursor] === 's') {\n            if (Number(inputSymbol) > 5) {\n              cursor += 1;\n\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n\n              i--;\n\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n\n              continue;\n            }\n          }\n\n          const daysCount = 31;\n\n          if (maskExpression[cursor] === 'd') {\n            if (Number(inputSymbol) > 3 && this.leadZeroDateTime || Number(inputValue.slice(cursor, cursor + 2)) > daysCount || inputValue[cursor + 1] === '/') {\n              cursor += 1;\n\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n\n              i--;\n\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n\n              continue;\n            }\n          }\n\n          if (maskExpression[cursor] === 'M') {\n            const monthsCount = 12; // mask without day\n\n            const withoutDays = cursor === 0 && (Number(inputSymbol) > 2 || Number(inputValue.slice(cursor, cursor + 2)) > monthsCount || inputValue[cursor + 1] === '/'); // day<10 && month<12 for input\n\n            const day1monthInput = inputValue.slice(cursor - 3, cursor - 1).includes('/') && (inputValue[cursor - 2] === '/' && Number(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount && inputValue[cursor] !== '/' || inputValue[cursor] === '/' || inputValue[cursor - 3] === '/' && Number(inputValue.slice(cursor - 2, cursor)) > monthsCount && inputValue[cursor - 1] !== '/' || inputValue[cursor - 1] === '/'); // 10<day<31 && month<12 for input\n\n            const day2monthInput = Number(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount && !inputValue.slice(cursor - 3, cursor - 1).includes('/') && inputValue[cursor - 1] === '/' && (Number(inputValue.slice(cursor, cursor + 2)) > monthsCount || inputValue[cursor + 1] === '/'); // day<10 && month<12 for paste whole data\n\n            const day1monthPaste = Number(inputValue.slice(cursor - 3, cursor - 1)) > daysCount && !inputValue.slice(cursor - 3, cursor - 1).includes('/') && !inputValue.slice(cursor - 2, cursor).includes('/') && Number(inputValue.slice(cursor - 2, cursor)) > monthsCount; // 10<day<31 && month<12 for paste whole data\n\n            const day2monthPaste = Number(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount && !inputValue.slice(cursor - 3, cursor - 1).includes('/') && inputValue[cursor - 1] !== '/' && Number(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount;\n\n            if (Number(inputSymbol) > 1 && this.leadZeroDateTime || withoutDays || day1monthInput || day2monthInput || day1monthPaste || day2monthPaste) {\n              cursor += 1;\n\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n\n              i--;\n\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n\n              continue;\n            }\n          }\n\n          result += inputSymbol;\n          cursor++;\n        } else if (inputSymbol === ' ' && maskExpression[cursor] === ' ') {\n          result += inputSymbol;\n          cursor++;\n        } else if (this.maskSpecialCharacters.indexOf((_j = maskExpression[cursor]) !== null && _j !== void 0 ? _j : '') !== -1) {\n          result += maskExpression[cursor];\n          cursor++;\n\n          this._shiftStep(maskExpression, cursor, inputArray.length);\n\n          i--;\n        } else if (this.maskSpecialCharacters.indexOf(inputSymbol) > -1 && this.maskAvailablePatterns[(_k = maskExpression[cursor]) !== null && _k !== void 0 ? _k : ''] && ((_m = this.maskAvailablePatterns[(_l = maskExpression[cursor]) !== null && _l !== void 0 ? _l : '']) === null || _m === void 0 ? void 0 : _m.optional)) {\n          if (!!inputArray[cursor] && maskExpression !== '099.099.099.099' && maskExpression !== '000.000.000-00' && maskExpression !== '00.000.000/0000-00' && !maskExpression.match(/^9+\\.0+$/)) {\n            result += inputArray[cursor];\n          }\n\n          cursor++;\n          i--;\n        } else if (this.maskExpression[cursor + 1] === '*' && this._findSpecialChar((_o = this.maskExpression[cursor + 2]) !== null && _o !== void 0 ? _o : '') && this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] && multi) {\n          cursor += 3;\n          result += inputSymbol;\n        } else if (this.maskExpression[cursor + 1] === '?' && this._findSpecialChar((_p = this.maskExpression[cursor + 2]) !== null && _p !== void 0 ? _p : '') && this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] && multi) {\n          cursor += 3;\n          result += inputSymbol;\n        } else if (this.showMaskTyped && this.maskSpecialCharacters.indexOf(inputSymbol) < 0 && inputSymbol !== this.placeHolderCharacter) {\n          stepBack = true;\n        }\n      }\n    }\n\n    if (result.length + 1 === maskExpression.length && this.maskSpecialCharacters.indexOf((_q = maskExpression[maskExpression.length - 1]) !== null && _q !== void 0 ? _q : '') !== -1) {\n      result += maskExpression[maskExpression.length - 1];\n    }\n\n    let newPosition = position + 1;\n\n    while (this._shift.has(newPosition)) {\n      shift++;\n      newPosition++;\n    }\n\n    let actualShift = justPasted && !maskExpression.startsWith('separator') ? cursor : this._shift.has(position) ? shift : 0;\n\n    if (stepBack) {\n      actualShift--;\n    }\n\n    cb(actualShift, backspaceShift);\n\n    if (shift < 0) {\n      this._shift.clear();\n    }\n\n    let onlySpecial = false;\n\n    if (backspaced) {\n      onlySpecial = inputArray.every(char => this.maskSpecialCharacters.includes(char));\n    }\n\n    let res = `${this.prefix}${onlySpecial ? '' : result}${this.suffix}`;\n\n    if (result.length === 0) {\n      res = `${this.prefix}${result}`;\n    }\n\n    return res;\n  }\n\n  _findSpecialChar(inputSymbol) {\n    return this.maskSpecialCharacters.find(val => val === inputSymbol);\n  }\n\n  _checkSymbolMask(inputSymbol, maskSymbol) {\n    var _a, _b, _c;\n\n    this.maskAvailablePatterns = this.customPattern ? this.customPattern : this.maskAvailablePatterns;\n    return (_c = ((_a = this.maskAvailablePatterns[maskSymbol]) === null || _a === void 0 ? void 0 : _a.pattern) && ((_b = this.maskAvailablePatterns[maskSymbol]) === null || _b === void 0 ? void 0 : _b.pattern.test(inputSymbol))) !== null && _c !== void 0 ? _c : false;\n  }\n\n  _stripToDecimal(str) {\n    return str.split('').filter((i, idx) => {\n      const isDecimalMarker = typeof this.decimalMarker === 'string' ? i === this.decimalMarker : // TODO (inepipenko) use utility type\n      this.decimalMarker.includes(i);\n      return i.match('^-?\\\\d') || i === this.thousandSeparator || isDecimalMarker || i === '-' && idx === 0 && this.allowNegativeNumbers;\n    }).join('');\n  }\n\n  _charToRegExpExpression(char) {\n    // if (Array.isArray(char)) {\n    // \treturn char.map((v) => ('[\\\\^$.|?*+()'.indexOf(v) >= 0 ? `\\\\${v}` : v)).join('|');\n    // }\n    if (char) {\n      const charsToEscape = '[\\\\^$.|?*+()';\n      return char === ' ' ? '\\\\s' : charsToEscape.indexOf(char) >= 0 ? `\\\\${char}` : char;\n    }\n\n    return char;\n  }\n\n  _shiftStep(maskExpression, cursor, inputLength) {\n    const shiftStep = /[*?]/g.test(maskExpression.slice(0, cursor)) ? inputLength : cursor;\n\n    this._shift.add(shiftStep + this.prefix.length || 0);\n  }\n\n  _compareOrIncludes(value, comparedValue, excludedValue) {\n    return Array.isArray(comparedValue) ? comparedValue.filter(v => v !== excludedValue).includes(value) : value === comparedValue;\n  }\n\n  _validIP(valuesIP) {\n    return !(valuesIP.length === 4 && !valuesIP.some((value, index) => {\n      if (valuesIP.length !== index + 1) {\n        return value === '' || Number(value) > 255;\n      }\n\n      return value === '' || Number(value.substring(0, 3)) > 255;\n    }));\n  }\n\n}\n\nMaskApplierService.ɵfac = function MaskApplierService_Factory(t) {\n  return new (t || MaskApplierService)(i0.ɵɵinject(config));\n};\n\nMaskApplierService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MaskApplierService,\n  factory: MaskApplierService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MaskApplierService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [config]\n      }]\n    }];\n  }, null);\n})();\n\nclass MaskService extends MaskApplierService {\n  constructor(document, _config, _elementRef, _renderer) {\n    super(_config);\n    this.document = document;\n    this._config = _config;\n    this._elementRef = _elementRef;\n    this._renderer = _renderer;\n    this.maskExpression = '';\n    this.isNumberValue = false;\n    this.placeHolderCharacter = '_';\n    this.maskIsShown = '';\n    this.selStart = null;\n    this.selEnd = null;\n    /**\n     * Whether we are currently in writeValue function, in this case when applying the mask we don't want to trigger onChange function,\n     * since writeValue should be a one way only process of writing the DOM value based on the Angular model value.\n     */\n\n    this.writingValue = false;\n    this.maskChanged = false;\n    this.triggerOnMaskChange = false; // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n\n    this.onChange = _ => {};\n  } // eslint-disable-next-line complexity\n\n\n  applyMask(inputValue, maskExpression, position = 0, justPasted = false, backspaced = false, // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n  cb = () => {}) {\n    var _a;\n\n    if (!maskExpression) {\n      return inputValue !== this.actualValue ? this.actualValue : inputValue;\n    }\n\n    this.maskIsShown = this.showMaskTyped ? this.showMaskInInput() : '';\n\n    if (this.maskExpression === 'IP' && this.showMaskTyped) {\n      this.maskIsShown = this.showMaskInInput(inputValue || '#');\n    }\n\n    if (this.maskExpression === 'CPF_CNPJ' && this.showMaskTyped) {\n      this.maskIsShown = this.showMaskInInput(inputValue || '#');\n    }\n\n    if (!inputValue && this.showMaskTyped) {\n      this.formControlResult(this.prefix);\n      return this.prefix + this.maskIsShown;\n    }\n\n    const getSymbol = !!inputValue && typeof this.selStart === 'number' ? (_a = inputValue[this.selStart]) !== null && _a !== void 0 ? _a : '' : '';\n    let newInputValue = '';\n\n    if (this.hiddenInput !== undefined && !this.writingValue) {\n      let actualResult = this.actualValue.split(''); // eslint-disable  @typescript-eslint/no-unused-expressions\n      // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n\n      inputValue !== '' && actualResult.length ? typeof this.selStart === 'number' && typeof this.selEnd === 'number' ? inputValue.length > actualResult.length ? actualResult.splice(this.selStart, 0, getSymbol) : inputValue.length < actualResult.length ? actualResult.length - inputValue.length === 1 ? actualResult.splice(this.selStart - 1, 1) : actualResult.splice(this.selStart, this.selEnd - this.selStart) : null : null : actualResult = [];\n\n      if (this.showMaskTyped) {\n        // eslint-disable-next-line no-param-reassign\n        inputValue = this.removeMask(inputValue);\n      } // eslint-enable  @typescript-eslint/no-unused-expressions\n\n\n      newInputValue = this.actualValue.length && actualResult.length <= inputValue.length ? this.shiftTypedSymbols(actualResult.join('')) : inputValue;\n    }\n\n    if (this.showMaskTyped) {\n      // eslint-disable-next-line no-param-reassign\n      inputValue = this.removeMask(inputValue);\n    }\n\n    newInputValue = Boolean(newInputValue) && newInputValue.length ? newInputValue : inputValue;\n    const result = super.applyMask(newInputValue, maskExpression, position, justPasted, backspaced, cb);\n    this.actualValue = this.getActualValue(result); // handle some separator implications:\n    // a.) adjust decimalMarker default (. -> ,) if thousandSeparator is a dot\n\n    if (this.thousandSeparator === '.' && this.decimalMarker === '.') {\n      this.decimalMarker = ',';\n    } // b) remove decimal marker from list of special characters to mask\n\n\n    if (this.maskExpression.startsWith('separator') && this.dropSpecialCharacters === true) {\n      this.maskSpecialCharacters = this.maskSpecialCharacters.filter(item => !this._compareOrIncludes(item, this.decimalMarker, this.thousandSeparator) //item !== this.decimalMarker, // !\n      );\n    }\n\n    this.formControlResult(result);\n\n    if (!this.showMaskTyped) {\n      if (this.hiddenInput) {\n        return result && result.length ? this.hideInput(result, this.maskExpression) : result;\n      }\n\n      return result;\n    }\n\n    const resLen = result.length;\n    const prefNmask = this.prefix + this.maskIsShown;\n\n    if (this.maskExpression.includes('H')) {\n      const countSkipedSymbol = this._numberSkipedSymbols(result);\n\n      return result + prefNmask.slice(resLen + countSkipedSymbol);\n    } else if (this.maskExpression === 'IP' || this.maskExpression === 'CPF_CNPJ') {\n      return result + prefNmask;\n    }\n\n    return result + prefNmask.slice(resLen);\n  } // get the number of characters that were shifted\n\n\n  _numberSkipedSymbols(value) {\n    const regex = /(^|\\D)(\\d\\D)/g;\n    let match = regex.exec(value);\n    let countSkipedSymbol = 0;\n\n    while (match != null) {\n      countSkipedSymbol += 1;\n      match = regex.exec(value);\n    }\n\n    return countSkipedSymbol;\n  }\n\n  applyValueChanges(position, justPasted, backspaced, // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n  cb = () => {}) {\n    const formElement = this._elementRef.nativeElement;\n    formElement.value = this.applyMask(formElement.value, this.maskExpression, position, justPasted, backspaced, cb);\n\n    if (formElement === this._getActiveElement()) {\n      return;\n    }\n\n    this.clearIfNotMatchFn();\n  }\n\n  hideInput(inputValue, maskExpression) {\n    return inputValue.split('').map((curr, index) => {\n      var _a, _b, _c, _d, _e;\n\n      if (this.maskAvailablePatterns && this.maskAvailablePatterns[(_a = maskExpression[index]) !== null && _a !== void 0 ? _a : ''] && ((_c = this.maskAvailablePatterns[(_b = maskExpression[index]) !== null && _b !== void 0 ? _b : '']) === null || _c === void 0 ? void 0 : _c.symbol)) {\n        return (_e = this.maskAvailablePatterns[(_d = maskExpression[index]) !== null && _d !== void 0 ? _d : '']) === null || _e === void 0 ? void 0 : _e.symbol;\n      }\n\n      return curr;\n    }).join('');\n  } // this function is not necessary, it checks result against maskExpression\n\n\n  getActualValue(res) {\n    const compare = res.split('').filter((symbol, i) => {\n      var _a;\n\n      const maskChar = (_a = this.maskExpression[i]) !== null && _a !== void 0 ? _a : '';\n      return this._checkSymbolMask(symbol, maskChar) || this.maskSpecialCharacters.includes(maskChar) && symbol === maskChar;\n    });\n\n    if (compare.join('') === res) {\n      return compare.join('');\n    }\n\n    return res;\n  }\n\n  shiftTypedSymbols(inputValue) {\n    let symbolToReplace = '';\n    const newInputValue = inputValue && inputValue.split('').map((currSymbol, index) => {\n      var _a;\n\n      if (this.maskSpecialCharacters.includes((_a = inputValue[index + 1]) !== null && _a !== void 0 ? _a : '') && inputValue[index + 1] !== this.maskExpression[index + 1]) {\n        symbolToReplace = currSymbol;\n        return inputValue[index + 1];\n      }\n\n      if (symbolToReplace.length) {\n        const replaceSymbol = symbolToReplace;\n        symbolToReplace = '';\n        return replaceSymbol;\n      }\n\n      return currSymbol;\n    }) || [];\n    return newInputValue.join('');\n  }\n  /**\n   * Convert number value to string\n   * 3.1415 -> '3.1415'\n   * 1e-7 -> '0.0000001'\n   */\n\n\n  numberToString(value) {\n    if (!value && value !== 0) {\n      return String(value);\n    }\n\n    return Number(value).toLocaleString('fullwide', {\n      useGrouping: false,\n      maximumFractionDigits: 20\n    });\n  }\n\n  showMaskInInput(inputVal) {\n    if (this.showMaskTyped && !!this.shownMaskExpression) {\n      if (this.maskExpression.length !== this.shownMaskExpression.length) {\n        throw new Error('Mask expression must match mask placeholder length');\n      } else {\n        return this.shownMaskExpression;\n      }\n    } else if (this.showMaskTyped) {\n      if (inputVal) {\n        if (this.maskExpression === 'IP') {\n          return this._checkForIp(inputVal);\n        }\n\n        if (this.maskExpression === 'CPF_CNPJ') {\n          return this._checkForCpfCnpj(inputVal);\n        }\n      }\n\n      return this.maskExpression.replace(/\\w/g, this.placeHolderCharacter);\n    }\n\n    return '';\n  }\n\n  clearIfNotMatchFn() {\n    const formElement = this._elementRef.nativeElement;\n\n    if (this.clearIfNotMatch && this.prefix.length + this.maskExpression.length + this.suffix.length !== formElement.value.replace(/_/g, '').length) {\n      this.formElementProperty = ['value', ''];\n      this.applyMask(formElement.value, this.maskExpression);\n    }\n  }\n\n  set formElementProperty([name, value]) {\n    Promise.resolve().then(() => this._renderer.setProperty(this._elementRef.nativeElement, name, value));\n  }\n\n  checkSpecialCharAmount(mask) {\n    const chars = mask.split('').filter(item => this._findSpecialChar(item));\n    return chars.length;\n  }\n\n  removeMask(inputValue) {\n    return this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.maskSpecialCharacters.concat('_').concat(this.placeHolderCharacter));\n  }\n\n  _checkForIp(inputVal) {\n    var _a;\n\n    if (inputVal === '#') {\n      return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n    }\n\n    const arr = [];\n\n    for (let i = 0; i < inputVal.length; i++) {\n      const value = (_a = inputVal[i]) !== null && _a !== void 0 ? _a : '';\n\n      if (!value) {\n        continue;\n      }\n\n      if (value.match('\\\\d')) {\n        arr.push(value);\n      }\n    }\n\n    if (arr.length <= 3) {\n      return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n    }\n\n    if (arr.length > 3 && arr.length <= 6) {\n      return `${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n    }\n\n    if (arr.length > 6 && arr.length <= 9) {\n      return this.placeHolderCharacter;\n    }\n\n    if (arr.length > 9 && arr.length <= 12) {\n      return '';\n    }\n\n    return '';\n  }\n\n  _checkForCpfCnpj(inputVal) {\n    var _a;\n\n    const cpf = `${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n    const cnpj = `${this.placeHolderCharacter}${this.placeHolderCharacter}` + `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `/${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n\n    if (inputVal === '#') {\n      return cpf;\n    }\n\n    const arr = [];\n\n    for (let i = 0; i < inputVal.length; i++) {\n      const value = (_a = inputVal[i]) !== null && _a !== void 0 ? _a : '';\n\n      if (!value) {\n        continue;\n      }\n\n      if (value.match('\\\\d')) {\n        arr.push(value);\n      }\n    }\n\n    if (arr.length <= 3) {\n      return cpf.slice(arr.length, cpf.length);\n    }\n\n    if (arr.length > 3 && arr.length <= 6) {\n      return cpf.slice(arr.length + 1, cpf.length);\n    }\n\n    if (arr.length > 6 && arr.length <= 9) {\n      return cpf.slice(arr.length + 2, cpf.length);\n    }\n\n    if (arr.length > 9 && arr.length < 11) {\n      return cpf.slice(arr.length + 3, cpf.length);\n    }\n\n    if (arr.length === 11) {\n      return '';\n    }\n\n    if (arr.length === 12) {\n      if (inputVal.length === 17) {\n        return cnpj.slice(16, cnpj.length);\n      }\n\n      return cnpj.slice(15, cnpj.length);\n    }\n\n    if (arr.length > 12 && arr.length <= 14) {\n      return cnpj.slice(arr.length + 4, cnpj.length);\n    }\n\n    return '';\n  }\n  /**\n   * Recursively determine the current active element by navigating the Shadow DOM until the Active Element is found.\n   */\n\n\n  _getActiveElement(document = this.document) {\n    var _a;\n\n    const shadowRootEl = (_a = document === null || document === void 0 ? void 0 : document.activeElement) === null || _a === void 0 ? void 0 : _a.shadowRoot;\n\n    if (!(shadowRootEl === null || shadowRootEl === void 0 ? void 0 : shadowRootEl.activeElement)) {\n      return document.activeElement;\n    } else {\n      return this._getActiveElement(shadowRootEl);\n    }\n  }\n  /**\n   * Propogates the input value back to the Angular model by triggering the onChange function. It won't do this if writingValue\n   * is true. If that is true it means we are currently in the writeValue function, which is supposed to only update the actual\n   * DOM element based on the Angular model value. It should be a one way process, i.e. writeValue should not be modifying the Angular\n   * model value too. Therefore, we don't trigger onChange in this scenario.\n   * @param inputValue the current form input value\n   */\n\n\n  formControlResult(inputValue) {\n    if (this.writingValue || !this.triggerOnMaskChange && this.maskChanged) {\n      this.maskChanged = false;\n      return;\n    }\n\n    if (Array.isArray(this.dropSpecialCharacters)) {\n      this.onChange(this._toNumber(this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.dropSpecialCharacters)));\n    } else if (this.dropSpecialCharacters) {\n      this.onChange(this._toNumber(this._checkSymbols(inputValue)));\n    } else {\n      this.onChange(this._removeSuffix(inputValue));\n    }\n  }\n\n  _toNumber(value) {\n    if (!this.isNumberValue || value === '') {\n      return value;\n    }\n\n    const num = Number(value);\n    return Number.isNaN(num) ? value : num;\n  }\n\n  _removeMask(value, specialCharactersForRemove) {\n    return value ? value.replace(this._regExpForRemove(specialCharactersForRemove), '') : value;\n  }\n\n  _removePrefix(value) {\n    if (!this.prefix) {\n      return value;\n    }\n\n    return value ? value.replace(this.prefix, '') : value;\n  }\n\n  _removeSuffix(value) {\n    if (!this.suffix) {\n      return value;\n    }\n\n    return value ? value.replace(this.suffix, '') : value;\n  }\n\n  _retrieveSeparatorValue(result) {\n    return this._removeMask(this._removeSuffix(this._removePrefix(result)), this.maskSpecialCharacters);\n  }\n\n  _regExpForRemove(specialCharactersForRemove) {\n    return new RegExp(specialCharactersForRemove.map(item => `\\\\${item}`).join('|'), 'gi');\n  }\n\n  _replaceDecimalMarkerToDot(value) {\n    const markers = Array.isArray(this.decimalMarker) ? this.decimalMarker : [this.decimalMarker];\n    return value.replace(this._regExpForRemove(markers), '.');\n  }\n\n  _checkSymbols(result) {\n    if (result === '') {\n      return result;\n    }\n\n    const separatorPrecision = this._retrieveSeparatorPrecision(this.maskExpression);\n\n    const separatorValue = this._replaceDecimalMarkerToDot(this._retrieveSeparatorValue(result));\n\n    if (!this.isNumberValue) {\n      return separatorValue;\n    }\n\n    if (separatorPrecision) {\n      if (result === this.decimalMarker) {\n        return null;\n      }\n\n      return this._checkPrecision(this.maskExpression, separatorValue);\n    } else {\n      return Number(separatorValue);\n    }\n  } // TODO should think about helpers or separting decimal precision to own property\n\n\n  _retrieveSeparatorPrecision(maskExpretion) {\n    const matcher = maskExpretion.match(new RegExp(`^separator\\\\.([^d]*)`));\n    return matcher ? Number(matcher[1]) : null;\n  }\n\n  _checkPrecision(separatorExpression, separatorValue) {\n    if (separatorExpression.indexOf('2') > 0) {\n      return Number(separatorValue).toFixed(2);\n    }\n\n    return Number(separatorValue);\n  }\n\n}\n\nMaskService.ɵfac = function MaskService_Factory(t) {\n  return new (t || MaskService)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(config), i0.ɵɵinject(i0.ElementRef), i0.ɵɵinject(i0.Renderer2));\n};\n\nMaskService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MaskService,\n  factory: MaskService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MaskService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: Document,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [config]\n      }]\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }];\n  }, null);\n})();\n\nclass MaskDirective {\n  constructor(document, _maskService, _config) {\n    this.document = document;\n    this._maskService = _maskService;\n    this._config = _config; // eslint-disable-next-line @angular-eslint/no-input-rename\n\n    this.maskExpression = '';\n    this.specialCharacters = [];\n    this.patterns = {};\n    this.prefix = '';\n    this.suffix = '';\n    this.thousandSeparator = ' ';\n    this.decimalMarker = '.';\n    this.dropSpecialCharacters = null;\n    this.hiddenInput = null;\n    this.showMaskTyped = null;\n    this.placeHolderCharacter = null;\n    this.shownMaskExpression = null;\n    this.showTemplate = null;\n    this.clearIfNotMatch = null;\n    this.validation = null;\n    this.separatorLimit = null;\n    this.allowNegativeNumbers = null;\n    this.leadZeroDateTime = null;\n    this.triggerOnMaskChange = null;\n    this.maskFilled = new EventEmitter();\n    this._maskValue = '';\n    this._position = null;\n    this._maskExpressionArray = [];\n    this._justPasted = false; // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n\n    this.onChange = _ => {}; // eslint-disable-next-line @typescript-eslint/no-empty-function\n\n\n    this.onTouch = () => {};\n  }\n\n  ngOnChanges(changes) {\n    const {\n      maskExpression,\n      specialCharacters,\n      patterns,\n      prefix,\n      suffix,\n      thousandSeparator,\n      decimalMarker,\n      dropSpecialCharacters,\n      hiddenInput,\n      showMaskTyped,\n      placeHolderCharacter,\n      shownMaskExpression,\n      showTemplate,\n      clearIfNotMatch,\n      validation,\n      separatorLimit,\n      allowNegativeNumbers,\n      leadZeroDateTime,\n      triggerOnMaskChange\n    } = changes;\n\n    if (maskExpression) {\n      if (maskExpression.currentValue !== maskExpression.previousValue && !maskExpression.firstChange) {\n        this._maskService.maskChanged = true;\n      }\n\n      if (maskExpression.currentValue && maskExpression.currentValue.split('||').length > 1) {\n        this._maskExpressionArray = maskExpression.currentValue.split('||').sort((a, b) => {\n          return a.length - b.length;\n        });\n\n        this._setMask();\n      } else {\n        this._maskExpressionArray = [];\n        this._maskValue = maskExpression.currentValue || '';\n        this._maskService.maskExpression = this._maskValue;\n      }\n    }\n\n    if (specialCharacters) {\n      if (!specialCharacters.currentValue || !Array.isArray(specialCharacters.currentValue)) {\n        return;\n      } else {\n        this._maskService.maskSpecialCharacters = specialCharacters.currentValue || [];\n      }\n    } // Only overwrite the mask available patterns if a pattern has actually been passed in\n\n\n    if (patterns && patterns.currentValue) {\n      this._maskService.maskAvailablePatterns = patterns.currentValue;\n    }\n\n    if (prefix) {\n      this._maskService.prefix = prefix.currentValue;\n    }\n\n    if (suffix) {\n      this._maskService.suffix = suffix.currentValue;\n    }\n\n    if (thousandSeparator) {\n      this._maskService.thousandSeparator = thousandSeparator.currentValue;\n    }\n\n    if (decimalMarker) {\n      this._maskService.decimalMarker = decimalMarker.currentValue;\n    }\n\n    if (dropSpecialCharacters) {\n      this._maskService.dropSpecialCharacters = dropSpecialCharacters.currentValue;\n    }\n\n    if (hiddenInput) {\n      this._maskService.hiddenInput = hiddenInput.currentValue;\n    }\n\n    if (showMaskTyped) {\n      this._maskService.showMaskTyped = showMaskTyped.currentValue;\n    }\n\n    if (placeHolderCharacter) {\n      this._maskService.placeHolderCharacter = placeHolderCharacter.currentValue;\n    }\n\n    if (shownMaskExpression) {\n      this._maskService.shownMaskExpression = shownMaskExpression.currentValue;\n    }\n\n    if (showTemplate) {\n      this._maskService.showTemplate = showTemplate.currentValue;\n    }\n\n    if (clearIfNotMatch) {\n      this._maskService.clearIfNotMatch = clearIfNotMatch.currentValue;\n    }\n\n    if (validation) {\n      this._maskService.validation = validation.currentValue;\n    }\n\n    if (separatorLimit) {\n      this._maskService.separatorLimit = separatorLimit.currentValue;\n    }\n\n    if (allowNegativeNumbers) {\n      this._maskService.allowNegativeNumbers = allowNegativeNumbers.currentValue;\n\n      if (this._maskService.allowNegativeNumbers) {\n        this._maskService.maskSpecialCharacters = this._maskService.maskSpecialCharacters.filter(c => c !== '-');\n      }\n    }\n\n    if (leadZeroDateTime) {\n      this._maskService.leadZeroDateTime = leadZeroDateTime.currentValue;\n    }\n\n    if (triggerOnMaskChange) {\n      this._maskService.triggerOnMaskChange = triggerOnMaskChange.currentValue;\n    }\n\n    this._applyMask();\n  } // eslint-disable-next-line complexity\n\n\n  validate({\n    value\n  }) {\n    var _a, _b;\n\n    if (!this._maskService.validation || !this._maskValue) {\n      return null;\n    }\n\n    if (this._maskService.ipError) {\n      return this._createValidationError(value);\n    }\n\n    if (this._maskService.cpfCnpjError) {\n      return this._createValidationError(value);\n    }\n\n    if (this._maskValue.startsWith('separator')) {\n      return null;\n    }\n\n    if (withoutValidation.includes(this._maskValue)) {\n      return null;\n    }\n\n    if (this._maskService.clearIfNotMatch) {\n      return null;\n    }\n\n    if (timeMasks.includes(this._maskValue)) {\n      return this._validateTime(value);\n    }\n\n    if (value && value.toString().length >= 1) {\n      let counterOfOpt = 0;\n\n      for (const key in this._maskService.maskAvailablePatterns) {\n        if ((_a = this._maskService.maskAvailablePatterns[key]) === null || _a === void 0 ? void 0 : _a.optional) {\n          if (this._maskValue.indexOf(key) !== this._maskValue.lastIndexOf(key)) {\n            const opt = this._maskValue.split('').filter(i => i === key).join('');\n\n            counterOfOpt += opt.length;\n          } else if (this._maskValue.indexOf(key) !== -1) {\n            counterOfOpt++;\n          }\n\n          if (this._maskValue.indexOf(key) !== -1 && value.toString().length >= this._maskValue.indexOf(key)) {\n            return null;\n          }\n\n          if (counterOfOpt === this._maskValue.length) {\n            return null;\n          }\n        }\n      }\n\n      if (this._maskValue.indexOf('{') === 1 && value.toString().length === this._maskValue.length + Number(((_b = this._maskValue.split('{')[1]) !== null && _b !== void 0 ? _b : '').split('}')[0]) - 4) {\n        return null;\n      }\n\n      if (this._maskValue.indexOf('*') === 1 || this._maskValue.indexOf('?') === 1) {\n        return null;\n      } else if (this._maskValue.indexOf('*') > 1 && value.toString().length < this._maskValue.indexOf('*') || this._maskValue.indexOf('?') > 1 && value.toString().length < this._maskValue.indexOf('?') || this._maskValue.indexOf('{') === 1) {\n        return this._createValidationError(value);\n      }\n\n      if (this._maskValue.indexOf('*') === -1 || this._maskValue.indexOf('?') === -1) {\n        const length = this._maskService.dropSpecialCharacters ? this._maskValue.length - this._maskService.checkSpecialCharAmount(this._maskValue) - counterOfOpt : this._maskValue.length - counterOfOpt;\n\n        if (value.toString().length < length) {\n          return this._createValidationError(value);\n        }\n      }\n    }\n\n    if (value) {\n      this.maskFilled.emit();\n      return null;\n    }\n\n    return null;\n  }\n\n  onPaste() {\n    this._justPasted = true;\n  }\n\n  onModelChange(value) {\n    // on form reset we need to update the actualValue\n    if ((value === '' || value === null || value === undefined) && this._maskService.actualValue) {\n      this._maskService.actualValue = this._maskService.getActualValue('');\n    }\n  }\n\n  onInput(e) {\n    const el = e.target;\n    this._inputValue = el.value;\n\n    this._setMask();\n\n    if (!this._maskValue) {\n      this.onChange(el.value);\n      return;\n    }\n\n    const position = el.selectionStart === 1 ? el.selectionStart + this._maskService.prefix.length : el.selectionStart;\n    let caretShift = 0;\n    let backspaceShift = false;\n\n    this._maskService.applyValueChanges(position, this._justPasted, this._code === 'Backspace' || this._code === 'Delete', (shift, _backspaceShift) => {\n      this._justPasted = false;\n      caretShift = shift;\n      backspaceShift = _backspaceShift;\n    }); // only set the selection if the element is active\n\n\n    if (this._getActiveElement() !== el) {\n      return;\n    }\n\n    this._position = this._position === 1 && this._inputValue.length === 1 ? null : this._position;\n    let positionToApply = this._position ? this._inputValue.length + position + caretShift : position + (this._code === 'Backspace' && !backspaceShift ? 0 : caretShift);\n\n    if (positionToApply > this._getActualInputLength()) {\n      positionToApply = this._getActualInputLength();\n    }\n\n    if (positionToApply < 0) {\n      positionToApply = 0;\n    }\n\n    el.setSelectionRange(positionToApply, positionToApply);\n    this._position = null;\n  }\n\n  onBlur() {\n    if (this._maskValue) {\n      this._maskService.clearIfNotMatchFn();\n    }\n\n    this.onTouch();\n  }\n\n  onClick(e) {\n    if (!this._maskValue) {\n      return;\n    }\n\n    const el = e.target;\n    const posStart = 0;\n    const posEnd = 0;\n\n    if (el !== null && el.selectionStart !== null && el.selectionStart === el.selectionEnd && el.selectionStart > this._maskService.prefix.length && // eslint-disable-next-line\n    e.keyCode !== 38) {\n      if (this._maskService.showMaskTyped) {\n        // We are showing the mask in the input\n        this._maskService.maskIsShown = this._maskService.showMaskInInput();\n\n        if (el.setSelectionRange && this._maskService.prefix + this._maskService.maskIsShown === el.value) {\n          // the input ONLY contains the mask, so position the cursor at the start\n          el.focus();\n          el.setSelectionRange(posStart, posEnd);\n        } else {\n          // the input contains some characters already\n          if (el.selectionStart > this._maskService.actualValue.length) {\n            // if the user clicked beyond our value's length, position the cursor at the end of our value\n            el.setSelectionRange(this._maskService.actualValue.length, this._maskService.actualValue.length);\n          }\n        }\n      }\n    }\n\n    const nextValue = el && (!el.value || el.value === this._maskService.prefix ? this._maskService.prefix + this._maskService.maskIsShown : el.value);\n    /** Fix of cursor position jumping to end in most browsers no matter where cursor is inserted onFocus */\n\n    if (el && el.value !== nextValue) {\n      el.value = nextValue;\n    }\n    /** fix of cursor position with prefix when mouse click occur */\n\n\n    if (el && (el.selectionStart || el.selectionEnd) <= this._maskService.prefix.length) {\n      el.selectionStart = this._maskService.prefix.length;\n      return;\n    }\n    /** select only inserted text */\n\n\n    if (el && el.selectionEnd > this._getActualInputLength()) {\n      el.selectionEnd = this._getActualInputLength();\n    }\n  } // eslint-disable-next-line complexity\n\n\n  onKeyDown(e) {\n    var _a, _b;\n\n    if (!this._maskValue) {\n      return;\n    }\n\n    this._code = e.code ? e.code : e.key;\n    const el = e.target;\n    this._inputValue = el.value;\n\n    this._setMask();\n\n    if (e.keyCode === 38) {\n      e.preventDefault();\n    }\n\n    if (e.keyCode === 37 || e.keyCode === 8 || e.keyCode === 46) {\n      if (e.keyCode === 8 && el.value.length === 0) {\n        el.selectionStart = el.selectionEnd;\n      }\n\n      if (e.keyCode === 8 && el.selectionStart !== 0) {\n        // If specialChars is false, (shouldn't ever happen) then set to the defaults\n        this.specialCharacters = ((_a = this.specialCharacters) === null || _a === void 0 ? void 0 : _a.length) ? this.specialCharacters : this._config.specialCharacters;\n\n        if (this.prefix.length > 1 && el.selectionStart <= this.prefix.length) {\n          el.setSelectionRange(this.prefix.length, el.selectionEnd);\n        } else {\n          if (this._inputValue.length !== el.selectionStart && el.selectionStart !== 1) {\n            while (this.specialCharacters.includes(((_b = this._inputValue[el.selectionStart - 1]) !== null && _b !== void 0 ? _b : '').toString()) && (this.prefix.length >= 1 && el.selectionStart > this.prefix.length || this.prefix.length === 0)) {\n              el.setSelectionRange(el.selectionStart - 1, el.selectionEnd);\n            }\n          }\n        }\n      }\n\n      this.checkSelectionOnDeletion(el);\n\n      if (this._maskService.prefix.length && el.selectionStart <= this._maskService.prefix.length && el.selectionEnd <= this._maskService.prefix.length) {\n        e.preventDefault();\n      }\n\n      const cursorStart = el.selectionStart;\n\n      if (e.keyCode === 8 && !el.readOnly && cursorStart === 0 && el.selectionEnd === el.value.length && el.value.length !== 0) {\n        this._position = this._maskService.prefix ? this._maskService.prefix.length : 0;\n\n        this._maskService.applyMask(this._maskService.prefix, this._maskService.maskExpression, this._position);\n      }\n    }\n\n    if (!!this.suffix && this.suffix.length > 1 && this._inputValue.length - this.suffix.length < el.selectionStart) {\n      el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n    } else if (e.keyCode === 65 && e.ctrlKey || e.keyCode === 65 && e.metaKey // Cmd + A (Mac)\n    ) {\n      el.setSelectionRange(0, this._getActualInputLength());\n      e.preventDefault();\n    }\n\n    this._maskService.selStart = el.selectionStart;\n    this._maskService.selEnd = el.selectionEnd;\n  }\n  /** It writes the value in the input */\n\n\n  writeValue(inputValue) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (typeof inputValue === 'object' && inputValue !== null && 'value' in inputValue) {\n        if ('disable' in inputValue) {\n          this.setDisabledState(Boolean(inputValue.disable));\n        } // eslint-disable-next-line no-param-reassign\n\n\n        inputValue = inputValue.value;\n      }\n\n      if (typeof inputValue === 'number' || this._maskValue.startsWith('separator')) {\n        // eslint-disable-next-line no-param-reassign\n        inputValue = this._maskService.numberToString(inputValue);\n\n        if (!Array.isArray(this.decimalMarker)) {\n          // eslint-disable-next-line no-param-reassign\n          inputValue = this.decimalMarker !== '.' ? inputValue.replace('.', this.decimalMarker) : inputValue;\n        }\n\n        this._maskService.isNumberValue = true;\n      }\n\n      if (typeof inputValue !== 'string') {\n        // eslint-disable-next-line no-param-reassign\n        inputValue = '';\n      }\n\n      this._inputValue = inputValue;\n\n      this._setMask();\n\n      if (inputValue && this._maskService.maskExpression || this._maskService.maskExpression && (this._maskService.prefix || this._maskService.showMaskTyped)) {\n        // Let the service we know we are writing value so that triggering onChange function won't happen during applyMask\n        this._maskService.writingValue = true;\n        this._maskService.formElementProperty = ['value', this._maskService.applyMask(inputValue, this._maskService.maskExpression)]; // Let the service know we've finished writing value\n\n        this._maskService.writingValue = false;\n      } else {\n        this._maskService.formElementProperty = ['value', inputValue];\n      }\n\n      this._inputValue = inputValue;\n    });\n  }\n\n  registerOnChange(fn) {\n    this._maskService.onChange = this.onChange = fn;\n  }\n\n  registerOnTouched(fn) {\n    this.onTouch = fn;\n  }\n\n  _getActiveElement(document = this.document) {\n    var _a;\n\n    const shadowRootEl = (_a = document === null || document === void 0 ? void 0 : document.activeElement) === null || _a === void 0 ? void 0 : _a.shadowRoot;\n\n    if (!(shadowRootEl === null || shadowRootEl === void 0 ? void 0 : shadowRootEl.activeElement)) {\n      return document.activeElement;\n    } else {\n      return this._getActiveElement(shadowRootEl);\n    }\n  }\n\n  checkSelectionOnDeletion(el) {\n    el.selectionStart = Math.min(Math.max(this.prefix.length, el.selectionStart), this._inputValue.length - this.suffix.length);\n    el.selectionEnd = Math.min(Math.max(this.prefix.length, el.selectionEnd), this._inputValue.length - this.suffix.length);\n  }\n  /** It disables the input element */\n\n\n  setDisabledState(isDisabled) {\n    this._maskService.formElementProperty = ['disabled', isDisabled];\n  }\n\n  _repeatPatternSymbols(maskExp) {\n    return maskExp.match(/{[0-9]+}/) && maskExp.split('').reduce((accum, currVal, index) => {\n      this._start = currVal === '{' ? index : this._start;\n\n      if (currVal !== '}') {\n        return this._maskService._findSpecialChar(currVal) ? accum + currVal : accum;\n      }\n\n      this._end = index;\n      const repeatNumber = Number(maskExp.slice(this._start + 1, this._end));\n      const replaceWith = new Array(repeatNumber + 1).join(maskExp[this._start - 1]);\n      return accum + replaceWith;\n    }, '') || maskExp;\n  } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  _applyMask() {\n    this._maskService.maskExpression = this._repeatPatternSymbols(this._maskValue || '');\n    this._maskService.formElementProperty = ['value', this._maskService.applyMask(this._inputValue, this._maskService.maskExpression)];\n  }\n\n  _validateTime(value) {\n    var _a;\n\n    const rowMaskLen = this._maskValue.split('').filter(s => s !== ':').length;\n\n    if (!value) {\n      return null; // Don't validate empty values to allow for optional form control\n    }\n\n    if (+((_a = value[value.length - 1]) !== null && _a !== void 0 ? _a : -1) === 0 && value.length < rowMaskLen || value.length <= rowMaskLen - 2) {\n      return this._createValidationError(value);\n    }\n\n    return null;\n  }\n\n  _getActualInputLength() {\n    return this._maskService.actualValue.length || this._maskService.actualValue.length + this._maskService.prefix.length;\n  }\n\n  _createValidationError(actualValue) {\n    return {\n      mask: {\n        requiredMask: this._maskValue,\n        actualValue\n      }\n    };\n  }\n\n  _setMask() {\n    if (this._maskExpressionArray.length > 0) {\n      this._maskExpressionArray.some(mask => {\n        var _a, _b, _c;\n\n        const test = ((_a = this._maskService.removeMask(this._inputValue)) === null || _a === void 0 ? void 0 : _a.length) <= ((_b = this._maskService.removeMask(mask)) === null || _b === void 0 ? void 0 : _b.length);\n\n        if (this._inputValue && test) {\n          this._maskValue = mask;\n          this.maskExpression = mask;\n          this._maskService.maskExpression = mask;\n          return test;\n        } else {\n          const expression = (_c = this._maskExpressionArray[this._maskExpressionArray.length - 1]) !== null && _c !== void 0 ? _c : '';\n          this._maskValue = this.maskExpression = this._maskService.maskExpression = expression;\n        }\n      });\n    }\n  }\n\n}\n\nMaskDirective.ɵfac = function MaskDirective_Factory(t) {\n  return new (t || MaskDirective)(i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(MaskService), i0.ɵɵdirectiveInject(config));\n};\n\nMaskDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MaskDirective,\n  selectors: [[\"input\", \"mask\", \"\"], [\"textarea\", \"mask\", \"\"]],\n  hostBindings: function MaskDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"paste\", function MaskDirective_paste_HostBindingHandler() {\n        return ctx.onPaste();\n      })(\"ngModelChange\", function MaskDirective_ngModelChange_HostBindingHandler($event) {\n        return ctx.onModelChange($event);\n      })(\"input\", function MaskDirective_input_HostBindingHandler($event) {\n        return ctx.onInput($event);\n      })(\"blur\", function MaskDirective_blur_HostBindingHandler() {\n        return ctx.onBlur();\n      })(\"click\", function MaskDirective_click_HostBindingHandler($event) {\n        return ctx.onClick($event);\n      })(\"keydown\", function MaskDirective_keydown_HostBindingHandler($event) {\n        return ctx.onKeyDown($event);\n      });\n    }\n  },\n  inputs: {\n    maskExpression: [\"mask\", \"maskExpression\"],\n    specialCharacters: \"specialCharacters\",\n    patterns: \"patterns\",\n    prefix: \"prefix\",\n    suffix: \"suffix\",\n    thousandSeparator: \"thousandSeparator\",\n    decimalMarker: \"decimalMarker\",\n    dropSpecialCharacters: \"dropSpecialCharacters\",\n    hiddenInput: \"hiddenInput\",\n    showMaskTyped: \"showMaskTyped\",\n    placeHolderCharacter: \"placeHolderCharacter\",\n    shownMaskExpression: \"shownMaskExpression\",\n    showTemplate: \"showTemplate\",\n    clearIfNotMatch: \"clearIfNotMatch\",\n    validation: \"validation\",\n    separatorLimit: \"separatorLimit\",\n    allowNegativeNumbers: \"allowNegativeNumbers\",\n    leadZeroDateTime: \"leadZeroDateTime\",\n    triggerOnMaskChange: \"triggerOnMaskChange\"\n  },\n  outputs: {\n    maskFilled: \"maskFilled\"\n  },\n  exportAs: [\"mask\", \"ngxMask\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MaskDirective),\n    multi: true\n  }, {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MaskDirective),\n    multi: true\n  }, MaskService]), i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MaskDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'input[mask], textarea[mask]',\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => MaskDirective),\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(() => MaskDirective),\n        multi: true\n      }, MaskService],\n      exportAs: 'mask,ngxMask'\n    }]\n  }], function () {\n    return [{\n      type: Document,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: MaskService\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [config]\n      }]\n    }];\n  }, {\n    maskExpression: [{\n      type: Input,\n      args: ['mask']\n    }],\n    specialCharacters: [{\n      type: Input\n    }],\n    patterns: [{\n      type: Input\n    }],\n    prefix: [{\n      type: Input\n    }],\n    suffix: [{\n      type: Input\n    }],\n    thousandSeparator: [{\n      type: Input\n    }],\n    decimalMarker: [{\n      type: Input\n    }],\n    dropSpecialCharacters: [{\n      type: Input\n    }],\n    hiddenInput: [{\n      type: Input\n    }],\n    showMaskTyped: [{\n      type: Input\n    }],\n    placeHolderCharacter: [{\n      type: Input\n    }],\n    shownMaskExpression: [{\n      type: Input\n    }],\n    showTemplate: [{\n      type: Input\n    }],\n    clearIfNotMatch: [{\n      type: Input\n    }],\n    validation: [{\n      type: Input\n    }],\n    separatorLimit: [{\n      type: Input\n    }],\n    allowNegativeNumbers: [{\n      type: Input\n    }],\n    leadZeroDateTime: [{\n      type: Input\n    }],\n    triggerOnMaskChange: [{\n      type: Input\n    }],\n    maskFilled: [{\n      type: Output\n    }],\n    onPaste: [{\n      type: HostListener,\n      args: ['paste']\n    }],\n    onModelChange: [{\n      type: HostListener,\n      args: ['ngModelChange', ['$event']]\n    }],\n    onInput: [{\n      type: HostListener,\n      args: ['input', ['$event']]\n    }],\n    onBlur: [{\n      type: HostListener,\n      args: ['blur']\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }],\n    onKeyDown: [{\n      type: HostListener,\n      args: ['keydown', ['$event']]\n    }]\n  });\n})();\n\nclass MaskPipe {\n  constructor(_maskService) {\n    this._maskService = _maskService;\n  }\n\n  transform(value, mask, thousandSeparator = null) {\n    if (!value && typeof value !== 'number') {\n      return '';\n    }\n\n    if (thousandSeparator) {\n      this._maskService.thousandSeparator = thousandSeparator;\n    }\n\n    if (typeof mask === 'string') {\n      return this._maskService.applyMask(`${value}`, mask);\n    }\n\n    return this._maskService.applyMaskWithPattern(`${value}`, mask);\n  }\n\n}\n\nMaskPipe.ɵfac = function MaskPipe_Factory(t) {\n  return new (t || MaskPipe)(i0.ɵɵdirectiveInject(MaskApplierService, 16));\n};\n\nMaskPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"mask\",\n  type: MaskPipe,\n  pure: true\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MaskPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'mask',\n      pure: true\n    }]\n  }], function () {\n    return [{\n      type: MaskApplierService\n    }];\n  }, null);\n})();\n/**\n * @internal\n */\n\n\nfunction _configFactory(initConfig, configValue) {\n  return configValue instanceof Function ? Object.assign(Object.assign({}, initConfig), configValue()) : Object.assign(Object.assign({}, initConfig), configValue);\n}\n\nclass NgxMaskModule {\n  static forRoot(configValue) {\n    return {\n      ngModule: NgxMaskModule,\n      providers: [{\n        provide: NEW_CONFIG,\n        useValue: configValue\n      }, {\n        provide: INITIAL_CONFIG,\n        useValue: initialConfig\n      }, {\n        provide: config,\n        useFactory: _configFactory,\n        deps: [INITIAL_CONFIG, NEW_CONFIG]\n      }, MaskApplierService]\n    };\n  }\n\n  static forChild() {\n    return {\n      ngModule: NgxMaskModule\n    };\n  }\n\n}\n\nNgxMaskModule.ɵfac = function NgxMaskModule_Factory(t) {\n  return new (t || NgxMaskModule)();\n};\n\nNgxMaskModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxMaskModule\n});\nNgxMaskModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMaskModule, [{\n    type: NgModule,\n    args: [{\n      exports: [MaskDirective, MaskPipe],\n      declarations: [MaskDirective, MaskPipe]\n    }]\n  }], null, null);\n})();\n\nconst commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n(function () {\n  if (!commonjsGlobal.KeyboardEvent) {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    commonjsGlobal.KeyboardEvent = function (_eventType, _init) {};\n  }\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { INITIAL_CONFIG, MaskApplierService, MaskDirective, MaskPipe, MaskService, NEW_CONFIG, NgxMaskModule, _configFactory, config, initialConfig, timeMasks, withoutValidation };","map":{"version":3,"names":["i0","InjectionToken","EventEmitter","Injectable","Inject","forwardRef","Directive","Input","Output","HostListener","Pipe","NgModule","__awaiter","NG_VALUE_ACCESSOR","NG_VALIDATORS","DOCUMENT","config","NEW_CONFIG","INITIAL_CONFIG","initialConfig","suffix","prefix","thousandSeparator","decimalMarker","clearIfNotMatch","showTemplate","showMaskTyped","placeHolderCharacter","dropSpecialCharacters","hiddenInput","undefined","shownMaskExpression","separatorLimit","allowNegativeNumbers","validation","specialCharacters","leadZeroDateTime","triggerOnMaskChange","maskFilled","patterns","pattern","RegExp","optional","X","symbol","A","S","U","L","d","m","M","H","h","s","timeMasks","withoutValidation","MaskApplierService","constructor","_config","maskExpression","actualValue","_formatWithSeparators","str","thousandSeparatorChar","decimalChars","precision","_a","_b","_c","x","decimalChar","Array","isArray","regExp","map","v","indexOf","join","split","match","decimals","length","res","replace","slice","rgx","test","substring","percentage","Number","getPrecision","Infinity","checkAndRemoveSuffix","inputValue","_d","i","substr","includes","checkInputPrecision","marker","find","dm","precisionRegEx","_charToRegExpExpression","precisionMatch","precisionMatchLength","diff","_compareOrIncludes","_shift","Set","maskSpecialCharacters","maskAvailablePatterns","applyMaskWithPattern","maskAndPattern","mask","customPattern","applyMask","position","justPasted","backspaced","cb","_e","_f","_g","_h","_j","_k","_l","_m","_o","_p","_q","cursor","result","multi","backspaceShift","shift","stepBack","inputArray","toString","valuesIP","ipError","_validIP","arr","push","cpfCnpjError","startsWith","_stripToDecimal","base","thousandSeparatorCharEscaped","invalidChars","invalidCharRegexp","strForSep","commaShift","shiftStep","add","clear","inputSymbol","_checkSymbolMask","_shiftStep","daysCount","monthsCount","withoutDays","day1monthInput","day2monthInput","day1monthPaste","day2monthPaste","_findSpecialChar","newPosition","has","actualShift","onlySpecial","every","char","val","maskSymbol","filter","idx","isDecimalMarker","charsToEscape","inputLength","value","comparedValue","excludedValue","some","index","ɵfac","ɵprov","type","decorators","args","MaskService","document","_elementRef","_renderer","isNumberValue","maskIsShown","selStart","selEnd","writingValue","maskChanged","onChange","_","showMaskInInput","formControlResult","getSymbol","newInputValue","actualResult","splice","removeMask","shiftTypedSymbols","Boolean","getActualValue","item","hideInput","resLen","prefNmask","countSkipedSymbol","_numberSkipedSymbols","regex","exec","applyValueChanges","formElement","nativeElement","_getActiveElement","clearIfNotMatchFn","curr","compare","maskChar","symbolToReplace","currSymbol","replaceSymbol","numberToString","String","toLocaleString","useGrouping","maximumFractionDigits","inputVal","Error","_checkForIp","_checkForCpfCnpj","formElementProperty","name","Promise","resolve","then","setProperty","checkSpecialCharAmount","chars","_removeMask","_removeSuffix","_removePrefix","concat","cpf","cnpj","shadowRootEl","activeElement","shadowRoot","_toNumber","_checkSymbols","num","isNaN","specialCharactersForRemove","_regExpForRemove","_retrieveSeparatorValue","_replaceDecimalMarkerToDot","markers","separatorPrecision","_retrieveSeparatorPrecision","separatorValue","_checkPrecision","maskExpretion","matcher","separatorExpression","toFixed","ElementRef","Renderer2","Document","MaskDirective","_maskService","_maskValue","_position","_maskExpressionArray","_justPasted","onTouch","ngOnChanges","changes","currentValue","previousValue","firstChange","sort","a","b","_setMask","c","_applyMask","validate","_createValidationError","_validateTime","counterOfOpt","key","lastIndexOf","opt","emit","onPaste","onModelChange","onInput","e","el","target","_inputValue","selectionStart","caretShift","_code","_backspaceShift","positionToApply","_getActualInputLength","setSelectionRange","onBlur","onClick","posStart","posEnd","selectionEnd","keyCode","focus","nextValue","onKeyDown","code","preventDefault","checkSelectionOnDeletion","cursorStart","readOnly","ctrlKey","metaKey","writeValue","setDisabledState","disable","registerOnChange","fn","registerOnTouched","Math","min","max","isDisabled","_repeatPatternSymbols","maskExp","reduce","accum","currVal","_start","_end","repeatNumber","replaceWith","rowMaskLen","requiredMask","expression","ɵdir","provide","useExisting","selector","providers","exportAs","MaskPipe","transform","ɵpipe","pure","_configFactory","initConfig","configValue","Function","Object","assign","NgxMaskModule","forRoot","ngModule","useValue","useFactory","deps","forChild","ɵmod","ɵinj","exports","declarations","commonjsGlobal","globalThis","window","global","self","KeyboardEvent","_eventType","_init"],"sources":["C:/Users/Gennadii/Desktop/angular-test-intern/RegisterTestApp.UI/ClientApp/node_modules/ngx-mask/fesm2015/ngx-mask.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, Injectable, Inject, forwardRef, Directive, Input, Output, HostListener, Pipe, NgModule } from '@angular/core';\nimport { __awaiter } from 'tslib';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nimport { DOCUMENT } from '@angular/common';\n\nconst config = new InjectionToken('ngx-mask config');\nconst NEW_CONFIG = new InjectionToken('new ngx-mask config');\nconst INITIAL_CONFIG = new InjectionToken('initial ngx-mask config');\nconst initialConfig = {\n    suffix: '',\n    prefix: '',\n    thousandSeparator: ' ',\n    decimalMarker: ['.', ','],\n    clearIfNotMatch: false,\n    showTemplate: false,\n    showMaskTyped: false,\n    placeHolderCharacter: '_',\n    dropSpecialCharacters: true,\n    hiddenInput: undefined,\n    shownMaskExpression: '',\n    separatorLimit: '',\n    allowNegativeNumbers: false,\n    validation: true,\n    // eslint-disable-next-line @typescript-eslint/quotes\n    specialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '\"', \"'\"],\n    leadZeroDateTime: false,\n    triggerOnMaskChange: false,\n    maskFilled: new EventEmitter(),\n    patterns: {\n        '0': {\n            pattern: new RegExp('\\\\d'),\n        },\n        '9': {\n            pattern: new RegExp('\\\\d'),\n            optional: true,\n        },\n        X: {\n            pattern: new RegExp('\\\\d'),\n            symbol: '*',\n        },\n        A: {\n            pattern: new RegExp('[a-zA-Z0-9]'),\n        },\n        S: {\n            pattern: new RegExp('[a-zA-Z]'),\n        },\n        U: {\n            pattern: new RegExp('[A-Z]'),\n        },\n        L: {\n            pattern: new RegExp('[a-z]'),\n        },\n        d: {\n            pattern: new RegExp('\\\\d'),\n        },\n        m: {\n            pattern: new RegExp('\\\\d'),\n        },\n        M: {\n            pattern: new RegExp('\\\\d'),\n        },\n        H: {\n            pattern: new RegExp('\\\\d'),\n        },\n        h: {\n            pattern: new RegExp('\\\\d'),\n        },\n        s: {\n            pattern: new RegExp('\\\\d'),\n        },\n    },\n};\nconst timeMasks = ['Hh:m0:s0', 'Hh:m0', 'm0:s0'];\nconst withoutValidation = [\n    'percent',\n    'Hh',\n    's0',\n    'm0',\n    'separator',\n    'd0/M0/0000',\n    'd0/M0',\n    'd0',\n    'M0',\n];\n\nclass MaskApplierService {\n    constructor(_config) {\n        this._config = _config;\n        this.maskExpression = '';\n        this.actualValue = '';\n        this.shownMaskExpression = '';\n        this._formatWithSeparators = (str, thousandSeparatorChar, decimalChars, precision) => {\n            var _a, _b, _c;\n            let x = [];\n            let decimalChar = '';\n            if (Array.isArray(decimalChars)) {\n                const regExp = new RegExp(decimalChars.map((v) => ('[\\\\^$.|?*+()'.indexOf(v) >= 0 ? `\\\\${v}` : v)).join('|'));\n                x = str.split(regExp);\n                decimalChar = (_b = (_a = str.match(regExp)) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : '';\n            }\n            else {\n                x = str.split(decimalChars);\n                decimalChar = decimalChars;\n            }\n            const decimals = x.length > 1 ? `${decimalChar}${x[1]}` : '';\n            let res = (_c = x[0]) !== null && _c !== void 0 ? _c : '';\n            const separatorLimit = this.separatorLimit.replace(/\\s/g, '');\n            if (separatorLimit && +separatorLimit) {\n                if (res[0] === '-') {\n                    res = `-${res.slice(1, res.length).slice(0, separatorLimit.length)}`;\n                }\n                else {\n                    res = res.slice(0, separatorLimit.length);\n                }\n            }\n            const rgx = /(\\d+)(\\d{3})/;\n            while (thousandSeparatorChar && rgx.test(res)) {\n                res = res.replace(rgx, '$1' + thousandSeparatorChar + '$2');\n            }\n            if (precision === undefined) {\n                return res + decimals;\n            }\n            else if (precision === 0) {\n                return res;\n            }\n            return res + decimals.substring(0, precision + 1);\n        };\n        this.percentage = (str) => {\n            return Number(str) >= 0 && Number(str) <= 100;\n        };\n        this.getPrecision = (maskExpression) => {\n            const x = maskExpression.split('.');\n            if (x.length > 1) {\n                return Number(x[x.length - 1]);\n            }\n            return Infinity;\n        };\n        this.checkAndRemoveSuffix = (inputValue) => {\n            var _a, _b, _c, _d;\n            for (let i = ((_a = this.suffix) === null || _a === void 0 ? void 0 : _a.length) - 1; i >= 0; i--) {\n                const substr = this.suffix.substring(i, (_b = this.suffix) === null || _b === void 0 ? void 0 : _b.length);\n                if (inputValue.includes(substr) &&\n                    i !== ((_c = this.suffix) === null || _c === void 0 ? void 0 : _c.length) - 1 &&\n                    (i - 1 < 0 ||\n                        !inputValue.includes(this.suffix.substring(i - 1, (_d = this.suffix) === null || _d === void 0 ? void 0 : _d.length)))) {\n                    return inputValue.replace(substr, '');\n                }\n            }\n            return inputValue;\n        };\n        this.checkInputPrecision = (inputValue, precision, decimalMarker) => {\n            var _a, _b, _c;\n            if (precision < Infinity) {\n                // TODO need think about decimalMarker\n                if (Array.isArray(decimalMarker)) {\n                    const marker = decimalMarker.find((dm) => dm !== this.thousandSeparator);\n                    // eslint-disable-next-line no-param-reassign\n                    decimalMarker = marker ? marker : decimalMarker[0];\n                }\n                const precisionRegEx = new RegExp(this._charToRegExpExpression(decimalMarker) + `\\\\d{${precision}}.*$`);\n                const precisionMatch = (_a = inputValue.match(precisionRegEx)) !== null && _a !== void 0 ? _a : [];\n                const precisionMatchLength = (_c = (_b = precisionMatch[0]) === null || _b === void 0 ? void 0 : _b.length) !== null && _c !== void 0 ? _c : 0;\n                if (precisionMatchLength - 1 > precision) {\n                    const diff = precisionMatchLength - 1 - precision;\n                    // eslint-disable-next-line no-param-reassign\n                    inputValue = inputValue.substring(0, inputValue.length - diff);\n                }\n                if (precision === 0 &&\n                    this._compareOrIncludes(inputValue[inputValue.length - 1], decimalMarker, this.thousandSeparator)) {\n                    // eslint-disable-next-line no-param-reassign\n                    inputValue = inputValue.substring(0, inputValue.length - 1);\n                }\n            }\n            return inputValue;\n        };\n        this._shift = new Set();\n        this.clearIfNotMatch = this._config.clearIfNotMatch;\n        this.dropSpecialCharacters = this._config.dropSpecialCharacters;\n        this.maskSpecialCharacters = this._config.specialCharacters;\n        this.maskAvailablePatterns = this._config.patterns;\n        this.prefix = this._config.prefix;\n        this.suffix = this._config.suffix;\n        this.thousandSeparator = this._config.thousandSeparator;\n        this.decimalMarker = this._config.decimalMarker;\n        this.hiddenInput = this._config.hiddenInput;\n        this.showMaskTyped = this._config.showMaskTyped;\n        this.placeHolderCharacter = this._config.placeHolderCharacter;\n        this.validation = this._config.validation;\n        this.separatorLimit = this._config.separatorLimit;\n        this.allowNegativeNumbers = this._config.allowNegativeNumbers;\n        this.leadZeroDateTime = this._config.leadZeroDateTime;\n    }\n    applyMaskWithPattern(inputValue, maskAndPattern) {\n        const [mask, customPattern] = maskAndPattern;\n        this.customPattern = customPattern;\n        return this.applyMask(inputValue, mask);\n    }\n    applyMask(inputValue, maskExpression, position = 0, justPasted = false, backspaced = false, \n    // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n    cb = () => { }) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;\n        if (!maskExpression || typeof inputValue !== 'string') {\n            return '';\n        }\n        let cursor = 0;\n        let result = '';\n        let multi = false;\n        let backspaceShift = false;\n        let shift = 1;\n        let stepBack = false;\n        if (inputValue.slice(0, this.prefix.length) === this.prefix) {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = inputValue.slice(this.prefix.length, inputValue.length);\n        }\n        if (!!this.suffix && (inputValue === null || inputValue === void 0 ? void 0 : inputValue.length) > 0) {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = this.checkAndRemoveSuffix(inputValue);\n        }\n        const inputArray = inputValue.toString().split('');\n        if (maskExpression === 'IP') {\n            const valuesIP = inputValue.split('.');\n            this.ipError = this._validIP(valuesIP);\n            // eslint-disable-next-line no-param-reassign\n            maskExpression = '099.099.099.099';\n        }\n        const arr = [];\n        for (let i = 0; i < inputValue.length; i++) {\n            if ((_a = inputValue[i]) === null || _a === void 0 ? void 0 : _a.match('\\\\d')) {\n                arr.push((_b = inputValue[i]) !== null && _b !== void 0 ? _b : '');\n            }\n        }\n        if (maskExpression === 'CPF_CNPJ') {\n            this.cpfCnpjError = arr.length !== 11 && arr.length !== 14;\n            if (arr.length > 11) {\n                // eslint-disable-next-line no-param-reassign\n                maskExpression = '00.000.000/0000-00';\n            }\n            else {\n                // eslint-disable-next-line no-param-reassign\n                maskExpression = '000.000.000-00';\n            }\n        }\n        if (maskExpression.startsWith('percent')) {\n            if (inputValue.match('[a-z]|[A-Z]') ||\n                // eslint-disable-next-line no-useless-escape\n                inputValue.match(/[-!$%^&*()_+|~=`{}\\[\\]:\";'<>?,\\/.]/)) {\n                // eslint-disable-next-line no-param-reassign\n                inputValue = this._stripToDecimal(inputValue);\n                const precision = this.getPrecision(maskExpression);\n                // eslint-disable-next-line no-param-reassign\n                inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n            }\n            if (inputValue.indexOf('.') > 0 &&\n                !this.percentage(inputValue.substring(0, inputValue.indexOf('.')))) {\n                const base = inputValue.substring(0, inputValue.indexOf('.') - 1);\n                // eslint-disable-next-line no-param-reassign\n                inputValue = `${base}${inputValue.substring(inputValue.indexOf('.'), inputValue.length)}`;\n            }\n            if (this.percentage(inputValue)) {\n                result = inputValue;\n            }\n            else {\n                result = inputValue.substring(0, inputValue.length - 1);\n            }\n        }\n        else if (maskExpression.startsWith('separator')) {\n            if (inputValue.match('[wа-яА-Я]') ||\n                inputValue.match('[ЁёА-я]') ||\n                inputValue.match('[a-z]|[A-Z]') ||\n                inputValue.match(/[-@#!$%\\\\^&*()_£¬'+|~=`{}\\]:\";<>.?/]/) ||\n                inputValue.match('[^A-Za-z0-9,]')) {\n                // eslint-disable-next-line no-param-reassign\n                inputValue = this._stripToDecimal(inputValue);\n            }\n            // eslint-disable-next-line no-param-reassign\n            inputValue =\n                inputValue.length > 1 &&\n                    inputValue[0] === '0' &&\n                    inputValue[1] !== this.thousandSeparator &&\n                    !this._compareOrIncludes(inputValue[1], this.decimalMarker, this.thousandSeparator) &&\n                    !backspaced\n                    ? inputValue.slice(0, inputValue.length - 1)\n                    : inputValue;\n            if (backspaced) {\n                // eslint-disable-next-line no-param-reassign\n                inputValue = this._compareOrIncludes(inputValue[inputValue.length - 1], this.decimalMarker, this.thousandSeparator)\n                    ? inputValue.slice(0, inputValue.length - 1)\n                    : inputValue;\n            }\n            // TODO: we had different rexexps here for the different cases... but tests dont seam to bother - check this\n            //  separator: no COMMA, dot-sep: no SPACE, COMMA OK, comma-sep: no SPACE, COMMA OK\n            const thousandSeparatorCharEscaped = this._charToRegExpExpression(this.thousandSeparator);\n            let invalidChars = '@#!$%^&*()_+|~=`{}\\\\[\\\\]:\\\\s,\\\\.\";<>?\\\\/'.replace(thousandSeparatorCharEscaped, '');\n            //.replace(decimalMarkerEscaped, '');\n            if (Array.isArray(this.decimalMarker)) {\n                for (const marker of this.decimalMarker) {\n                    invalidChars = invalidChars.replace(this._charToRegExpExpression(marker), '');\n                }\n            }\n            else {\n                invalidChars = invalidChars.replace(this._charToRegExpExpression(this.decimalMarker), '');\n            }\n            const invalidCharRegexp = new RegExp('[' + invalidChars + ']');\n            if (inputValue.match(invalidCharRegexp) ||\n                (inputValue.length === 1 &&\n                    this._compareOrIncludes(inputValue, this.decimalMarker, this.thousandSeparator))) {\n                // eslint-disable-next-line no-param-reassign\n                inputValue = inputValue.substring(0, inputValue.length - 1);\n            }\n            const precision = this.getPrecision(maskExpression);\n            // eslint-disable-next-line no-param-reassign\n            inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n            const strForSep = inputValue.replace(new RegExp(thousandSeparatorCharEscaped, 'g'), '');\n            result = this._formatWithSeparators(strForSep, this.thousandSeparator, this.decimalMarker, precision);\n            const commaShift = result.indexOf(',') - inputValue.indexOf(',');\n            const shiftStep = result.length - inputValue.length;\n            if (shiftStep > 0 && result[position] !== ',') {\n                backspaceShift = true;\n                let _shift = 0;\n                do {\n                    this._shift.add(position + _shift);\n                    _shift++;\n                } while (_shift < shiftStep);\n            }\n            else if ((commaShift !== 0 &&\n                position > 0 &&\n                !(result.indexOf(',') >= position && position > 3)) ||\n                (!(result.indexOf('.') >= position && position > 3) && shiftStep <= 0)) {\n                this._shift.clear();\n                backspaceShift = true;\n                shift = shiftStep;\n                // eslint-disable-next-line no-param-reassign\n                position += shiftStep;\n                this._shift.add(position);\n            }\n            else {\n                this._shift.clear();\n            }\n        }\n        else {\n            for (\n            // eslint-disable-next-line\n            let i = 0, inputSymbol = inputArray[0]; i < inputArray.length; i++, inputSymbol = (_c = inputArray[i]) !== null && _c !== void 0 ? _c : '') {\n                if (cursor === maskExpression.length) {\n                    break;\n                }\n                if (this._checkSymbolMask(inputSymbol, (_d = maskExpression[cursor]) !== null && _d !== void 0 ? _d : '') &&\n                    maskExpression[cursor + 1] === '?') {\n                    result += inputSymbol;\n                    cursor += 2;\n                }\n                else if (maskExpression[cursor + 1] === '*' &&\n                    multi &&\n                    this._checkSymbolMask(inputSymbol, (_e = maskExpression[cursor + 2]) !== null && _e !== void 0 ? _e : '')) {\n                    result += inputSymbol;\n                    cursor += 3;\n                    multi = false;\n                }\n                else if (this._checkSymbolMask(inputSymbol, (_f = maskExpression[cursor]) !== null && _f !== void 0 ? _f : '') &&\n                    maskExpression[cursor + 1] === '*') {\n                    result += inputSymbol;\n                    multi = true;\n                }\n                else if (maskExpression[cursor + 1] === '?' &&\n                    this._checkSymbolMask(inputSymbol, (_g = maskExpression[cursor + 2]) !== null && _g !== void 0 ? _g : '')) {\n                    result += inputSymbol;\n                    cursor += 3;\n                }\n                else if (this._checkSymbolMask(inputSymbol, (_h = maskExpression[cursor]) !== null && _h !== void 0 ? _h : '')) {\n                    if (maskExpression[cursor] === 'H') {\n                        if (Number(inputSymbol) > 2) {\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'h') {\n                        if (result === '2' && Number(inputSymbol) > 3) {\n                            cursor += 1;\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'm') {\n                        if (Number(inputSymbol) > 5) {\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 's') {\n                        if (Number(inputSymbol) > 5) {\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    const daysCount = 31;\n                    if (maskExpression[cursor] === 'd') {\n                        if ((Number(inputSymbol) > 3 && this.leadZeroDateTime) ||\n                            Number(inputValue.slice(cursor, cursor + 2)) > daysCount ||\n                            inputValue[cursor + 1] === '/') {\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'M') {\n                        const monthsCount = 12;\n                        // mask without day\n                        const withoutDays = cursor === 0 &&\n                            (Number(inputSymbol) > 2 ||\n                                Number(inputValue.slice(cursor, cursor + 2)) > monthsCount ||\n                                inputValue[cursor + 1] === '/');\n                        // day<10 && month<12 for input\n                        const day1monthInput = inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n                            ((inputValue[cursor - 2] === '/' &&\n                                Number(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount &&\n                                inputValue[cursor] !== '/') ||\n                                inputValue[cursor] === '/' ||\n                                (inputValue[cursor - 3] === '/' &&\n                                    Number(inputValue.slice(cursor - 2, cursor)) > monthsCount &&\n                                    inputValue[cursor - 1] !== '/') ||\n                                inputValue[cursor - 1] === '/');\n                        // 10<day<31 && month<12 for input\n                        const day2monthInput = Number(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount &&\n                            !inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n                            inputValue[cursor - 1] === '/' &&\n                            (Number(inputValue.slice(cursor, cursor + 2)) > monthsCount ||\n                                inputValue[cursor + 1] === '/');\n                        // day<10 && month<12 for paste whole data\n                        const day1monthPaste = Number(inputValue.slice(cursor - 3, cursor - 1)) > daysCount &&\n                            !inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n                            !inputValue.slice(cursor - 2, cursor).includes('/') &&\n                            Number(inputValue.slice(cursor - 2, cursor)) > monthsCount;\n                        // 10<day<31 && month<12 for paste whole data\n                        const day2monthPaste = Number(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount &&\n                            !inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n                            inputValue[cursor - 1] !== '/' &&\n                            Number(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount;\n                        if ((Number(inputSymbol) > 1 && this.leadZeroDateTime) ||\n                            withoutDays ||\n                            day1monthInput ||\n                            day2monthInput ||\n                            day1monthPaste ||\n                            day2monthPaste) {\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    result += inputSymbol;\n                    cursor++;\n                }\n                else if (inputSymbol === ' ' && maskExpression[cursor] === ' ') {\n                    result += inputSymbol;\n                    cursor++;\n                }\n                else if (this.maskSpecialCharacters.indexOf((_j = maskExpression[cursor]) !== null && _j !== void 0 ? _j : '') !== -1) {\n                    result += maskExpression[cursor];\n                    cursor++;\n                    this._shiftStep(maskExpression, cursor, inputArray.length);\n                    i--;\n                }\n                else if (this.maskSpecialCharacters.indexOf(inputSymbol) > -1 &&\n                    this.maskAvailablePatterns[(_k = maskExpression[cursor]) !== null && _k !== void 0 ? _k : ''] &&\n                    ((_m = this.maskAvailablePatterns[(_l = maskExpression[cursor]) !== null && _l !== void 0 ? _l : '']) === null || _m === void 0 ? void 0 : _m.optional)) {\n                    if (!!inputArray[cursor] &&\n                        maskExpression !== '099.099.099.099' &&\n                        maskExpression !== '000.000.000-00' &&\n                        maskExpression !== '00.000.000/0000-00' &&\n                        !maskExpression.match(/^9+\\.0+$/)) {\n                        result += inputArray[cursor];\n                    }\n                    cursor++;\n                    i--;\n                }\n                else if (this.maskExpression[cursor + 1] === '*' &&\n                    this._findSpecialChar((_o = this.maskExpression[cursor + 2]) !== null && _o !== void 0 ? _o : '') &&\n                    this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\n                    multi) {\n                    cursor += 3;\n                    result += inputSymbol;\n                }\n                else if (this.maskExpression[cursor + 1] === '?' &&\n                    this._findSpecialChar((_p = this.maskExpression[cursor + 2]) !== null && _p !== void 0 ? _p : '') &&\n                    this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\n                    multi) {\n                    cursor += 3;\n                    result += inputSymbol;\n                }\n                else if (this.showMaskTyped &&\n                    this.maskSpecialCharacters.indexOf(inputSymbol) < 0 &&\n                    inputSymbol !== this.placeHolderCharacter) {\n                    stepBack = true;\n                }\n            }\n        }\n        if (result.length + 1 === maskExpression.length &&\n            this.maskSpecialCharacters.indexOf((_q = maskExpression[maskExpression.length - 1]) !== null && _q !== void 0 ? _q : '') !==\n                -1) {\n            result += maskExpression[maskExpression.length - 1];\n        }\n        let newPosition = position + 1;\n        while (this._shift.has(newPosition)) {\n            shift++;\n            newPosition++;\n        }\n        let actualShift = justPasted && !maskExpression.startsWith('separator')\n            ? cursor\n            : this._shift.has(position)\n                ? shift\n                : 0;\n        if (stepBack) {\n            actualShift--;\n        }\n        cb(actualShift, backspaceShift);\n        if (shift < 0) {\n            this._shift.clear();\n        }\n        let onlySpecial = false;\n        if (backspaced) {\n            onlySpecial = inputArray.every((char) => this.maskSpecialCharacters.includes(char));\n        }\n        let res = `${this.prefix}${onlySpecial ? '' : result}${this.suffix}`;\n        if (result.length === 0) {\n            res = `${this.prefix}${result}`;\n        }\n        return res;\n    }\n    _findSpecialChar(inputSymbol) {\n        return this.maskSpecialCharacters.find((val) => val === inputSymbol);\n    }\n    _checkSymbolMask(inputSymbol, maskSymbol) {\n        var _a, _b, _c;\n        this.maskAvailablePatterns = this.customPattern\n            ? this.customPattern\n            : this.maskAvailablePatterns;\n        return ((_c = (((_a = this.maskAvailablePatterns[maskSymbol]) === null || _a === void 0 ? void 0 : _a.pattern) &&\n            ((_b = this.maskAvailablePatterns[maskSymbol]) === null || _b === void 0 ? void 0 : _b.pattern.test(inputSymbol)))) !== null && _c !== void 0 ? _c : false);\n    }\n    _stripToDecimal(str) {\n        return str\n            .split('')\n            .filter((i, idx) => {\n            const isDecimalMarker = typeof this.decimalMarker === 'string'\n                ? i === this.decimalMarker\n                : // TODO (inepipenko) use utility type\n                    this.decimalMarker.includes(i);\n            return (i.match('^-?\\\\d') ||\n                i === this.thousandSeparator ||\n                isDecimalMarker ||\n                (i === '-' && idx === 0 && this.allowNegativeNumbers));\n        })\n            .join('');\n    }\n    _charToRegExpExpression(char) {\n        // if (Array.isArray(char)) {\n        // \treturn char.map((v) => ('[\\\\^$.|?*+()'.indexOf(v) >= 0 ? `\\\\${v}` : v)).join('|');\n        // }\n        if (char) {\n            const charsToEscape = '[\\\\^$.|?*+()';\n            return char === ' ' ? '\\\\s' : charsToEscape.indexOf(char) >= 0 ? `\\\\${char}` : char;\n        }\n        return char;\n    }\n    _shiftStep(maskExpression, cursor, inputLength) {\n        const shiftStep = /[*?]/g.test(maskExpression.slice(0, cursor))\n            ? inputLength\n            : cursor;\n        this._shift.add(shiftStep + this.prefix.length || 0);\n    }\n    _compareOrIncludes(value, comparedValue, excludedValue) {\n        return Array.isArray(comparedValue)\n            ? comparedValue.filter((v) => v !== excludedValue).includes(value)\n            : value === comparedValue;\n    }\n    _validIP(valuesIP) {\n        return !(valuesIP.length === 4 &&\n            !valuesIP.some((value, index) => {\n                if (valuesIP.length !== index + 1) {\n                    return value === '' || Number(value) > 255;\n                }\n                return value === '' || Number(value.substring(0, 3)) > 255;\n            }));\n    }\n}\nMaskApplierService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: MaskApplierService, deps: [{ token: config }], target: i0.ɵɵFactoryTarget.Injectable });\nMaskApplierService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: MaskApplierService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: MaskApplierService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [config]\n                    }] }];\n    } });\n\nclass MaskService extends MaskApplierService {\n    constructor(document, _config, _elementRef, _renderer) {\n        super(_config);\n        this.document = document;\n        this._config = _config;\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this.maskExpression = '';\n        this.isNumberValue = false;\n        this.placeHolderCharacter = '_';\n        this.maskIsShown = '';\n        this.selStart = null;\n        this.selEnd = null;\n        /**\n         * Whether we are currently in writeValue function, in this case when applying the mask we don't want to trigger onChange function,\n         * since writeValue should be a one way only process of writing the DOM value based on the Angular model value.\n         */\n        this.writingValue = false;\n        this.maskChanged = false;\n        this.triggerOnMaskChange = false;\n        // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n        this.onChange = (_) => { };\n    }\n    // eslint-disable-next-line complexity\n    applyMask(inputValue, maskExpression, position = 0, justPasted = false, backspaced = false, \n    // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n    cb = () => { }) {\n        var _a;\n        if (!maskExpression) {\n            return inputValue !== this.actualValue ? this.actualValue : inputValue;\n        }\n        this.maskIsShown = this.showMaskTyped ? this.showMaskInInput() : '';\n        if (this.maskExpression === 'IP' && this.showMaskTyped) {\n            this.maskIsShown = this.showMaskInInput(inputValue || '#');\n        }\n        if (this.maskExpression === 'CPF_CNPJ' && this.showMaskTyped) {\n            this.maskIsShown = this.showMaskInInput(inputValue || '#');\n        }\n        if (!inputValue && this.showMaskTyped) {\n            this.formControlResult(this.prefix);\n            return this.prefix + this.maskIsShown;\n        }\n        const getSymbol = !!inputValue && typeof this.selStart === 'number'\n            ? (_a = inputValue[this.selStart]) !== null && _a !== void 0 ? _a : ''\n            : '';\n        let newInputValue = '';\n        if (this.hiddenInput !== undefined && !this.writingValue) {\n            let actualResult = this.actualValue.split('');\n            // eslint-disable  @typescript-eslint/no-unused-expressions\n            // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n            inputValue !== '' && actualResult.length\n                ? typeof this.selStart === 'number' && typeof this.selEnd === 'number'\n                    ? inputValue.length > actualResult.length\n                        ? actualResult.splice(this.selStart, 0, getSymbol)\n                        : inputValue.length < actualResult.length\n                            ? actualResult.length - inputValue.length === 1\n                                ? actualResult.splice(this.selStart - 1, 1)\n                                : actualResult.splice(this.selStart, this.selEnd - this.selStart)\n                            : null\n                    : null\n                : (actualResult = []);\n            if (this.showMaskTyped) {\n                // eslint-disable-next-line no-param-reassign\n                inputValue = this.removeMask(inputValue);\n            }\n            // eslint-enable  @typescript-eslint/no-unused-expressions\n            newInputValue =\n                this.actualValue.length && actualResult.length <= inputValue.length\n                    ? this.shiftTypedSymbols(actualResult.join(''))\n                    : inputValue;\n        }\n        if (this.showMaskTyped) {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = this.removeMask(inputValue);\n        }\n        newInputValue = Boolean(newInputValue) && newInputValue.length ? newInputValue : inputValue;\n        const result = super.applyMask(newInputValue, maskExpression, position, justPasted, backspaced, cb);\n        this.actualValue = this.getActualValue(result);\n        // handle some separator implications:\n        // a.) adjust decimalMarker default (. -> ,) if thousandSeparator is a dot\n        if (this.thousandSeparator === '.' && this.decimalMarker === '.') {\n            this.decimalMarker = ',';\n        }\n        // b) remove decimal marker from list of special characters to mask\n        if (this.maskExpression.startsWith('separator') && this.dropSpecialCharacters === true) {\n            this.maskSpecialCharacters = this.maskSpecialCharacters.filter((item) => !this._compareOrIncludes(item, this.decimalMarker, this.thousandSeparator) //item !== this.decimalMarker, // !\n            );\n        }\n        this.formControlResult(result);\n        if (!this.showMaskTyped) {\n            if (this.hiddenInput) {\n                return result && result.length\n                    ? this.hideInput(result, this.maskExpression)\n                    : result;\n            }\n            return result;\n        }\n        const resLen = result.length;\n        const prefNmask = this.prefix + this.maskIsShown;\n        if (this.maskExpression.includes('H')) {\n            const countSkipedSymbol = this._numberSkipedSymbols(result);\n            return result + prefNmask.slice(resLen + countSkipedSymbol);\n        }\n        else if (this.maskExpression === 'IP' || this.maskExpression === 'CPF_CNPJ') {\n            return result + prefNmask;\n        }\n        return result + prefNmask.slice(resLen);\n    }\n    // get the number of characters that were shifted\n    _numberSkipedSymbols(value) {\n        const regex = /(^|\\D)(\\d\\D)/g;\n        let match = regex.exec(value);\n        let countSkipedSymbol = 0;\n        while (match != null) {\n            countSkipedSymbol += 1;\n            match = regex.exec(value);\n        }\n        return countSkipedSymbol;\n    }\n    applyValueChanges(position, justPasted, backspaced, \n    // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n    cb = () => { }) {\n        const formElement = this._elementRef.nativeElement;\n        formElement.value = this.applyMask(formElement.value, this.maskExpression, position, justPasted, backspaced, cb);\n        if (formElement === this._getActiveElement()) {\n            return;\n        }\n        this.clearIfNotMatchFn();\n    }\n    hideInput(inputValue, maskExpression) {\n        return inputValue\n            .split('')\n            .map((curr, index) => {\n            var _a, _b, _c, _d, _e;\n            if (this.maskAvailablePatterns &&\n                this.maskAvailablePatterns[(_a = maskExpression[index]) !== null && _a !== void 0 ? _a : ''] &&\n                ((_c = this.maskAvailablePatterns[(_b = maskExpression[index]) !== null && _b !== void 0 ? _b : '']) === null || _c === void 0 ? void 0 : _c.symbol)) {\n                return (_e = this.maskAvailablePatterns[(_d = maskExpression[index]) !== null && _d !== void 0 ? _d : '']) === null || _e === void 0 ? void 0 : _e.symbol;\n            }\n            return curr;\n        })\n            .join('');\n    }\n    // this function is not necessary, it checks result against maskExpression\n    getActualValue(res) {\n        const compare = res.split('').filter((symbol, i) => {\n            var _a;\n            const maskChar = (_a = this.maskExpression[i]) !== null && _a !== void 0 ? _a : '';\n            return (this._checkSymbolMask(symbol, maskChar) ||\n                (this.maskSpecialCharacters.includes(maskChar) && symbol === maskChar));\n        });\n        if (compare.join('') === res) {\n            return compare.join('');\n        }\n        return res;\n    }\n    shiftTypedSymbols(inputValue) {\n        let symbolToReplace = '';\n        const newInputValue = (inputValue &&\n            inputValue.split('').map((currSymbol, index) => {\n                var _a;\n                if (this.maskSpecialCharacters.includes((_a = inputValue[index + 1]) !== null && _a !== void 0 ? _a : '') &&\n                    inputValue[index + 1] !== this.maskExpression[index + 1]) {\n                    symbolToReplace = currSymbol;\n                    return inputValue[index + 1];\n                }\n                if (symbolToReplace.length) {\n                    const replaceSymbol = symbolToReplace;\n                    symbolToReplace = '';\n                    return replaceSymbol;\n                }\n                return currSymbol;\n            })) ||\n            [];\n        return newInputValue.join('');\n    }\n    /**\n     * Convert number value to string\n     * 3.1415 -> '3.1415'\n     * 1e-7 -> '0.0000001'\n     */\n    numberToString(value) {\n        if (!value && value !== 0) {\n            return String(value);\n        }\n        return Number(value).toLocaleString('fullwide', {\n            useGrouping: false,\n            maximumFractionDigits: 20,\n        });\n    }\n    showMaskInInput(inputVal) {\n        if (this.showMaskTyped && !!this.shownMaskExpression) {\n            if (this.maskExpression.length !== this.shownMaskExpression.length) {\n                throw new Error('Mask expression must match mask placeholder length');\n            }\n            else {\n                return this.shownMaskExpression;\n            }\n        }\n        else if (this.showMaskTyped) {\n            if (inputVal) {\n                if (this.maskExpression === 'IP') {\n                    return this._checkForIp(inputVal);\n                }\n                if (this.maskExpression === 'CPF_CNPJ') {\n                    return this._checkForCpfCnpj(inputVal);\n                }\n            }\n            return this.maskExpression.replace(/\\w/g, this.placeHolderCharacter);\n        }\n        return '';\n    }\n    clearIfNotMatchFn() {\n        const formElement = this._elementRef.nativeElement;\n        if (this.clearIfNotMatch &&\n            this.prefix.length + this.maskExpression.length + this.suffix.length !==\n                formElement.value.replace(/_/g, '').length) {\n            this.formElementProperty = ['value', ''];\n            this.applyMask(formElement.value, this.maskExpression);\n        }\n    }\n    set formElementProperty([name, value]) {\n        Promise.resolve().then(() => this._renderer.setProperty(this._elementRef.nativeElement, name, value));\n    }\n    checkSpecialCharAmount(mask) {\n        const chars = mask\n            .split('')\n            .filter((item) => this._findSpecialChar(item));\n        return chars.length;\n    }\n    removeMask(inputValue) {\n        return this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.maskSpecialCharacters.concat('_').concat(this.placeHolderCharacter));\n    }\n    _checkForIp(inputVal) {\n        var _a;\n        if (inputVal === '#') {\n            return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n        }\n        const arr = [];\n        for (let i = 0; i < inputVal.length; i++) {\n            const value = (_a = inputVal[i]) !== null && _a !== void 0 ? _a : '';\n            if (!value) {\n                continue;\n            }\n            if (value.match('\\\\d')) {\n                arr.push(value);\n            }\n        }\n        if (arr.length <= 3) {\n            return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n        }\n        if (arr.length > 3 && arr.length <= 6) {\n            return `${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n        }\n        if (arr.length > 6 && arr.length <= 9) {\n            return this.placeHolderCharacter;\n        }\n        if (arr.length > 9 && arr.length <= 12) {\n            return '';\n        }\n        return '';\n    }\n    _checkForCpfCnpj(inputVal) {\n        var _a;\n        const cpf = `${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n        const cnpj = `${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `/${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n        if (inputVal === '#') {\n            return cpf;\n        }\n        const arr = [];\n        for (let i = 0; i < inputVal.length; i++) {\n            const value = (_a = inputVal[i]) !== null && _a !== void 0 ? _a : '';\n            if (!value) {\n                continue;\n            }\n            if (value.match('\\\\d')) {\n                arr.push(value);\n            }\n        }\n        if (arr.length <= 3) {\n            return cpf.slice(arr.length, cpf.length);\n        }\n        if (arr.length > 3 && arr.length <= 6) {\n            return cpf.slice(arr.length + 1, cpf.length);\n        }\n        if (arr.length > 6 && arr.length <= 9) {\n            return cpf.slice(arr.length + 2, cpf.length);\n        }\n        if (arr.length > 9 && arr.length < 11) {\n            return cpf.slice(arr.length + 3, cpf.length);\n        }\n        if (arr.length === 11) {\n            return '';\n        }\n        if (arr.length === 12) {\n            if (inputVal.length === 17) {\n                return cnpj.slice(16, cnpj.length);\n            }\n            return cnpj.slice(15, cnpj.length);\n        }\n        if (arr.length > 12 && arr.length <= 14) {\n            return cnpj.slice(arr.length + 4, cnpj.length);\n        }\n        return '';\n    }\n    /**\n     * Recursively determine the current active element by navigating the Shadow DOM until the Active Element is found.\n     */\n    _getActiveElement(document = this.document) {\n        var _a;\n        const shadowRootEl = (_a = document === null || document === void 0 ? void 0 : document.activeElement) === null || _a === void 0 ? void 0 : _a.shadowRoot;\n        if (!(shadowRootEl === null || shadowRootEl === void 0 ? void 0 : shadowRootEl.activeElement)) {\n            return document.activeElement;\n        }\n        else {\n            return this._getActiveElement(shadowRootEl);\n        }\n    }\n    /**\n     * Propogates the input value back to the Angular model by triggering the onChange function. It won't do this if writingValue\n     * is true. If that is true it means we are currently in the writeValue function, which is supposed to only update the actual\n     * DOM element based on the Angular model value. It should be a one way process, i.e. writeValue should not be modifying the Angular\n     * model value too. Therefore, we don't trigger onChange in this scenario.\n     * @param inputValue the current form input value\n     */\n    formControlResult(inputValue) {\n        if (this.writingValue || (!this.triggerOnMaskChange && this.maskChanged)) {\n            this.maskChanged = false;\n            return;\n        }\n        if (Array.isArray(this.dropSpecialCharacters)) {\n            this.onChange(this._toNumber(this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.dropSpecialCharacters)));\n        }\n        else if (this.dropSpecialCharacters) {\n            this.onChange(this._toNumber(this._checkSymbols(inputValue)));\n        }\n        else {\n            this.onChange(this._removeSuffix(inputValue));\n        }\n    }\n    _toNumber(value) {\n        if (!this.isNumberValue || value === '') {\n            return value;\n        }\n        const num = Number(value);\n        return Number.isNaN(num) ? value : num;\n    }\n    _removeMask(value, specialCharactersForRemove) {\n        return value ? value.replace(this._regExpForRemove(specialCharactersForRemove), '') : value;\n    }\n    _removePrefix(value) {\n        if (!this.prefix) {\n            return value;\n        }\n        return value ? value.replace(this.prefix, '') : value;\n    }\n    _removeSuffix(value) {\n        if (!this.suffix) {\n            return value;\n        }\n        return value ? value.replace(this.suffix, '') : value;\n    }\n    _retrieveSeparatorValue(result) {\n        return this._removeMask(this._removeSuffix(this._removePrefix(result)), this.maskSpecialCharacters);\n    }\n    _regExpForRemove(specialCharactersForRemove) {\n        return new RegExp(specialCharactersForRemove.map((item) => `\\\\${item}`).join('|'), 'gi');\n    }\n    _replaceDecimalMarkerToDot(value) {\n        const markers = Array.isArray(this.decimalMarker)\n            ? this.decimalMarker\n            : [this.decimalMarker];\n        return value.replace(this._regExpForRemove(markers), '.');\n    }\n    _checkSymbols(result) {\n        if (result === '') {\n            return result;\n        }\n        const separatorPrecision = this._retrieveSeparatorPrecision(this.maskExpression);\n        const separatorValue = this._replaceDecimalMarkerToDot(this._retrieveSeparatorValue(result));\n        if (!this.isNumberValue) {\n            return separatorValue;\n        }\n        if (separatorPrecision) {\n            if (result === this.decimalMarker) {\n                return null;\n            }\n            return this._checkPrecision(this.maskExpression, separatorValue);\n        }\n        else {\n            return Number(separatorValue);\n        }\n    }\n    // TODO should think about helpers or separting decimal precision to own property\n    _retrieveSeparatorPrecision(maskExpretion) {\n        const matcher = maskExpretion.match(new RegExp(`^separator\\\\.([^d]*)`));\n        return matcher ? Number(matcher[1]) : null;\n    }\n    _checkPrecision(separatorExpression, separatorValue) {\n        if (separatorExpression.indexOf('2') > 0) {\n            return Number(separatorValue).toFixed(2);\n        }\n        return Number(separatorValue);\n    }\n}\nMaskService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: MaskService, deps: [{ token: DOCUMENT }, { token: config }, { token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Injectable });\nMaskService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: MaskService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: MaskService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: Document, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [config]\n                    }] }, { type: i0.ElementRef }, { type: i0.Renderer2 }];\n    } });\n\nclass MaskDirective {\n    constructor(document, _maskService, _config) {\n        this.document = document;\n        this._maskService = _maskService;\n        this._config = _config;\n        // eslint-disable-next-line @angular-eslint/no-input-rename\n        this.maskExpression = '';\n        this.specialCharacters = [];\n        this.patterns = {};\n        this.prefix = '';\n        this.suffix = '';\n        this.thousandSeparator = ' ';\n        this.decimalMarker = '.';\n        this.dropSpecialCharacters = null;\n        this.hiddenInput = null;\n        this.showMaskTyped = null;\n        this.placeHolderCharacter = null;\n        this.shownMaskExpression = null;\n        this.showTemplate = null;\n        this.clearIfNotMatch = null;\n        this.validation = null;\n        this.separatorLimit = null;\n        this.allowNegativeNumbers = null;\n        this.leadZeroDateTime = null;\n        this.triggerOnMaskChange = null;\n        this.maskFilled = new EventEmitter();\n        this._maskValue = '';\n        this._position = null;\n        this._maskExpressionArray = [];\n        this._justPasted = false;\n        // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n        this.onChange = (_) => { };\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        this.onTouch = () => { };\n    }\n    ngOnChanges(changes) {\n        const { maskExpression, specialCharacters, patterns, prefix, suffix, thousandSeparator, decimalMarker, dropSpecialCharacters, hiddenInput, showMaskTyped, placeHolderCharacter, shownMaskExpression, showTemplate, clearIfNotMatch, validation, separatorLimit, allowNegativeNumbers, leadZeroDateTime, triggerOnMaskChange, } = changes;\n        if (maskExpression) {\n            if (maskExpression.currentValue !== maskExpression.previousValue &&\n                !maskExpression.firstChange) {\n                this._maskService.maskChanged = true;\n            }\n            if (maskExpression.currentValue && maskExpression.currentValue.split('||').length > 1) {\n                this._maskExpressionArray = maskExpression.currentValue\n                    .split('||')\n                    .sort((a, b) => {\n                    return a.length - b.length;\n                });\n                this._setMask();\n            }\n            else {\n                this._maskExpressionArray = [];\n                this._maskValue = maskExpression.currentValue || '';\n                this._maskService.maskExpression = this._maskValue;\n            }\n        }\n        if (specialCharacters) {\n            if (!specialCharacters.currentValue || !Array.isArray(specialCharacters.currentValue)) {\n                return;\n            }\n            else {\n                this._maskService.maskSpecialCharacters = specialCharacters.currentValue || [];\n            }\n        }\n        // Only overwrite the mask available patterns if a pattern has actually been passed in\n        if (patterns && patterns.currentValue) {\n            this._maskService.maskAvailablePatterns = patterns.currentValue;\n        }\n        if (prefix) {\n            this._maskService.prefix = prefix.currentValue;\n        }\n        if (suffix) {\n            this._maskService.suffix = suffix.currentValue;\n        }\n        if (thousandSeparator) {\n            this._maskService.thousandSeparator = thousandSeparator.currentValue;\n        }\n        if (decimalMarker) {\n            this._maskService.decimalMarker = decimalMarker.currentValue;\n        }\n        if (dropSpecialCharacters) {\n            this._maskService.dropSpecialCharacters = dropSpecialCharacters.currentValue;\n        }\n        if (hiddenInput) {\n            this._maskService.hiddenInput = hiddenInput.currentValue;\n        }\n        if (showMaskTyped) {\n            this._maskService.showMaskTyped = showMaskTyped.currentValue;\n        }\n        if (placeHolderCharacter) {\n            this._maskService.placeHolderCharacter = placeHolderCharacter.currentValue;\n        }\n        if (shownMaskExpression) {\n            this._maskService.shownMaskExpression = shownMaskExpression.currentValue;\n        }\n        if (showTemplate) {\n            this._maskService.showTemplate = showTemplate.currentValue;\n        }\n        if (clearIfNotMatch) {\n            this._maskService.clearIfNotMatch = clearIfNotMatch.currentValue;\n        }\n        if (validation) {\n            this._maskService.validation = validation.currentValue;\n        }\n        if (separatorLimit) {\n            this._maskService.separatorLimit = separatorLimit.currentValue;\n        }\n        if (allowNegativeNumbers) {\n            this._maskService.allowNegativeNumbers = allowNegativeNumbers.currentValue;\n            if (this._maskService.allowNegativeNumbers) {\n                this._maskService.maskSpecialCharacters =\n                    this._maskService.maskSpecialCharacters.filter((c) => c !== '-');\n            }\n        }\n        if (leadZeroDateTime) {\n            this._maskService.leadZeroDateTime = leadZeroDateTime.currentValue;\n        }\n        if (triggerOnMaskChange) {\n            this._maskService.triggerOnMaskChange = triggerOnMaskChange.currentValue;\n        }\n        this._applyMask();\n    }\n    // eslint-disable-next-line complexity\n    validate({ value }) {\n        var _a, _b;\n        if (!this._maskService.validation || !this._maskValue) {\n            return null;\n        }\n        if (this._maskService.ipError) {\n            return this._createValidationError(value);\n        }\n        if (this._maskService.cpfCnpjError) {\n            return this._createValidationError(value);\n        }\n        if (this._maskValue.startsWith('separator')) {\n            return null;\n        }\n        if (withoutValidation.includes(this._maskValue)) {\n            return null;\n        }\n        if (this._maskService.clearIfNotMatch) {\n            return null;\n        }\n        if (timeMasks.includes(this._maskValue)) {\n            return this._validateTime(value);\n        }\n        if (value && value.toString().length >= 1) {\n            let counterOfOpt = 0;\n            for (const key in this._maskService.maskAvailablePatterns) {\n                if ((_a = this._maskService.maskAvailablePatterns[key]) === null || _a === void 0 ? void 0 : _a.optional) {\n                    if (this._maskValue.indexOf(key) !== this._maskValue.lastIndexOf(key)) {\n                        const opt = this._maskValue\n                            .split('')\n                            .filter((i) => i === key)\n                            .join('');\n                        counterOfOpt += opt.length;\n                    }\n                    else if (this._maskValue.indexOf(key) !== -1) {\n                        counterOfOpt++;\n                    }\n                    if (this._maskValue.indexOf(key) !== -1 &&\n                        value.toString().length >= this._maskValue.indexOf(key)) {\n                        return null;\n                    }\n                    if (counterOfOpt === this._maskValue.length) {\n                        return null;\n                    }\n                }\n            }\n            if (this._maskValue.indexOf('{') === 1 &&\n                value.toString().length ===\n                    this._maskValue.length +\n                        Number(((_b = this._maskValue.split('{')[1]) !== null && _b !== void 0 ? _b : '').split('}')[0]) -\n                        4) {\n                return null;\n            }\n            if (this._maskValue.indexOf('*') === 1 || this._maskValue.indexOf('?') === 1) {\n                return null;\n            }\n            else if ((this._maskValue.indexOf('*') > 1 &&\n                value.toString().length < this._maskValue.indexOf('*')) ||\n                (this._maskValue.indexOf('?') > 1 &&\n                    value.toString().length < this._maskValue.indexOf('?')) ||\n                this._maskValue.indexOf('{') === 1) {\n                return this._createValidationError(value);\n            }\n            if (this._maskValue.indexOf('*') === -1 || this._maskValue.indexOf('?') === -1) {\n                const length = this._maskService.dropSpecialCharacters\n                    ? this._maskValue.length -\n                        this._maskService.checkSpecialCharAmount(this._maskValue) -\n                        counterOfOpt\n                    : this._maskValue.length - counterOfOpt;\n                if (value.toString().length < length) {\n                    return this._createValidationError(value);\n                }\n            }\n        }\n        if (value) {\n            this.maskFilled.emit();\n            return null;\n        }\n        return null;\n    }\n    onPaste() {\n        this._justPasted = true;\n    }\n    onModelChange(value) {\n        // on form reset we need to update the actualValue\n        if ((value === '' || value === null || value === undefined) &&\n            this._maskService.actualValue) {\n            this._maskService.actualValue = this._maskService.getActualValue('');\n        }\n    }\n    onInput(e) {\n        const el = e.target;\n        this._inputValue = el.value;\n        this._setMask();\n        if (!this._maskValue) {\n            this.onChange(el.value);\n            return;\n        }\n        const position = el.selectionStart === 1\n            ? el.selectionStart + this._maskService.prefix.length\n            : el.selectionStart;\n        let caretShift = 0;\n        let backspaceShift = false;\n        this._maskService.applyValueChanges(position, this._justPasted, this._code === 'Backspace' || this._code === 'Delete', (shift, _backspaceShift) => {\n            this._justPasted = false;\n            caretShift = shift;\n            backspaceShift = _backspaceShift;\n        });\n        // only set the selection if the element is active\n        if (this._getActiveElement() !== el) {\n            return;\n        }\n        this._position =\n            this._position === 1 && this._inputValue.length === 1 ? null : this._position;\n        let positionToApply = this._position\n            ? this._inputValue.length + position + caretShift\n            : position + (this._code === 'Backspace' && !backspaceShift ? 0 : caretShift);\n        if (positionToApply > this._getActualInputLength()) {\n            positionToApply = this._getActualInputLength();\n        }\n        if (positionToApply < 0) {\n            positionToApply = 0;\n        }\n        el.setSelectionRange(positionToApply, positionToApply);\n        this._position = null;\n    }\n    onBlur() {\n        if (this._maskValue) {\n            this._maskService.clearIfNotMatchFn();\n        }\n        this.onTouch();\n    }\n    onClick(e) {\n        if (!this._maskValue) {\n            return;\n        }\n        const el = e.target;\n        const posStart = 0;\n        const posEnd = 0;\n        if (el !== null &&\n            el.selectionStart !== null &&\n            el.selectionStart === el.selectionEnd &&\n            el.selectionStart > this._maskService.prefix.length &&\n            // eslint-disable-next-line\n            e.keyCode !== 38) {\n            if (this._maskService.showMaskTyped) {\n                // We are showing the mask in the input\n                this._maskService.maskIsShown = this._maskService.showMaskInInput();\n                if (el.setSelectionRange &&\n                    this._maskService.prefix + this._maskService.maskIsShown === el.value) {\n                    // the input ONLY contains the mask, so position the cursor at the start\n                    el.focus();\n                    el.setSelectionRange(posStart, posEnd);\n                }\n                else {\n                    // the input contains some characters already\n                    if (el.selectionStart > this._maskService.actualValue.length) {\n                        // if the user clicked beyond our value's length, position the cursor at the end of our value\n                        el.setSelectionRange(this._maskService.actualValue.length, this._maskService.actualValue.length);\n                    }\n                }\n            }\n        }\n        const nextValue = el &&\n            (!el.value || el.value === this._maskService.prefix\n                ? this._maskService.prefix + this._maskService.maskIsShown\n                : el.value);\n        /** Fix of cursor position jumping to end in most browsers no matter where cursor is inserted onFocus */\n        if (el && el.value !== nextValue) {\n            el.value = nextValue;\n        }\n        /** fix of cursor position with prefix when mouse click occur */\n        if (el &&\n            (el.selectionStart || el.selectionEnd) <=\n                this._maskService.prefix.length) {\n            el.selectionStart = this._maskService.prefix.length;\n            return;\n        }\n        /** select only inserted text */\n        if (el && el.selectionEnd > this._getActualInputLength()) {\n            el.selectionEnd = this._getActualInputLength();\n        }\n    }\n    // eslint-disable-next-line complexity\n    onKeyDown(e) {\n        var _a, _b;\n        if (!this._maskValue) {\n            return;\n        }\n        this._code = e.code ? e.code : e.key;\n        const el = e.target;\n        this._inputValue = el.value;\n        this._setMask();\n        if (e.keyCode === 38) {\n            e.preventDefault();\n        }\n        if (e.keyCode === 37 || e.keyCode === 8 || e.keyCode === 46) {\n            if (e.keyCode === 8 && el.value.length === 0) {\n                el.selectionStart = el.selectionEnd;\n            }\n            if (e.keyCode === 8 && el.selectionStart !== 0) {\n                // If specialChars is false, (shouldn't ever happen) then set to the defaults\n                this.specialCharacters = ((_a = this.specialCharacters) === null || _a === void 0 ? void 0 : _a.length)\n                    ? this.specialCharacters\n                    : this._config.specialCharacters;\n                if (this.prefix.length > 1 && el.selectionStart <= this.prefix.length) {\n                    el.setSelectionRange(this.prefix.length, el.selectionEnd);\n                }\n                else {\n                    if (this._inputValue.length !== el.selectionStart &&\n                        el.selectionStart !== 1) {\n                        while (this.specialCharacters.includes(((_b = this._inputValue[el.selectionStart - 1]) !== null && _b !== void 0 ? _b : '').toString()) &&\n                            ((this.prefix.length >= 1 &&\n                                el.selectionStart > this.prefix.length) ||\n                                this.prefix.length === 0)) {\n                            el.setSelectionRange(el.selectionStart - 1, el.selectionEnd);\n                        }\n                    }\n                }\n            }\n            this.checkSelectionOnDeletion(el);\n            if (this._maskService.prefix.length &&\n                el.selectionStart <= this._maskService.prefix.length &&\n                el.selectionEnd <= this._maskService.prefix.length) {\n                e.preventDefault();\n            }\n            const cursorStart = el.selectionStart;\n            if (e.keyCode === 8 &&\n                !el.readOnly &&\n                cursorStart === 0 &&\n                el.selectionEnd === el.value.length &&\n                el.value.length !== 0) {\n                this._position = this._maskService.prefix ? this._maskService.prefix.length : 0;\n                this._maskService.applyMask(this._maskService.prefix, this._maskService.maskExpression, this._position);\n            }\n        }\n        if (!!this.suffix &&\n            this.suffix.length > 1 &&\n            this._inputValue.length - this.suffix.length < el.selectionStart) {\n            el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n        }\n        else if ((e.keyCode === 65 && e.ctrlKey) ||\n            (e.keyCode === 65 && e.metaKey) // Cmd + A (Mac)\n        ) {\n            el.setSelectionRange(0, this._getActualInputLength());\n            e.preventDefault();\n        }\n        this._maskService.selStart = el.selectionStart;\n        this._maskService.selEnd = el.selectionEnd;\n    }\n    /** It writes the value in the input */\n    writeValue(inputValue) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof inputValue === 'object' && inputValue !== null && 'value' in inputValue) {\n                if ('disable' in inputValue) {\n                    this.setDisabledState(Boolean(inputValue.disable));\n                }\n                // eslint-disable-next-line no-param-reassign\n                inputValue = inputValue.value;\n            }\n            if (typeof inputValue === 'number' || this._maskValue.startsWith('separator')) {\n                // eslint-disable-next-line no-param-reassign\n                inputValue = this._maskService.numberToString(inputValue);\n                if (!Array.isArray(this.decimalMarker)) {\n                    // eslint-disable-next-line no-param-reassign\n                    inputValue =\n                        this.decimalMarker !== '.'\n                            ? inputValue.replace('.', this.decimalMarker)\n                            : inputValue;\n                }\n                this._maskService.isNumberValue = true;\n            }\n            if (typeof inputValue !== 'string') {\n                // eslint-disable-next-line no-param-reassign\n                inputValue = '';\n            }\n            this._inputValue = inputValue;\n            this._setMask();\n            if ((inputValue && this._maskService.maskExpression) ||\n                (this._maskService.maskExpression &&\n                    (this._maskService.prefix || this._maskService.showMaskTyped))) {\n                // Let the service we know we are writing value so that triggering onChange function won't happen during applyMask\n                this._maskService.writingValue = true;\n                this._maskService.formElementProperty = [\n                    'value',\n                    this._maskService.applyMask(inputValue, this._maskService.maskExpression),\n                ];\n                // Let the service know we've finished writing value\n                this._maskService.writingValue = false;\n            }\n            else {\n                this._maskService.formElementProperty = ['value', inputValue];\n            }\n            this._inputValue = inputValue;\n        });\n    }\n    registerOnChange(fn) {\n        this._maskService.onChange = this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onTouch = fn;\n    }\n    _getActiveElement(document = this.document) {\n        var _a;\n        const shadowRootEl = (_a = document === null || document === void 0 ? void 0 : document.activeElement) === null || _a === void 0 ? void 0 : _a.shadowRoot;\n        if (!(shadowRootEl === null || shadowRootEl === void 0 ? void 0 : shadowRootEl.activeElement)) {\n            return document.activeElement;\n        }\n        else {\n            return this._getActiveElement(shadowRootEl);\n        }\n    }\n    checkSelectionOnDeletion(el) {\n        el.selectionStart = Math.min(Math.max(this.prefix.length, el.selectionStart), this._inputValue.length - this.suffix.length);\n        el.selectionEnd = Math.min(Math.max(this.prefix.length, el.selectionEnd), this._inputValue.length - this.suffix.length);\n    }\n    /** It disables the input element */\n    setDisabledState(isDisabled) {\n        this._maskService.formElementProperty = ['disabled', isDisabled];\n    }\n    _repeatPatternSymbols(maskExp) {\n        return ((maskExp.match(/{[0-9]+}/) &&\n            maskExp\n                .split('')\n                .reduce((accum, currVal, index) => {\n                this._start = currVal === '{' ? index : this._start;\n                if (currVal !== '}') {\n                    return this._maskService._findSpecialChar(currVal)\n                        ? accum + currVal\n                        : accum;\n                }\n                this._end = index;\n                const repeatNumber = Number(maskExp.slice(this._start + 1, this._end));\n                const replaceWith = new Array(repeatNumber + 1).join(maskExp[this._start - 1]);\n                return accum + replaceWith;\n            }, '')) ||\n            maskExp);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _applyMask() {\n        this._maskService.maskExpression = this._repeatPatternSymbols(this._maskValue || '');\n        this._maskService.formElementProperty = [\n            'value',\n            this._maskService.applyMask(this._inputValue, this._maskService.maskExpression),\n        ];\n    }\n    _validateTime(value) {\n        var _a;\n        const rowMaskLen = this._maskValue\n            .split('')\n            .filter((s) => s !== ':').length;\n        if (!value) {\n            return null; // Don't validate empty values to allow for optional form control\n        }\n        if ((+((_a = value[value.length - 1]) !== null && _a !== void 0 ? _a : -1) === 0 && value.length < rowMaskLen) ||\n            value.length <= rowMaskLen - 2) {\n            return this._createValidationError(value);\n        }\n        return null;\n    }\n    _getActualInputLength() {\n        return (this._maskService.actualValue.length ||\n            this._maskService.actualValue.length + this._maskService.prefix.length);\n    }\n    _createValidationError(actualValue) {\n        return {\n            mask: {\n                requiredMask: this._maskValue,\n                actualValue,\n            },\n        };\n    }\n    _setMask() {\n        if (this._maskExpressionArray.length > 0) {\n            this._maskExpressionArray.some((mask) => {\n                var _a, _b, _c;\n                const test = ((_a = this._maskService.removeMask(this._inputValue)) === null || _a === void 0 ? void 0 : _a.length) <=\n                    ((_b = this._maskService.removeMask(mask)) === null || _b === void 0 ? void 0 : _b.length);\n                if (this._inputValue && test) {\n                    this._maskValue = mask;\n                    this.maskExpression = mask;\n                    this._maskService.maskExpression = mask;\n                    return test;\n                }\n                else {\n                    const expression = (_c = this._maskExpressionArray[this._maskExpressionArray.length - 1]) !== null && _c !== void 0 ? _c : '';\n                    this._maskValue =\n                        this.maskExpression =\n                            this._maskService.maskExpression =\n                                expression;\n                }\n            });\n        }\n    }\n}\nMaskDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: MaskDirective, deps: [{ token: DOCUMENT }, { token: MaskService }, { token: config }], target: i0.ɵɵFactoryTarget.Directive });\nMaskDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.8\", type: MaskDirective, selector: \"input[mask], textarea[mask]\", inputs: { maskExpression: [\"mask\", \"maskExpression\"], specialCharacters: \"specialCharacters\", patterns: \"patterns\", prefix: \"prefix\", suffix: \"suffix\", thousandSeparator: \"thousandSeparator\", decimalMarker: \"decimalMarker\", dropSpecialCharacters: \"dropSpecialCharacters\", hiddenInput: \"hiddenInput\", showMaskTyped: \"showMaskTyped\", placeHolderCharacter: \"placeHolderCharacter\", shownMaskExpression: \"shownMaskExpression\", showTemplate: \"showTemplate\", clearIfNotMatch: \"clearIfNotMatch\", validation: \"validation\", separatorLimit: \"separatorLimit\", allowNegativeNumbers: \"allowNegativeNumbers\", leadZeroDateTime: \"leadZeroDateTime\", triggerOnMaskChange: \"triggerOnMaskChange\" }, outputs: { maskFilled: \"maskFilled\" }, host: { listeners: { \"paste\": \"onPaste()\", \"ngModelChange\": \"onModelChange($event)\", \"input\": \"onInput($event)\", \"blur\": \"onBlur()\", \"click\": \"onClick($event)\", \"keydown\": \"onKeyDown($event)\" } }, providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => MaskDirective),\n            multi: true,\n        },\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef(() => MaskDirective),\n            multi: true,\n        },\n        MaskService,\n    ], exportAs: [\"mask\", \"ngxMask\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: MaskDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'input[mask], textarea[mask]',\n                    providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: forwardRef(() => MaskDirective),\n                            multi: true,\n                        },\n                        {\n                            provide: NG_VALIDATORS,\n                            useExisting: forwardRef(() => MaskDirective),\n                            multi: true,\n                        },\n                        MaskService,\n                    ],\n                    exportAs: 'mask,ngxMask',\n                }]\n        }], ctorParameters: function () {\n        return [{ type: Document, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: MaskService }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [config]\n                    }] }];\n    }, propDecorators: { maskExpression: [{\n                type: Input,\n                args: ['mask']\n            }], specialCharacters: [{\n                type: Input\n            }], patterns: [{\n                type: Input\n            }], prefix: [{\n                type: Input\n            }], suffix: [{\n                type: Input\n            }], thousandSeparator: [{\n                type: Input\n            }], decimalMarker: [{\n                type: Input\n            }], dropSpecialCharacters: [{\n                type: Input\n            }], hiddenInput: [{\n                type: Input\n            }], showMaskTyped: [{\n                type: Input\n            }], placeHolderCharacter: [{\n                type: Input\n            }], shownMaskExpression: [{\n                type: Input\n            }], showTemplate: [{\n                type: Input\n            }], clearIfNotMatch: [{\n                type: Input\n            }], validation: [{\n                type: Input\n            }], separatorLimit: [{\n                type: Input\n            }], allowNegativeNumbers: [{\n                type: Input\n            }], leadZeroDateTime: [{\n                type: Input\n            }], triggerOnMaskChange: [{\n                type: Input\n            }], maskFilled: [{\n                type: Output\n            }], onPaste: [{\n                type: HostListener,\n                args: ['paste']\n            }], onModelChange: [{\n                type: HostListener,\n                args: ['ngModelChange', ['$event']]\n            }], onInput: [{\n                type: HostListener,\n                args: ['input', ['$event']]\n            }], onBlur: [{\n                type: HostListener,\n                args: ['blur']\n            }], onClick: [{\n                type: HostListener,\n                args: ['click', ['$event']]\n            }], onKeyDown: [{\n                type: HostListener,\n                args: ['keydown', ['$event']]\n            }] } });\n\nclass MaskPipe {\n    constructor(_maskService) {\n        this._maskService = _maskService;\n    }\n    transform(value, mask, thousandSeparator = null) {\n        if (!value && typeof value !== 'number') {\n            return '';\n        }\n        if (thousandSeparator) {\n            this._maskService.thousandSeparator = thousandSeparator;\n        }\n        if (typeof mask === 'string') {\n            return this._maskService.applyMask(`${value}`, mask);\n        }\n        return this._maskService.applyMaskWithPattern(`${value}`, mask);\n    }\n}\nMaskPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: MaskPipe, deps: [{ token: MaskApplierService }], target: i0.ɵɵFactoryTarget.Pipe });\nMaskPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"14.2.8\", ngImport: i0, type: MaskPipe, name: \"mask\" });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: MaskPipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: 'mask',\n                    pure: true,\n                }]\n        }], ctorParameters: function () { return [{ type: MaskApplierService }]; } });\n\n/**\n * @internal\n */\nfunction _configFactory(initConfig, configValue) {\n    return configValue instanceof Function\n        ? Object.assign(Object.assign({}, initConfig), configValue()) : Object.assign(Object.assign({}, initConfig), configValue);\n}\nclass NgxMaskModule {\n    static forRoot(configValue) {\n        return {\n            ngModule: NgxMaskModule,\n            providers: [\n                {\n                    provide: NEW_CONFIG,\n                    useValue: configValue,\n                },\n                {\n                    provide: INITIAL_CONFIG,\n                    useValue: initialConfig,\n                },\n                {\n                    provide: config,\n                    useFactory: _configFactory,\n                    deps: [INITIAL_CONFIG, NEW_CONFIG],\n                },\n                MaskApplierService,\n            ],\n        };\n    }\n    static forChild() {\n        return {\n            ngModule: NgxMaskModule,\n        };\n    }\n}\nNgxMaskModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: NgxMaskModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNgxMaskModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.8\", ngImport: i0, type: NgxMaskModule, declarations: [MaskDirective, MaskPipe], exports: [MaskDirective, MaskPipe] });\nNgxMaskModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: NgxMaskModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: NgxMaskModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [MaskDirective, MaskPipe],\n                    declarations: [MaskDirective, MaskPipe],\n                }]\n        }] });\n\nconst commonjsGlobal = typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof window !== 'undefined'\n        ? window\n        : typeof global !== 'undefined'\n            ? global\n            : typeof self !== 'undefined'\n                ? self\n                : {};\n(function () {\n    if (!commonjsGlobal.KeyboardEvent) {\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        commonjsGlobal.KeyboardEvent = function (_eventType, _init) { };\n    }\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { INITIAL_CONFIG, MaskApplierService, MaskDirective, MaskPipe, MaskService, NEW_CONFIG, NgxMaskModule, _configFactory, config, initialConfig, timeMasks, withoutValidation };\n"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,SAASC,cAAT,EAAyBC,YAAzB,EAAuCC,UAAvC,EAAmDC,MAAnD,EAA2DC,UAA3D,EAAuEC,SAAvE,EAAkFC,KAAlF,EAAyFC,MAAzF,EAAiGC,YAAjG,EAA+GC,IAA/G,EAAqHC,QAArH,QAAqI,eAArI;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,iBAAT,EAA4BC,aAA5B,QAAiD,gBAAjD;AACA,SAASC,QAAT,QAAyB,iBAAzB;AAEA,MAAMC,MAAM,GAAG,IAAIf,cAAJ,CAAmB,iBAAnB,CAAf;AACA,MAAMgB,UAAU,GAAG,IAAIhB,cAAJ,CAAmB,qBAAnB,CAAnB;AACA,MAAMiB,cAAc,GAAG,IAAIjB,cAAJ,CAAmB,yBAAnB,CAAvB;AACA,MAAMkB,aAAa,GAAG;EAClBC,MAAM,EAAE,EADU;EAElBC,MAAM,EAAE,EAFU;EAGlBC,iBAAiB,EAAE,GAHD;EAIlBC,aAAa,EAAE,CAAC,GAAD,EAAM,GAAN,CAJG;EAKlBC,eAAe,EAAE,KALC;EAMlBC,YAAY,EAAE,KANI;EAOlBC,aAAa,EAAE,KAPG;EAQlBC,oBAAoB,EAAE,GARJ;EASlBC,qBAAqB,EAAE,IATL;EAUlBC,WAAW,EAAEC,SAVK;EAWlBC,mBAAmB,EAAE,EAXH;EAYlBC,cAAc,EAAE,EAZE;EAalBC,oBAAoB,EAAE,KAbJ;EAclBC,UAAU,EAAE,IAdM;EAelB;EACAC,iBAAiB,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,EAAyC,GAAzC,EAA8C,GAA9C,EAAmD,GAAnD,EAAwD,GAAxD,EAA6D,GAA7D,EAAkE,GAAlE,CAhBD;EAiBlBC,gBAAgB,EAAE,KAjBA;EAkBlBC,mBAAmB,EAAE,KAlBH;EAmBlBC,UAAU,EAAE,IAAIpC,YAAJ,EAnBM;EAoBlBqC,QAAQ,EAAE;IACN,KAAK;MACDC,OAAO,EAAE,IAAIC,MAAJ,CAAW,KAAX;IADR,CADC;IAIN,KAAK;MACDD,OAAO,EAAE,IAAIC,MAAJ,CAAW,KAAX,CADR;MAEDC,QAAQ,EAAE;IAFT,CAJC;IAQNC,CAAC,EAAE;MACCH,OAAO,EAAE,IAAIC,MAAJ,CAAW,KAAX,CADV;MAECG,MAAM,EAAE;IAFT,CARG;IAYNC,CAAC,EAAE;MACCL,OAAO,EAAE,IAAIC,MAAJ,CAAW,aAAX;IADV,CAZG;IAeNK,CAAC,EAAE;MACCN,OAAO,EAAE,IAAIC,MAAJ,CAAW,UAAX;IADV,CAfG;IAkBNM,CAAC,EAAE;MACCP,OAAO,EAAE,IAAIC,MAAJ,CAAW,OAAX;IADV,CAlBG;IAqBNO,CAAC,EAAE;MACCR,OAAO,EAAE,IAAIC,MAAJ,CAAW,OAAX;IADV,CArBG;IAwBNQ,CAAC,EAAE;MACCT,OAAO,EAAE,IAAIC,MAAJ,CAAW,KAAX;IADV,CAxBG;IA2BNS,CAAC,EAAE;MACCV,OAAO,EAAE,IAAIC,MAAJ,CAAW,KAAX;IADV,CA3BG;IA8BNU,CAAC,EAAE;MACCX,OAAO,EAAE,IAAIC,MAAJ,CAAW,KAAX;IADV,CA9BG;IAiCNW,CAAC,EAAE;MACCZ,OAAO,EAAE,IAAIC,MAAJ,CAAW,KAAX;IADV,CAjCG;IAoCNY,CAAC,EAAE;MACCb,OAAO,EAAE,IAAIC,MAAJ,CAAW,KAAX;IADV,CApCG;IAuCNa,CAAC,EAAE;MACCd,OAAO,EAAE,IAAIC,MAAJ,CAAW,KAAX;IADV;EAvCG;AApBQ,CAAtB;AAgEA,MAAMc,SAAS,GAAG,CAAC,UAAD,EAAa,OAAb,EAAsB,OAAtB,CAAlB;AACA,MAAMC,iBAAiB,GAAG,CACtB,SADsB,EAEtB,IAFsB,EAGtB,IAHsB,EAItB,IAJsB,EAKtB,WALsB,EAMtB,YANsB,EAOtB,OAPsB,EAQtB,IARsB,EAStB,IATsB,CAA1B;;AAYA,MAAMC,kBAAN,CAAyB;EACrBC,WAAW,CAACC,OAAD,EAAU;IACjB,KAAKA,OAAL,GAAeA,OAAf;IACA,KAAKC,cAAL,GAAsB,EAAtB;IACA,KAAKC,WAAL,GAAmB,EAAnB;IACA,KAAK9B,mBAAL,GAA2B,EAA3B;;IACA,KAAK+B,qBAAL,GAA6B,CAACC,GAAD,EAAMC,qBAAN,EAA6BC,YAA7B,EAA2CC,SAA3C,KAAyD;MAClF,IAAIC,EAAJ,EAAQC,EAAR,EAAYC,EAAZ;;MACA,IAAIC,CAAC,GAAG,EAAR;MACA,IAAIC,WAAW,GAAG,EAAlB;;MACA,IAAIC,KAAK,CAACC,OAAN,CAAcR,YAAd,CAAJ,EAAiC;QAC7B,MAAMS,MAAM,GAAG,IAAIjC,MAAJ,CAAWwB,YAAY,CAACU,GAAb,CAAkBC,CAAD,IAAQ,eAAeC,OAAf,CAAuBD,CAAvB,KAA6B,CAA7B,GAAkC,KAAIA,CAAE,EAAxC,GAA4CA,CAArE,EAAyEE,IAAzE,CAA8E,GAA9E,CAAX,CAAf;QACAR,CAAC,GAAGP,GAAG,CAACgB,KAAJ,CAAUL,MAAV,CAAJ;QACAH,WAAW,GAAG,CAACH,EAAE,GAAG,CAACD,EAAE,GAAGJ,GAAG,CAACiB,KAAJ,CAAUN,MAAV,CAAN,MAA6B,IAA7B,IAAqCP,EAAE,KAAK,KAAK,CAAjD,GAAqD,KAAK,CAA1D,GAA8DA,EAAE,CAAC,CAAD,CAAtE,MAA+E,IAA/E,IAAuFC,EAAE,KAAK,KAAK,CAAnG,GAAuGA,EAAvG,GAA4G,EAA1H;MACH,CAJD,MAKK;QACDE,CAAC,GAAGP,GAAG,CAACgB,KAAJ,CAAUd,YAAV,CAAJ;QACAM,WAAW,GAAGN,YAAd;MACH;;MACD,MAAMgB,QAAQ,GAAGX,CAAC,CAACY,MAAF,GAAW,CAAX,GAAgB,GAAEX,WAAY,GAAED,CAAC,CAAC,CAAD,CAAI,EAArC,GAAyC,EAA1D;MACA,IAAIa,GAAG,GAAG,CAACd,EAAE,GAAGC,CAAC,CAAC,CAAD,CAAP,MAAgB,IAAhB,IAAwBD,EAAE,KAAK,KAAK,CAApC,GAAwCA,EAAxC,GAA6C,EAAvD;MACA,MAAMrC,cAAc,GAAG,KAAKA,cAAL,CAAoBoD,OAApB,CAA4B,KAA5B,EAAmC,EAAnC,CAAvB;;MACA,IAAIpD,cAAc,IAAI,CAACA,cAAvB,EAAuC;QACnC,IAAImD,GAAG,CAAC,CAAD,CAAH,KAAW,GAAf,EAAoB;UAChBA,GAAG,GAAI,IAAGA,GAAG,CAACE,KAAJ,CAAU,CAAV,EAAaF,GAAG,CAACD,MAAjB,EAAyBG,KAAzB,CAA+B,CAA/B,EAAkCrD,cAAc,CAACkD,MAAjD,CAAyD,EAAnE;QACH,CAFD,MAGK;UACDC,GAAG,GAAGA,GAAG,CAACE,KAAJ,CAAU,CAAV,EAAarD,cAAc,CAACkD,MAA5B,CAAN;QACH;MACJ;;MACD,MAAMI,GAAG,GAAG,cAAZ;;MACA,OAAOtB,qBAAqB,IAAIsB,GAAG,CAACC,IAAJ,CAASJ,GAAT,CAAhC,EAA+C;QAC3CA,GAAG,GAAGA,GAAG,CAACC,OAAJ,CAAYE,GAAZ,EAAiB,OAAOtB,qBAAP,GAA+B,IAAhD,CAAN;MACH;;MACD,IAAIE,SAAS,KAAKpC,SAAlB,EAA6B;QACzB,OAAOqD,GAAG,GAAGF,QAAb;MACH,CAFD,MAGK,IAAIf,SAAS,KAAK,CAAlB,EAAqB;QACtB,OAAOiB,GAAP;MACH;;MACD,OAAOA,GAAG,GAAGF,QAAQ,CAACO,SAAT,CAAmB,CAAnB,EAAsBtB,SAAS,GAAG,CAAlC,CAAb;IACH,CAnCD;;IAoCA,KAAKuB,UAAL,GAAmB1B,GAAD,IAAS;MACvB,OAAO2B,MAAM,CAAC3B,GAAD,CAAN,IAAe,CAAf,IAAoB2B,MAAM,CAAC3B,GAAD,CAAN,IAAe,GAA1C;IACH,CAFD;;IAGA,KAAK4B,YAAL,GAAqB/B,cAAD,IAAoB;MACpC,MAAMU,CAAC,GAAGV,cAAc,CAACmB,KAAf,CAAqB,GAArB,CAAV;;MACA,IAAIT,CAAC,CAACY,MAAF,GAAW,CAAf,EAAkB;QACd,OAAOQ,MAAM,CAACpB,CAAC,CAACA,CAAC,CAACY,MAAF,GAAW,CAAZ,CAAF,CAAb;MACH;;MACD,OAAOU,QAAP;IACH,CAND;;IAOA,KAAKC,oBAAL,GAA6BC,UAAD,IAAgB;MACxC,IAAI3B,EAAJ,EAAQC,EAAR,EAAYC,EAAZ,EAAgB0B,EAAhB;;MACA,KAAK,IAAIC,CAAC,GAAG,CAAC,CAAC7B,EAAE,GAAG,KAAK/C,MAAX,MAAuB,IAAvB,IAA+B+C,EAAE,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,EAAE,CAACe,MAA5D,IAAsE,CAAnF,EAAsFc,CAAC,IAAI,CAA3F,EAA8FA,CAAC,EAA/F,EAAmG;QAC/F,MAAMC,MAAM,GAAG,KAAK7E,MAAL,CAAYoE,SAAZ,CAAsBQ,CAAtB,EAAyB,CAAC5B,EAAE,GAAG,KAAKhD,MAAX,MAAuB,IAAvB,IAA+BgD,EAAE,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,EAAE,CAACc,MAApF,CAAf;;QACA,IAAIY,UAAU,CAACI,QAAX,CAAoBD,MAApB,KACAD,CAAC,KAAK,CAAC,CAAC3B,EAAE,GAAG,KAAKjD,MAAX,MAAuB,IAAvB,IAA+BiD,EAAE,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,EAAE,CAACa,MAA5D,IAAsE,CAD5E,KAECc,CAAC,GAAG,CAAJ,GAAQ,CAAR,IACG,CAACF,UAAU,CAACI,QAAX,CAAoB,KAAK9E,MAAL,CAAYoE,SAAZ,CAAsBQ,CAAC,GAAG,CAA1B,EAA6B,CAACD,EAAE,GAAG,KAAK3E,MAAX,MAAuB,IAAvB,IAA+B2E,EAAE,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,EAAE,CAACb,MAAxF,CAApB,CAHL,CAAJ,EAGgI;UAC5H,OAAOY,UAAU,CAACV,OAAX,CAAmBa,MAAnB,EAA2B,EAA3B,CAAP;QACH;MACJ;;MACD,OAAOH,UAAP;IACH,CAZD;;IAaA,KAAKK,mBAAL,GAA2B,CAACL,UAAD,EAAa5B,SAAb,EAAwB3C,aAAxB,KAA0C;MACjE,IAAI4C,EAAJ,EAAQC,EAAR,EAAYC,EAAZ;;MACA,IAAIH,SAAS,GAAG0B,QAAhB,EAA0B;QACtB;QACA,IAAIpB,KAAK,CAACC,OAAN,CAAclD,aAAd,CAAJ,EAAkC;UAC9B,MAAM6E,MAAM,GAAG7E,aAAa,CAAC8E,IAAd,CAAoBC,EAAD,IAAQA,EAAE,KAAK,KAAKhF,iBAAvC,CAAf,CAD8B,CAE9B;;UACAC,aAAa,GAAG6E,MAAM,GAAGA,MAAH,GAAY7E,aAAa,CAAC,CAAD,CAA/C;QACH;;QACD,MAAMgF,cAAc,GAAG,IAAI9D,MAAJ,CAAW,KAAK+D,uBAAL,CAA6BjF,aAA7B,IAA+C,OAAM2C,SAAU,MAA1E,CAAvB;QACA,MAAMuC,cAAc,GAAG,CAACtC,EAAE,GAAG2B,UAAU,CAACd,KAAX,CAAiBuB,cAAjB,CAAN,MAA4C,IAA5C,IAAoDpC,EAAE,KAAK,KAAK,CAAhE,GAAoEA,EAApE,GAAyE,EAAhG;QACA,MAAMuC,oBAAoB,GAAG,CAACrC,EAAE,GAAG,CAACD,EAAE,GAAGqC,cAAc,CAAC,CAAD,CAApB,MAA6B,IAA7B,IAAqCrC,EAAE,KAAK,KAAK,CAAjD,GAAqD,KAAK,CAA1D,GAA8DA,EAAE,CAACc,MAAvE,MAAmF,IAAnF,IAA2Fb,EAAE,KAAK,KAAK,CAAvG,GAA2GA,EAA3G,GAAgH,CAA7I;;QACA,IAAIqC,oBAAoB,GAAG,CAAvB,GAA2BxC,SAA/B,EAA0C;UACtC,MAAMyC,IAAI,GAAGD,oBAAoB,GAAG,CAAvB,GAA2BxC,SAAxC,CADsC,CAEtC;;UACA4B,UAAU,GAAGA,UAAU,CAACN,SAAX,CAAqB,CAArB,EAAwBM,UAAU,CAACZ,MAAX,GAAoByB,IAA5C,CAAb;QACH;;QACD,IAAIzC,SAAS,KAAK,CAAd,IACA,KAAK0C,kBAAL,CAAwBd,UAAU,CAACA,UAAU,CAACZ,MAAX,GAAoB,CAArB,CAAlC,EAA2D3D,aAA3D,EAA0E,KAAKD,iBAA/E,CADJ,EACuG;UACnG;UACAwE,UAAU,GAAGA,UAAU,CAACN,SAAX,CAAqB,CAArB,EAAwBM,UAAU,CAACZ,MAAX,GAAoB,CAA5C,CAAb;QACH;MACJ;;MACD,OAAOY,UAAP;IACH,CAxBD;;IAyBA,KAAKe,MAAL,GAAc,IAAIC,GAAJ,EAAd;IACA,KAAKtF,eAAL,GAAuB,KAAKmC,OAAL,CAAanC,eAApC;IACA,KAAKI,qBAAL,GAA6B,KAAK+B,OAAL,CAAa/B,qBAA1C;IACA,KAAKmF,qBAAL,GAA6B,KAAKpD,OAAL,CAAaxB,iBAA1C;IACA,KAAK6E,qBAAL,GAA6B,KAAKrD,OAAL,CAAapB,QAA1C;IACA,KAAKlB,MAAL,GAAc,KAAKsC,OAAL,CAAatC,MAA3B;IACA,KAAKD,MAAL,GAAc,KAAKuC,OAAL,CAAavC,MAA3B;IACA,KAAKE,iBAAL,GAAyB,KAAKqC,OAAL,CAAarC,iBAAtC;IACA,KAAKC,aAAL,GAAqB,KAAKoC,OAAL,CAAapC,aAAlC;IACA,KAAKM,WAAL,GAAmB,KAAK8B,OAAL,CAAa9B,WAAhC;IACA,KAAKH,aAAL,GAAqB,KAAKiC,OAAL,CAAajC,aAAlC;IACA,KAAKC,oBAAL,GAA4B,KAAKgC,OAAL,CAAahC,oBAAzC;IACA,KAAKO,UAAL,GAAkB,KAAKyB,OAAL,CAAazB,UAA/B;IACA,KAAKF,cAAL,GAAsB,KAAK2B,OAAL,CAAa3B,cAAnC;IACA,KAAKC,oBAAL,GAA4B,KAAK0B,OAAL,CAAa1B,oBAAzC;IACA,KAAKG,gBAAL,GAAwB,KAAKuB,OAAL,CAAavB,gBAArC;EACH;;EACD6E,oBAAoB,CAACnB,UAAD,EAAaoB,cAAb,EAA6B;IAC7C,MAAM,CAACC,IAAD,EAAOC,aAAP,IAAwBF,cAA9B;IACA,KAAKE,aAAL,GAAqBA,aAArB;IACA,OAAO,KAAKC,SAAL,CAAevB,UAAf,EAA2BqB,IAA3B,CAAP;EACH;;EACDE,SAAS,CAACvB,UAAD,EAAalC,cAAb,EAA6B0D,QAAQ,GAAG,CAAxC,EAA2CC,UAAU,GAAG,KAAxD,EAA+DC,UAAU,GAAG,KAA5E,EACT;EACAC,EAAE,GAAG,MAAM,CAAG,CAFL,EAEO;IACZ,IAAItD,EAAJ,EAAQC,EAAR,EAAYC,EAAZ,EAAgB0B,EAAhB,EAAoB2B,EAApB,EAAwBC,EAAxB,EAA4BC,EAA5B,EAAgCC,EAAhC,EAAoCC,EAApC,EAAwCC,EAAxC,EAA4CC,EAA5C,EAAgDC,EAAhD,EAAoDC,EAApD,EAAwDC,EAAxD,EAA4DC,EAA5D;;IACA,IAAI,CAACxE,cAAD,IAAmB,OAAOkC,UAAP,KAAsB,QAA7C,EAAuD;MACnD,OAAO,EAAP;IACH;;IACD,IAAIuC,MAAM,GAAG,CAAb;IACA,IAAIC,MAAM,GAAG,EAAb;IACA,IAAIC,KAAK,GAAG,KAAZ;IACA,IAAIC,cAAc,GAAG,KAArB;IACA,IAAIC,KAAK,GAAG,CAAZ;IACA,IAAIC,QAAQ,GAAG,KAAf;;IACA,IAAI5C,UAAU,CAACT,KAAX,CAAiB,CAAjB,EAAoB,KAAKhE,MAAL,CAAY6D,MAAhC,MAA4C,KAAK7D,MAArD,EAA6D;MACzD;MACAyE,UAAU,GAAGA,UAAU,CAACT,KAAX,CAAiB,KAAKhE,MAAL,CAAY6D,MAA7B,EAAqCY,UAAU,CAACZ,MAAhD,CAAb;IACH;;IACD,IAAI,CAAC,CAAC,KAAK9D,MAAP,IAAiB,CAAC0E,UAAU,KAAK,IAAf,IAAuBA,UAAU,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,UAAU,CAACZ,MAApE,IAA8E,CAAnG,EAAsG;MAClG;MACAY,UAAU,GAAG,KAAKD,oBAAL,CAA0BC,UAA1B,CAAb;IACH;;IACD,MAAM6C,UAAU,GAAG7C,UAAU,CAAC8C,QAAX,GAAsB7D,KAAtB,CAA4B,EAA5B,CAAnB;;IACA,IAAInB,cAAc,KAAK,IAAvB,EAA6B;MACzB,MAAMiF,QAAQ,GAAG/C,UAAU,CAACf,KAAX,CAAiB,GAAjB,CAAjB;MACA,KAAK+D,OAAL,GAAe,KAAKC,QAAL,CAAcF,QAAd,CAAf,CAFyB,CAGzB;;MACAjF,cAAc,GAAG,iBAAjB;IACH;;IACD,MAAMoF,GAAG,GAAG,EAAZ;;IACA,KAAK,IAAIhD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,UAAU,CAACZ,MAA/B,EAAuCc,CAAC,EAAxC,EAA4C;MACxC,IAAI,CAAC7B,EAAE,GAAG2B,UAAU,CAACE,CAAD,CAAhB,MAAyB,IAAzB,IAAiC7B,EAAE,KAAK,KAAK,CAA7C,GAAiD,KAAK,CAAtD,GAA0DA,EAAE,CAACa,KAAH,CAAS,KAAT,CAA9D,EAA+E;QAC3EgE,GAAG,CAACC,IAAJ,CAAS,CAAC7E,EAAE,GAAG0B,UAAU,CAACE,CAAD,CAAhB,MAAyB,IAAzB,IAAiC5B,EAAE,KAAK,KAAK,CAA7C,GAAiDA,EAAjD,GAAsD,EAA/D;MACH;IACJ;;IACD,IAAIR,cAAc,KAAK,UAAvB,EAAmC;MAC/B,KAAKsF,YAAL,GAAoBF,GAAG,CAAC9D,MAAJ,KAAe,EAAf,IAAqB8D,GAAG,CAAC9D,MAAJ,KAAe,EAAxD;;MACA,IAAI8D,GAAG,CAAC9D,MAAJ,GAAa,EAAjB,EAAqB;QACjB;QACAtB,cAAc,GAAG,oBAAjB;MACH,CAHD,MAIK;QACD;QACAA,cAAc,GAAG,gBAAjB;MACH;IACJ;;IACD,IAAIA,cAAc,CAACuF,UAAf,CAA0B,SAA1B,CAAJ,EAA0C;MACtC,IAAIrD,UAAU,CAACd,KAAX,CAAiB,aAAjB,KACA;MACAc,UAAU,CAACd,KAAX,CAAiB,oCAAjB,CAFJ,EAE4D;QACxD;QACAc,UAAU,GAAG,KAAKsD,eAAL,CAAqBtD,UAArB,CAAb;QACA,MAAM5B,SAAS,GAAG,KAAKyB,YAAL,CAAkB/B,cAAlB,CAAlB,CAHwD,CAIxD;;QACAkC,UAAU,GAAG,KAAKK,mBAAL,CAAyBL,UAAzB,EAAqC5B,SAArC,EAAgD,KAAK3C,aAArD,CAAb;MACH;;MACD,IAAIuE,UAAU,CAACjB,OAAX,CAAmB,GAAnB,IAA0B,CAA1B,IACA,CAAC,KAAKY,UAAL,CAAgBK,UAAU,CAACN,SAAX,CAAqB,CAArB,EAAwBM,UAAU,CAACjB,OAAX,CAAmB,GAAnB,CAAxB,CAAhB,CADL,EACwE;QACpE,MAAMwE,IAAI,GAAGvD,UAAU,CAACN,SAAX,CAAqB,CAArB,EAAwBM,UAAU,CAACjB,OAAX,CAAmB,GAAnB,IAA0B,CAAlD,CAAb,CADoE,CAEpE;;QACAiB,UAAU,GAAI,GAAEuD,IAAK,GAAEvD,UAAU,CAACN,SAAX,CAAqBM,UAAU,CAACjB,OAAX,CAAmB,GAAnB,CAArB,EAA8CiB,UAAU,CAACZ,MAAzD,CAAiE,EAAxF;MACH;;MACD,IAAI,KAAKO,UAAL,CAAgBK,UAAhB,CAAJ,EAAiC;QAC7BwC,MAAM,GAAGxC,UAAT;MACH,CAFD,MAGK;QACDwC,MAAM,GAAGxC,UAAU,CAACN,SAAX,CAAqB,CAArB,EAAwBM,UAAU,CAACZ,MAAX,GAAoB,CAA5C,CAAT;MACH;IACJ,CAtBD,MAuBK,IAAItB,cAAc,CAACuF,UAAf,CAA0B,WAA1B,CAAJ,EAA4C;MAC7C,IAAIrD,UAAU,CAACd,KAAX,CAAiB,WAAjB,KACAc,UAAU,CAACd,KAAX,CAAiB,SAAjB,CADA,IAEAc,UAAU,CAACd,KAAX,CAAiB,aAAjB,CAFA,IAGAc,UAAU,CAACd,KAAX,CAAiB,sCAAjB,CAHA,IAIAc,UAAU,CAACd,KAAX,CAAiB,eAAjB,CAJJ,EAIuC;QACnC;QACAc,UAAU,GAAG,KAAKsD,eAAL,CAAqBtD,UAArB,CAAb;MACH,CAR4C,CAS7C;;;MACAA,UAAU,GACNA,UAAU,CAACZ,MAAX,GAAoB,CAApB,IACIY,UAAU,CAAC,CAAD,CAAV,KAAkB,GADtB,IAEIA,UAAU,CAAC,CAAD,CAAV,KAAkB,KAAKxE,iBAF3B,IAGI,CAAC,KAAKsF,kBAAL,CAAwBd,UAAU,CAAC,CAAD,CAAlC,EAAuC,KAAKvE,aAA5C,EAA2D,KAAKD,iBAAhE,CAHL,IAII,CAACkG,UAJL,GAKM1B,UAAU,CAACT,KAAX,CAAiB,CAAjB,EAAoBS,UAAU,CAACZ,MAAX,GAAoB,CAAxC,CALN,GAMMY,UAPV;;MAQA,IAAI0B,UAAJ,EAAgB;QACZ;QACA1B,UAAU,GAAG,KAAKc,kBAAL,CAAwBd,UAAU,CAACA,UAAU,CAACZ,MAAX,GAAoB,CAArB,CAAlC,EAA2D,KAAK3D,aAAhE,EAA+E,KAAKD,iBAApF,IACPwE,UAAU,CAACT,KAAX,CAAiB,CAAjB,EAAoBS,UAAU,CAACZ,MAAX,GAAoB,CAAxC,CADO,GAEPY,UAFN;MAGH,CAvB4C,CAwB7C;MACA;;;MACA,MAAMwD,4BAA4B,GAAG,KAAK9C,uBAAL,CAA6B,KAAKlF,iBAAlC,CAArC;;MACA,IAAIiI,YAAY,GAAG,2CAA2CnE,OAA3C,CAAmDkE,4BAAnD,EAAiF,EAAjF,CAAnB,CA3B6C,CA4B7C;;MACA,IAAI9E,KAAK,CAACC,OAAN,CAAc,KAAKlD,aAAnB,CAAJ,EAAuC;QACnC,KAAK,MAAM6E,MAAX,IAAqB,KAAK7E,aAA1B,EAAyC;UACrCgI,YAAY,GAAGA,YAAY,CAACnE,OAAb,CAAqB,KAAKoB,uBAAL,CAA6BJ,MAA7B,CAArB,EAA2D,EAA3D,CAAf;QACH;MACJ,CAJD,MAKK;QACDmD,YAAY,GAAGA,YAAY,CAACnE,OAAb,CAAqB,KAAKoB,uBAAL,CAA6B,KAAKjF,aAAlC,CAArB,EAAuE,EAAvE,CAAf;MACH;;MACD,MAAMiI,iBAAiB,GAAG,IAAI/G,MAAJ,CAAW,MAAM8G,YAAN,GAAqB,GAAhC,CAA1B;;MACA,IAAIzD,UAAU,CAACd,KAAX,CAAiBwE,iBAAjB,KACC1D,UAAU,CAACZ,MAAX,KAAsB,CAAtB,IACG,KAAK0B,kBAAL,CAAwBd,UAAxB,EAAoC,KAAKvE,aAAzC,EAAwD,KAAKD,iBAA7D,CAFR,EAE0F;QACtF;QACAwE,UAAU,GAAGA,UAAU,CAACN,SAAX,CAAqB,CAArB,EAAwBM,UAAU,CAACZ,MAAX,GAAoB,CAA5C,CAAb;MACH;;MACD,MAAMhB,SAAS,GAAG,KAAKyB,YAAL,CAAkB/B,cAAlB,CAAlB,CA5C6C,CA6C7C;;MACAkC,UAAU,GAAG,KAAKK,mBAAL,CAAyBL,UAAzB,EAAqC5B,SAArC,EAAgD,KAAK3C,aAArD,CAAb;MACA,MAAMkI,SAAS,GAAG3D,UAAU,CAACV,OAAX,CAAmB,IAAI3C,MAAJ,CAAW6G,4BAAX,EAAyC,GAAzC,CAAnB,EAAkE,EAAlE,CAAlB;MACAhB,MAAM,GAAG,KAAKxE,qBAAL,CAA2B2F,SAA3B,EAAsC,KAAKnI,iBAA3C,EAA8D,KAAKC,aAAnE,EAAkF2C,SAAlF,CAAT;MACA,MAAMwF,UAAU,GAAGpB,MAAM,CAACzD,OAAP,CAAe,GAAf,IAAsBiB,UAAU,CAACjB,OAAX,CAAmB,GAAnB,CAAzC;MACA,MAAM8E,SAAS,GAAGrB,MAAM,CAACpD,MAAP,GAAgBY,UAAU,CAACZ,MAA7C;;MACA,IAAIyE,SAAS,GAAG,CAAZ,IAAiBrB,MAAM,CAAChB,QAAD,CAAN,KAAqB,GAA1C,EAA+C;QAC3CkB,cAAc,GAAG,IAAjB;QACA,IAAI3B,MAAM,GAAG,CAAb;;QACA,GAAG;UACC,KAAKA,MAAL,CAAY+C,GAAZ,CAAgBtC,QAAQ,GAAGT,MAA3B;;UACAA,MAAM;QACT,CAHD,QAGSA,MAAM,GAAG8C,SAHlB;MAIH,CAPD,MAQK,IAAKD,UAAU,KAAK,CAAf,IACNpC,QAAQ,GAAG,CADL,IAEN,EAAEgB,MAAM,CAACzD,OAAP,CAAe,GAAf,KAAuByC,QAAvB,IAAmCA,QAAQ,GAAG,CAAhD,CAFK,IAGJ,EAAEgB,MAAM,CAACzD,OAAP,CAAe,GAAf,KAAuByC,QAAvB,IAAmCA,QAAQ,GAAG,CAAhD,KAAsDqC,SAAS,IAAI,CAHnE,EAGuE;QACxE,KAAK9C,MAAL,CAAYgD,KAAZ;;QACArB,cAAc,GAAG,IAAjB;QACAC,KAAK,GAAGkB,SAAR,CAHwE,CAIxE;;QACArC,QAAQ,IAAIqC,SAAZ;;QACA,KAAK9C,MAAL,CAAY+C,GAAZ,CAAgBtC,QAAhB;MACH,CAVI,MAWA;QACD,KAAKT,MAAL,CAAYgD,KAAZ;MACH;IACJ,CAzEI,MA0EA;MACD,MACA;MACA,IAAI7D,CAAC,GAAG,CAAR,EAAW8D,WAAW,GAAGnB,UAAU,CAAC,CAAD,CAFnC,EAEwC3C,CAAC,GAAG2C,UAAU,CAACzD,MAFvD,EAE+Dc,CAAC,IAAI8D,WAAW,GAAG,CAACzF,EAAE,GAAGsE,UAAU,CAAC3C,CAAD,CAAhB,MAAyB,IAAzB,IAAiC3B,EAAE,KAAK,KAAK,CAA7C,GAAiDA,EAAjD,GAAsD,EAFxI,EAE4I;QACxI,IAAIgE,MAAM,KAAKzE,cAAc,CAACsB,MAA9B,EAAsC;UAClC;QACH;;QACD,IAAI,KAAK6E,gBAAL,CAAsBD,WAAtB,EAAmC,CAAC/D,EAAE,GAAGnC,cAAc,CAACyE,MAAD,CAApB,MAAkC,IAAlC,IAA0CtC,EAAE,KAAK,KAAK,CAAtD,GAA0DA,EAA1D,GAA+D,EAAlG,KACAnC,cAAc,CAACyE,MAAM,GAAG,CAAV,CAAd,KAA+B,GADnC,EACwC;UACpCC,MAAM,IAAIwB,WAAV;UACAzB,MAAM,IAAI,CAAV;QACH,CAJD,MAKK,IAAIzE,cAAc,CAACyE,MAAM,GAAG,CAAV,CAAd,KAA+B,GAA/B,IACLE,KADK,IAEL,KAAKwB,gBAAL,CAAsBD,WAAtB,EAAmC,CAACpC,EAAE,GAAG9D,cAAc,CAACyE,MAAM,GAAG,CAAV,CAApB,MAAsC,IAAtC,IAA8CX,EAAE,KAAK,KAAK,CAA1D,GAA8DA,EAA9D,GAAmE,EAAtG,CAFC,EAE0G;UAC3GY,MAAM,IAAIwB,WAAV;UACAzB,MAAM,IAAI,CAAV;UACAE,KAAK,GAAG,KAAR;QACH,CANI,MAOA,IAAI,KAAKwB,gBAAL,CAAsBD,WAAtB,EAAmC,CAACnC,EAAE,GAAG/D,cAAc,CAACyE,MAAD,CAApB,MAAkC,IAAlC,IAA0CV,EAAE,KAAK,KAAK,CAAtD,GAA0DA,EAA1D,GAA+D,EAAlG,KACL/D,cAAc,CAACyE,MAAM,GAAG,CAAV,CAAd,KAA+B,GAD9B,EACmC;UACpCC,MAAM,IAAIwB,WAAV;UACAvB,KAAK,GAAG,IAAR;QACH,CAJI,MAKA,IAAI3E,cAAc,CAACyE,MAAM,GAAG,CAAV,CAAd,KAA+B,GAA/B,IACL,KAAK0B,gBAAL,CAAsBD,WAAtB,EAAmC,CAAClC,EAAE,GAAGhE,cAAc,CAACyE,MAAM,GAAG,CAAV,CAApB,MAAsC,IAAtC,IAA8CT,EAAE,KAAK,KAAK,CAA1D,GAA8DA,EAA9D,GAAmE,EAAtG,CADC,EAC0G;UAC3GU,MAAM,IAAIwB,WAAV;UACAzB,MAAM,IAAI,CAAV;QACH,CAJI,MAKA,IAAI,KAAK0B,gBAAL,CAAsBD,WAAtB,EAAmC,CAACjC,EAAE,GAAGjE,cAAc,CAACyE,MAAD,CAApB,MAAkC,IAAlC,IAA0CR,EAAE,KAAK,KAAK,CAAtD,GAA0DA,EAA1D,GAA+D,EAAlG,CAAJ,EAA2G;UAC5G,IAAIjE,cAAc,CAACyE,MAAD,CAAd,KAA2B,GAA/B,EAAoC;YAChC,IAAI3C,MAAM,CAACoE,WAAD,CAAN,GAAsB,CAA1B,EAA6B;cACzBzB,MAAM,IAAI,CAAV;;cACA,KAAK2B,UAAL,CAAgBpG,cAAhB,EAAgCyE,MAAhC,EAAwCM,UAAU,CAACzD,MAAnD;;cACAc,CAAC;;cACD,IAAI,KAAK5D,gBAAT,EAA2B;gBACvBkG,MAAM,IAAI,GAAV;cACH;;cACD;YACH;UACJ;;UACD,IAAI1E,cAAc,CAACyE,MAAD,CAAd,KAA2B,GAA/B,EAAoC;YAChC,IAAIC,MAAM,KAAK,GAAX,IAAkB5C,MAAM,CAACoE,WAAD,CAAN,GAAsB,CAA5C,EAA+C;cAC3CzB,MAAM,IAAI,CAAV;cACArC,CAAC;cACD;YACH;UACJ;;UACD,IAAIpC,cAAc,CAACyE,MAAD,CAAd,KAA2B,GAA/B,EAAoC;YAChC,IAAI3C,MAAM,CAACoE,WAAD,CAAN,GAAsB,CAA1B,EAA6B;cACzBzB,MAAM,IAAI,CAAV;;cACA,KAAK2B,UAAL,CAAgBpG,cAAhB,EAAgCyE,MAAhC,EAAwCM,UAAU,CAACzD,MAAnD;;cACAc,CAAC;;cACD,IAAI,KAAK5D,gBAAT,EAA2B;gBACvBkG,MAAM,IAAI,GAAV;cACH;;cACD;YACH;UACJ;;UACD,IAAI1E,cAAc,CAACyE,MAAD,CAAd,KAA2B,GAA/B,EAAoC;YAChC,IAAI3C,MAAM,CAACoE,WAAD,CAAN,GAAsB,CAA1B,EAA6B;cACzBzB,MAAM,IAAI,CAAV;;cACA,KAAK2B,UAAL,CAAgBpG,cAAhB,EAAgCyE,MAAhC,EAAwCM,UAAU,CAACzD,MAAnD;;cACAc,CAAC;;cACD,IAAI,KAAK5D,gBAAT,EAA2B;gBACvBkG,MAAM,IAAI,GAAV;cACH;;cACD;YACH;UACJ;;UACD,MAAM2B,SAAS,GAAG,EAAlB;;UACA,IAAIrG,cAAc,CAACyE,MAAD,CAAd,KAA2B,GAA/B,EAAoC;YAChC,IAAK3C,MAAM,CAACoE,WAAD,CAAN,GAAsB,CAAtB,IAA2B,KAAK1H,gBAAjC,IACAsD,MAAM,CAACI,UAAU,CAACT,KAAX,CAAiBgD,MAAjB,EAAyBA,MAAM,GAAG,CAAlC,CAAD,CAAN,GAA+C4B,SAD/C,IAEAnE,UAAU,CAACuC,MAAM,GAAG,CAAV,CAAV,KAA2B,GAF/B,EAEoC;cAChCA,MAAM,IAAI,CAAV;;cACA,KAAK2B,UAAL,CAAgBpG,cAAhB,EAAgCyE,MAAhC,EAAwCM,UAAU,CAACzD,MAAnD;;cACAc,CAAC;;cACD,IAAI,KAAK5D,gBAAT,EAA2B;gBACvBkG,MAAM,IAAI,GAAV;cACH;;cACD;YACH;UACJ;;UACD,IAAI1E,cAAc,CAACyE,MAAD,CAAd,KAA2B,GAA/B,EAAoC;YAChC,MAAM6B,WAAW,GAAG,EAApB,CADgC,CAEhC;;YACA,MAAMC,WAAW,GAAG9B,MAAM,KAAK,CAAX,KACf3C,MAAM,CAACoE,WAAD,CAAN,GAAsB,CAAtB,IACGpE,MAAM,CAACI,UAAU,CAACT,KAAX,CAAiBgD,MAAjB,EAAyBA,MAAM,GAAG,CAAlC,CAAD,CAAN,GAA+C6B,WADlD,IAEGpE,UAAU,CAACuC,MAAM,GAAG,CAAV,CAAV,KAA2B,GAHf,CAApB,CAHgC,CAOhC;;YACA,MAAM+B,cAAc,GAAGtE,UAAU,CAACT,KAAX,CAAiBgD,MAAM,GAAG,CAA1B,EAA6BA,MAAM,GAAG,CAAtC,EAAyCnC,QAAzC,CAAkD,GAAlD,MACjBJ,UAAU,CAACuC,MAAM,GAAG,CAAV,CAAV,KAA2B,GAA3B,IACE3C,MAAM,CAACI,UAAU,CAACT,KAAX,CAAiBgD,MAAM,GAAG,CAA1B,EAA6BA,MAAM,GAAG,CAAtC,CAAD,CAAN,GAAmD6B,WADrD,IAEEpE,UAAU,CAACuC,MAAD,CAAV,KAAuB,GAF1B,IAGGvC,UAAU,CAACuC,MAAD,CAAV,KAAuB,GAH1B,IAIIvC,UAAU,CAACuC,MAAM,GAAG,CAAV,CAAV,KAA2B,GAA3B,IACG3C,MAAM,CAACI,UAAU,CAACT,KAAX,CAAiBgD,MAAM,GAAG,CAA1B,EAA6BA,MAA7B,CAAD,CAAN,GAA+C6B,WADlD,IAEGpE,UAAU,CAACuC,MAAM,GAAG,CAAV,CAAV,KAA2B,GANlC,IAOGvC,UAAU,CAACuC,MAAM,GAAG,CAAV,CAAV,KAA2B,GARZ,CAAvB,CARgC,CAiBhC;;YACA,MAAMgC,cAAc,GAAG3E,MAAM,CAACI,UAAU,CAACT,KAAX,CAAiBgD,MAAM,GAAG,CAA1B,EAA6BA,MAAM,GAAG,CAAtC,CAAD,CAAN,IAAoD4B,SAApD,IACnB,CAACnE,UAAU,CAACT,KAAX,CAAiBgD,MAAM,GAAG,CAA1B,EAA6BA,MAAM,GAAG,CAAtC,EAAyCnC,QAAzC,CAAkD,GAAlD,CADkB,IAEnBJ,UAAU,CAACuC,MAAM,GAAG,CAAV,CAAV,KAA2B,GAFR,KAGlB3C,MAAM,CAACI,UAAU,CAACT,KAAX,CAAiBgD,MAAjB,EAAyBA,MAAM,GAAG,CAAlC,CAAD,CAAN,GAA+C6B,WAA/C,IACGpE,UAAU,CAACuC,MAAM,GAAG,CAAV,CAAV,KAA2B,GAJZ,CAAvB,CAlBgC,CAuBhC;;YACA,MAAMiC,cAAc,GAAG5E,MAAM,CAACI,UAAU,CAACT,KAAX,CAAiBgD,MAAM,GAAG,CAA1B,EAA6BA,MAAM,GAAG,CAAtC,CAAD,CAAN,GAAmD4B,SAAnD,IACnB,CAACnE,UAAU,CAACT,KAAX,CAAiBgD,MAAM,GAAG,CAA1B,EAA6BA,MAAM,GAAG,CAAtC,EAAyCnC,QAAzC,CAAkD,GAAlD,CADkB,IAEnB,CAACJ,UAAU,CAACT,KAAX,CAAiBgD,MAAM,GAAG,CAA1B,EAA6BA,MAA7B,EAAqCnC,QAArC,CAA8C,GAA9C,CAFkB,IAGnBR,MAAM,CAACI,UAAU,CAACT,KAAX,CAAiBgD,MAAM,GAAG,CAA1B,EAA6BA,MAA7B,CAAD,CAAN,GAA+C6B,WAHnD,CAxBgC,CA4BhC;;YACA,MAAMK,cAAc,GAAG7E,MAAM,CAACI,UAAU,CAACT,KAAX,CAAiBgD,MAAM,GAAG,CAA1B,EAA6BA,MAAM,GAAG,CAAtC,CAAD,CAAN,IAAoD4B,SAApD,IACnB,CAACnE,UAAU,CAACT,KAAX,CAAiBgD,MAAM,GAAG,CAA1B,EAA6BA,MAAM,GAAG,CAAtC,EAAyCnC,QAAzC,CAAkD,GAAlD,CADkB,IAEnBJ,UAAU,CAACuC,MAAM,GAAG,CAAV,CAAV,KAA2B,GAFR,IAGnB3C,MAAM,CAACI,UAAU,CAACT,KAAX,CAAiBgD,MAAM,GAAG,CAA1B,EAA6BA,MAAM,GAAG,CAAtC,CAAD,CAAN,GAAmD6B,WAHvD;;YAIA,IAAKxE,MAAM,CAACoE,WAAD,CAAN,GAAsB,CAAtB,IAA2B,KAAK1H,gBAAjC,IACA+H,WADA,IAEAC,cAFA,IAGAC,cAHA,IAIAC,cAJA,IAKAC,cALJ,EAKoB;cAChBlC,MAAM,IAAI,CAAV;;cACA,KAAK2B,UAAL,CAAgBpG,cAAhB,EAAgCyE,MAAhC,EAAwCM,UAAU,CAACzD,MAAnD;;cACAc,CAAC;;cACD,IAAI,KAAK5D,gBAAT,EAA2B;gBACvBkG,MAAM,IAAI,GAAV;cACH;;cACD;YACH;UACJ;;UACDA,MAAM,IAAIwB,WAAV;UACAzB,MAAM;QACT,CAzGI,MA0GA,IAAIyB,WAAW,KAAK,GAAhB,IAAuBlG,cAAc,CAACyE,MAAD,CAAd,KAA2B,GAAtD,EAA2D;UAC5DC,MAAM,IAAIwB,WAAV;UACAzB,MAAM;QACT,CAHI,MAIA,IAAI,KAAKtB,qBAAL,CAA2BlC,OAA3B,CAAmC,CAACiD,EAAE,GAAGlE,cAAc,CAACyE,MAAD,CAApB,MAAkC,IAAlC,IAA0CP,EAAE,KAAK,KAAK,CAAtD,GAA0DA,EAA1D,GAA+D,EAAlG,MAA0G,CAAC,CAA/G,EAAkH;UACnHQ,MAAM,IAAI1E,cAAc,CAACyE,MAAD,CAAxB;UACAA,MAAM;;UACN,KAAK2B,UAAL,CAAgBpG,cAAhB,EAAgCyE,MAAhC,EAAwCM,UAAU,CAACzD,MAAnD;;UACAc,CAAC;QACJ,CALI,MAMA,IAAI,KAAKe,qBAAL,CAA2BlC,OAA3B,CAAmCiF,WAAnC,IAAkD,CAAC,CAAnD,IACL,KAAK9C,qBAAL,CAA2B,CAACe,EAAE,GAAGnE,cAAc,CAACyE,MAAD,CAApB,MAAkC,IAAlC,IAA0CN,EAAE,KAAK,KAAK,CAAtD,GAA0DA,EAA1D,GAA+D,EAA1F,CADK,KAEJ,CAACE,EAAE,GAAG,KAAKjB,qBAAL,CAA2B,CAACgB,EAAE,GAAGpE,cAAc,CAACyE,MAAD,CAApB,MAAkC,IAAlC,IAA0CL,EAAE,KAAK,KAAK,CAAtD,GAA0DA,EAA1D,GAA+D,EAA1F,CAAN,MAAyG,IAAzG,IAAiHC,EAAE,KAAK,KAAK,CAA7H,GAAiI,KAAK,CAAtI,GAA0IA,EAAE,CAACvF,QAFzI,CAAJ,EAEwJ;UACzJ,IAAI,CAAC,CAACiG,UAAU,CAACN,MAAD,CAAZ,IACAzE,cAAc,KAAK,iBADnB,IAEAA,cAAc,KAAK,gBAFnB,IAGAA,cAAc,KAAK,oBAHnB,IAIA,CAACA,cAAc,CAACoB,KAAf,CAAqB,UAArB,CAJL,EAIuC;YACnCsD,MAAM,IAAIK,UAAU,CAACN,MAAD,CAApB;UACH;;UACDA,MAAM;UACNrC,CAAC;QACJ,CAZI,MAaA,IAAI,KAAKpC,cAAL,CAAoByE,MAAM,GAAG,CAA7B,MAAoC,GAApC,IACL,KAAKmC,gBAAL,CAAsB,CAACtC,EAAE,GAAG,KAAKtE,cAAL,CAAoByE,MAAM,GAAG,CAA7B,CAAN,MAA2C,IAA3C,IAAmDH,EAAE,KAAK,KAAK,CAA/D,GAAmEA,EAAnE,GAAwE,EAA9F,CADK,IAEL,KAAKsC,gBAAL,CAAsBV,WAAtB,MAAuC,KAAKlG,cAAL,CAAoByE,MAAM,GAAG,CAA7B,CAFlC,IAGLE,KAHC,EAGM;UACPF,MAAM,IAAI,CAAV;UACAC,MAAM,IAAIwB,WAAV;QACH,CANI,MAOA,IAAI,KAAKlG,cAAL,CAAoByE,MAAM,GAAG,CAA7B,MAAoC,GAApC,IACL,KAAKmC,gBAAL,CAAsB,CAACrC,EAAE,GAAG,KAAKvE,cAAL,CAAoByE,MAAM,GAAG,CAA7B,CAAN,MAA2C,IAA3C,IAAmDF,EAAE,KAAK,KAAK,CAA/D,GAAmEA,EAAnE,GAAwE,EAA9F,CADK,IAEL,KAAKqC,gBAAL,CAAsBV,WAAtB,MAAuC,KAAKlG,cAAL,CAAoByE,MAAM,GAAG,CAA7B,CAFlC,IAGLE,KAHC,EAGM;UACPF,MAAM,IAAI,CAAV;UACAC,MAAM,IAAIwB,WAAV;QACH,CANI,MAOA,IAAI,KAAKpI,aAAL,IACL,KAAKqF,qBAAL,CAA2BlC,OAA3B,CAAmCiF,WAAnC,IAAkD,CAD7C,IAELA,WAAW,KAAK,KAAKnI,oBAFpB,EAE0C;UAC3C+G,QAAQ,GAAG,IAAX;QACH;MACJ;IACJ;;IACD,IAAIJ,MAAM,CAACpD,MAAP,GAAgB,CAAhB,KAAsBtB,cAAc,CAACsB,MAArC,IACA,KAAK6B,qBAAL,CAA2BlC,OAA3B,CAAmC,CAACuD,EAAE,GAAGxE,cAAc,CAACA,cAAc,CAACsB,MAAf,GAAwB,CAAzB,CAApB,MAAqD,IAArD,IAA6DkD,EAAE,KAAK,KAAK,CAAzE,GAA6EA,EAA7E,GAAkF,EAArH,MACI,CAAC,CAFT,EAEY;MACRE,MAAM,IAAI1E,cAAc,CAACA,cAAc,CAACsB,MAAf,GAAwB,CAAzB,CAAxB;IACH;;IACD,IAAIuF,WAAW,GAAGnD,QAAQ,GAAG,CAA7B;;IACA,OAAO,KAAKT,MAAL,CAAY6D,GAAZ,CAAgBD,WAAhB,CAAP,EAAqC;MACjChC,KAAK;MACLgC,WAAW;IACd;;IACD,IAAIE,WAAW,GAAGpD,UAAU,IAAI,CAAC3D,cAAc,CAACuF,UAAf,CAA0B,WAA1B,CAAf,GACZd,MADY,GAEZ,KAAKxB,MAAL,CAAY6D,GAAZ,CAAgBpD,QAAhB,IACImB,KADJ,GAEI,CAJV;;IAKA,IAAIC,QAAJ,EAAc;MACViC,WAAW;IACd;;IACDlD,EAAE,CAACkD,WAAD,EAAcnC,cAAd,CAAF;;IACA,IAAIC,KAAK,GAAG,CAAZ,EAAe;MACX,KAAK5B,MAAL,CAAYgD,KAAZ;IACH;;IACD,IAAIe,WAAW,GAAG,KAAlB;;IACA,IAAIpD,UAAJ,EAAgB;MACZoD,WAAW,GAAGjC,UAAU,CAACkC,KAAX,CAAkBC,IAAD,IAAU,KAAK/D,qBAAL,CAA2Bb,QAA3B,CAAoC4E,IAApC,CAA3B,CAAd;IACH;;IACD,IAAI3F,GAAG,GAAI,GAAE,KAAK9D,MAAO,GAAEuJ,WAAW,GAAG,EAAH,GAAQtC,MAAO,GAAE,KAAKlH,MAAO,EAAnE;;IACA,IAAIkH,MAAM,CAACpD,MAAP,KAAkB,CAAtB,EAAyB;MACrBC,GAAG,GAAI,GAAE,KAAK9D,MAAO,GAAEiH,MAAO,EAA9B;IACH;;IACD,OAAOnD,GAAP;EACH;;EACDqF,gBAAgB,CAACV,WAAD,EAAc;IAC1B,OAAO,KAAK/C,qBAAL,CAA2BV,IAA3B,CAAiC0E,GAAD,IAASA,GAAG,KAAKjB,WAAjD,CAAP;EACH;;EACDC,gBAAgB,CAACD,WAAD,EAAckB,UAAd,EAA0B;IACtC,IAAI7G,EAAJ,EAAQC,EAAR,EAAYC,EAAZ;;IACA,KAAK2C,qBAAL,GAA6B,KAAKI,aAAL,GACvB,KAAKA,aADkB,GAEvB,KAAKJ,qBAFX;IAGA,OAAQ,CAAC3C,EAAE,GAAI,CAAC,CAACF,EAAE,GAAG,KAAK6C,qBAAL,CAA2BgE,UAA3B,CAAN,MAAkD,IAAlD,IAA0D7G,EAAE,KAAK,KAAK,CAAtE,GAA0E,KAAK,CAA/E,GAAmFA,EAAE,CAAC3B,OAAvF,MACV,CAAC4B,EAAE,GAAG,KAAK4C,qBAAL,CAA2BgE,UAA3B,CAAN,MAAkD,IAAlD,IAA0D5G,EAAE,KAAK,KAAK,CAAtE,GAA0E,KAAK,CAA/E,GAAmFA,EAAE,CAAC5B,OAAH,CAAW+C,IAAX,CAAgBuE,WAAhB,CADzE,CAAP,MACoH,IADpH,IAC4HzF,EAAE,KAAK,KAAK,CADxI,GAC4IA,EAD5I,GACiJ,KADzJ;EAEH;;EACD+E,eAAe,CAACrF,GAAD,EAAM;IACjB,OAAOA,GAAG,CACLgB,KADE,CACI,EADJ,EAEFkG,MAFE,CAEK,CAACjF,CAAD,EAAIkF,GAAJ,KAAY;MACpB,MAAMC,eAAe,GAAG,OAAO,KAAK5J,aAAZ,KAA8B,QAA9B,GAClByE,CAAC,KAAK,KAAKzE,aADO,GAElB;MACE,KAAKA,aAAL,CAAmB2E,QAAnB,CAA4BF,CAA5B,CAHR;MAIA,OAAQA,CAAC,CAAChB,KAAF,CAAQ,QAAR,KACJgB,CAAC,KAAK,KAAK1E,iBADP,IAEJ6J,eAFI,IAGHnF,CAAC,KAAK,GAAN,IAAakF,GAAG,KAAK,CAArB,IAA0B,KAAKjJ,oBAHpC;IAIH,CAXM,EAYF6C,IAZE,CAYG,EAZH,CAAP;EAaH;;EACD0B,uBAAuB,CAACsE,IAAD,EAAO;IAC1B;IACA;IACA;IACA,IAAIA,IAAJ,EAAU;MACN,MAAMM,aAAa,GAAG,cAAtB;MACA,OAAON,IAAI,KAAK,GAAT,GAAe,KAAf,GAAuBM,aAAa,CAACvG,OAAd,CAAsBiG,IAAtB,KAA+B,CAA/B,GAAoC,KAAIA,IAAK,EAA7C,GAAiDA,IAA/E;IACH;;IACD,OAAOA,IAAP;EACH;;EACDd,UAAU,CAACpG,cAAD,EAAiByE,MAAjB,EAAyBgD,WAAzB,EAAsC;IAC5C,MAAM1B,SAAS,GAAG,QAAQpE,IAAR,CAAa3B,cAAc,CAACyB,KAAf,CAAqB,CAArB,EAAwBgD,MAAxB,CAAb,IACZgD,WADY,GAEZhD,MAFN;;IAGA,KAAKxB,MAAL,CAAY+C,GAAZ,CAAgBD,SAAS,GAAG,KAAKtI,MAAL,CAAY6D,MAAxB,IAAkC,CAAlD;EACH;;EACD0B,kBAAkB,CAAC0E,KAAD,EAAQC,aAAR,EAAuBC,aAAvB,EAAsC;IACpD,OAAOhH,KAAK,CAACC,OAAN,CAAc8G,aAAd,IACDA,aAAa,CAACN,MAAd,CAAsBrG,CAAD,IAAOA,CAAC,KAAK4G,aAAlC,EAAiDtF,QAAjD,CAA0DoF,KAA1D,CADC,GAEDA,KAAK,KAAKC,aAFhB;EAGH;;EACDxC,QAAQ,CAACF,QAAD,EAAW;IACf,OAAO,EAAEA,QAAQ,CAAC3D,MAAT,KAAoB,CAApB,IACL,CAAC2D,QAAQ,CAAC4C,IAAT,CAAc,CAACH,KAAD,EAAQI,KAAR,KAAkB;MAC7B,IAAI7C,QAAQ,CAAC3D,MAAT,KAAoBwG,KAAK,GAAG,CAAhC,EAAmC;QAC/B,OAAOJ,KAAK,KAAK,EAAV,IAAgB5F,MAAM,CAAC4F,KAAD,CAAN,GAAgB,GAAvC;MACH;;MACD,OAAOA,KAAK,KAAK,EAAV,IAAgB5F,MAAM,CAAC4F,KAAK,CAAC9F,SAAN,CAAgB,CAAhB,EAAmB,CAAnB,CAAD,CAAN,GAAgC,GAAvD;IACH,CALA,CADE,CAAP;EAOH;;AAxgBoB;;AA0gBzB/B,kBAAkB,CAACkI,IAAnB;EAAA,iBAA+GlI,kBAA/G,EAAqGzD,EAArG,UAAmJgB,MAAnJ;AAAA;;AACAyC,kBAAkB,CAACmI,KAAnB,kBADqG5L,EACrG;EAAA,OAAmHyD,kBAAnH;EAAA,SAAmHA,kBAAnH;AAAA;;AACA;EAAA,mDAFqGzD,EAErG,mBAA2FyD,kBAA3F,EAA2H,CAAC;IAChHoI,IAAI,EAAE1L;EAD0G,CAAD,CAA3H,EAE4B,YAAY;IAChC,OAAO,CAAC;MAAE0L,IAAI,EAAE/J,SAAR;MAAmBgK,UAAU,EAAE,CAAC;QACxBD,IAAI,EAAEzL,MADkB;QAExB2L,IAAI,EAAE,CAAC/K,MAAD;MAFkB,CAAD;IAA/B,CAAD,CAAP;EAIH,CAPL;AAAA;;AASA,MAAMgL,WAAN,SAA0BvI,kBAA1B,CAA6C;EACzCC,WAAW,CAACuI,QAAD,EAAWtI,OAAX,EAAoBuI,WAApB,EAAiCC,SAAjC,EAA4C;IACnD,MAAMxI,OAAN;IACA,KAAKsI,QAAL,GAAgBA,QAAhB;IACA,KAAKtI,OAAL,GAAeA,OAAf;IACA,KAAKuI,WAAL,GAAmBA,WAAnB;IACA,KAAKC,SAAL,GAAiBA,SAAjB;IACA,KAAKvI,cAAL,GAAsB,EAAtB;IACA,KAAKwI,aAAL,GAAqB,KAArB;IACA,KAAKzK,oBAAL,GAA4B,GAA5B;IACA,KAAK0K,WAAL,GAAmB,EAAnB;IACA,KAAKC,QAAL,GAAgB,IAAhB;IACA,KAAKC,MAAL,GAAc,IAAd;IACA;AACR;AACA;AACA;;IACQ,KAAKC,YAAL,GAAoB,KAApB;IACA,KAAKC,WAAL,GAAmB,KAAnB;IACA,KAAKpK,mBAAL,GAA2B,KAA3B,CAlBmD,CAmBnD;;IACA,KAAKqK,QAAL,GAAiBC,CAAD,IAAO,CAAG,CAA1B;EACH,CAtBwC,CAuBzC;;;EACAtF,SAAS,CAACvB,UAAD,EAAalC,cAAb,EAA6B0D,QAAQ,GAAG,CAAxC,EAA2CC,UAAU,GAAG,KAAxD,EAA+DC,UAAU,GAAG,KAA5E,EACT;EACAC,EAAE,GAAG,MAAM,CAAG,CAFL,EAEO;IACZ,IAAItD,EAAJ;;IACA,IAAI,CAACP,cAAL,EAAqB;MACjB,OAAOkC,UAAU,KAAK,KAAKjC,WAApB,GAAkC,KAAKA,WAAvC,GAAqDiC,UAA5D;IACH;;IACD,KAAKuG,WAAL,GAAmB,KAAK3K,aAAL,GAAqB,KAAKkL,eAAL,EAArB,GAA8C,EAAjE;;IACA,IAAI,KAAKhJ,cAAL,KAAwB,IAAxB,IAAgC,KAAKlC,aAAzC,EAAwD;MACpD,KAAK2K,WAAL,GAAmB,KAAKO,eAAL,CAAqB9G,UAAU,IAAI,GAAnC,CAAnB;IACH;;IACD,IAAI,KAAKlC,cAAL,KAAwB,UAAxB,IAAsC,KAAKlC,aAA/C,EAA8D;MAC1D,KAAK2K,WAAL,GAAmB,KAAKO,eAAL,CAAqB9G,UAAU,IAAI,GAAnC,CAAnB;IACH;;IACD,IAAI,CAACA,UAAD,IAAe,KAAKpE,aAAxB,EAAuC;MACnC,KAAKmL,iBAAL,CAAuB,KAAKxL,MAA5B;MACA,OAAO,KAAKA,MAAL,GAAc,KAAKgL,WAA1B;IACH;;IACD,MAAMS,SAAS,GAAG,CAAC,CAAChH,UAAF,IAAgB,OAAO,KAAKwG,QAAZ,KAAyB,QAAzC,GACZ,CAACnI,EAAE,GAAG2B,UAAU,CAAC,KAAKwG,QAAN,CAAhB,MAAqC,IAArC,IAA6CnI,EAAE,KAAK,KAAK,CAAzD,GAA6DA,EAA7D,GAAkE,EADtD,GAEZ,EAFN;IAGA,IAAI4I,aAAa,GAAG,EAApB;;IACA,IAAI,KAAKlL,WAAL,KAAqBC,SAArB,IAAkC,CAAC,KAAK0K,YAA5C,EAA0D;MACtD,IAAIQ,YAAY,GAAG,KAAKnJ,WAAL,CAAiBkB,KAAjB,CAAuB,EAAvB,CAAnB,CADsD,CAEtD;MACA;;MACAe,UAAU,KAAK,EAAf,IAAqBkH,YAAY,CAAC9H,MAAlC,GACM,OAAO,KAAKoH,QAAZ,KAAyB,QAAzB,IAAqC,OAAO,KAAKC,MAAZ,KAAuB,QAA5D,GACIzG,UAAU,CAACZ,MAAX,GAAoB8H,YAAY,CAAC9H,MAAjC,GACI8H,YAAY,CAACC,MAAb,CAAoB,KAAKX,QAAzB,EAAmC,CAAnC,EAAsCQ,SAAtC,CADJ,GAEIhH,UAAU,CAACZ,MAAX,GAAoB8H,YAAY,CAAC9H,MAAjC,GACI8H,YAAY,CAAC9H,MAAb,GAAsBY,UAAU,CAACZ,MAAjC,KAA4C,CAA5C,GACI8H,YAAY,CAACC,MAAb,CAAoB,KAAKX,QAAL,GAAgB,CAApC,EAAuC,CAAvC,CADJ,GAEIU,YAAY,CAACC,MAAb,CAAoB,KAAKX,QAAzB,EAAmC,KAAKC,MAAL,GAAc,KAAKD,QAAtD,CAHR,GAII,IAPZ,GAQI,IATV,GAUOU,YAAY,GAAG,EAVtB;;MAWA,IAAI,KAAKtL,aAAT,EAAwB;QACpB;QACAoE,UAAU,GAAG,KAAKoH,UAAL,CAAgBpH,UAAhB,CAAb;MACH,CAlBqD,CAmBtD;;;MACAiH,aAAa,GACT,KAAKlJ,WAAL,CAAiBqB,MAAjB,IAA2B8H,YAAY,CAAC9H,MAAb,IAAuBY,UAAU,CAACZ,MAA7D,GACM,KAAKiI,iBAAL,CAAuBH,YAAY,CAAClI,IAAb,CAAkB,EAAlB,CAAvB,CADN,GAEMgB,UAHV;IAIH;;IACD,IAAI,KAAKpE,aAAT,EAAwB;MACpB;MACAoE,UAAU,GAAG,KAAKoH,UAAL,CAAgBpH,UAAhB,CAAb;IACH;;IACDiH,aAAa,GAAGK,OAAO,CAACL,aAAD,CAAP,IAA0BA,aAAa,CAAC7H,MAAxC,GAAiD6H,aAAjD,GAAiEjH,UAAjF;IACA,MAAMwC,MAAM,GAAG,MAAMjB,SAAN,CAAgB0F,aAAhB,EAA+BnJ,cAA/B,EAA+C0D,QAA/C,EAAyDC,UAAzD,EAAqEC,UAArE,EAAiFC,EAAjF,CAAf;IACA,KAAK5D,WAAL,GAAmB,KAAKwJ,cAAL,CAAoB/E,MAApB,CAAnB,CAnDY,CAoDZ;IACA;;IACA,IAAI,KAAKhH,iBAAL,KAA2B,GAA3B,IAAkC,KAAKC,aAAL,KAAuB,GAA7D,EAAkE;MAC9D,KAAKA,aAAL,GAAqB,GAArB;IACH,CAxDW,CAyDZ;;;IACA,IAAI,KAAKqC,cAAL,CAAoBuF,UAApB,CAA+B,WAA/B,KAA+C,KAAKvH,qBAAL,KAA+B,IAAlF,EAAwF;MACpF,KAAKmF,qBAAL,GAA6B,KAAKA,qBAAL,CAA2BkE,MAA3B,CAAmCqC,IAAD,IAAU,CAAC,KAAK1G,kBAAL,CAAwB0G,IAAxB,EAA8B,KAAK/L,aAAnC,EAAkD,KAAKD,iBAAvD,CAA7C,CAAuH;MAAvH,CAA7B;IAEH;;IACD,KAAKuL,iBAAL,CAAuBvE,MAAvB;;IACA,IAAI,CAAC,KAAK5G,aAAV,EAAyB;MACrB,IAAI,KAAKG,WAAT,EAAsB;QAClB,OAAOyG,MAAM,IAAIA,MAAM,CAACpD,MAAjB,GACD,KAAKqI,SAAL,CAAejF,MAAf,EAAuB,KAAK1E,cAA5B,CADC,GAED0E,MAFN;MAGH;;MACD,OAAOA,MAAP;IACH;;IACD,MAAMkF,MAAM,GAAGlF,MAAM,CAACpD,MAAtB;IACA,MAAMuI,SAAS,GAAG,KAAKpM,MAAL,GAAc,KAAKgL,WAArC;;IACA,IAAI,KAAKzI,cAAL,CAAoBsC,QAApB,CAA6B,GAA7B,CAAJ,EAAuC;MACnC,MAAMwH,iBAAiB,GAAG,KAAKC,oBAAL,CAA0BrF,MAA1B,CAA1B;;MACA,OAAOA,MAAM,GAAGmF,SAAS,CAACpI,KAAV,CAAgBmI,MAAM,GAAGE,iBAAzB,CAAhB;IACH,CAHD,MAIK,IAAI,KAAK9J,cAAL,KAAwB,IAAxB,IAAgC,KAAKA,cAAL,KAAwB,UAA5D,EAAwE;MACzE,OAAO0E,MAAM,GAAGmF,SAAhB;IACH;;IACD,OAAOnF,MAAM,GAAGmF,SAAS,CAACpI,KAAV,CAAgBmI,MAAhB,CAAhB;EACH,CA3GwC,CA4GzC;;;EACAG,oBAAoB,CAACrC,KAAD,EAAQ;IACxB,MAAMsC,KAAK,GAAG,eAAd;IACA,IAAI5I,KAAK,GAAG4I,KAAK,CAACC,IAAN,CAAWvC,KAAX,CAAZ;IACA,IAAIoC,iBAAiB,GAAG,CAAxB;;IACA,OAAO1I,KAAK,IAAI,IAAhB,EAAsB;MAClB0I,iBAAiB,IAAI,CAArB;MACA1I,KAAK,GAAG4I,KAAK,CAACC,IAAN,CAAWvC,KAAX,CAAR;IACH;;IACD,OAAOoC,iBAAP;EACH;;EACDI,iBAAiB,CAACxG,QAAD,EAAWC,UAAX,EAAuBC,UAAvB,EACjB;EACAC,EAAE,GAAG,MAAM,CAAG,CAFG,EAED;IACZ,MAAMsG,WAAW,GAAG,KAAK7B,WAAL,CAAiB8B,aAArC;IACAD,WAAW,CAACzC,KAAZ,GAAoB,KAAKjE,SAAL,CAAe0G,WAAW,CAACzC,KAA3B,EAAkC,KAAK1H,cAAvC,EAAuD0D,QAAvD,EAAiEC,UAAjE,EAA6EC,UAA7E,EAAyFC,EAAzF,CAApB;;IACA,IAAIsG,WAAW,KAAK,KAAKE,iBAAL,EAApB,EAA8C;MAC1C;IACH;;IACD,KAAKC,iBAAL;EACH;;EACDX,SAAS,CAACzH,UAAD,EAAalC,cAAb,EAA6B;IAClC,OAAOkC,UAAU,CACZf,KADE,CACI,EADJ,EAEFJ,GAFE,CAEE,CAACwJ,IAAD,EAAOzC,KAAP,KAAiB;MACtB,IAAIvH,EAAJ,EAAQC,EAAR,EAAYC,EAAZ,EAAgB0B,EAAhB,EAAoB2B,EAApB;;MACA,IAAI,KAAKV,qBAAL,IACA,KAAKA,qBAAL,CAA2B,CAAC7C,EAAE,GAAGP,cAAc,CAAC8H,KAAD,CAApB,MAAiC,IAAjC,IAAyCvH,EAAE,KAAK,KAAK,CAArD,GAAyDA,EAAzD,GAA8D,EAAzF,CADA,KAEC,CAACE,EAAE,GAAG,KAAK2C,qBAAL,CAA2B,CAAC5C,EAAE,GAAGR,cAAc,CAAC8H,KAAD,CAApB,MAAiC,IAAjC,IAAyCtH,EAAE,KAAK,KAAK,CAArD,GAAyDA,EAAzD,GAA8D,EAAzF,CAAN,MAAwG,IAAxG,IAAgHC,EAAE,KAAK,KAAK,CAA5H,GAAgI,KAAK,CAArI,GAAyIA,EAAE,CAACzB,MAF7I,CAAJ,EAE0J;QACtJ,OAAO,CAAC8E,EAAE,GAAG,KAAKV,qBAAL,CAA2B,CAACjB,EAAE,GAAGnC,cAAc,CAAC8H,KAAD,CAApB,MAAiC,IAAjC,IAAyC3F,EAAE,KAAK,KAAK,CAArD,GAAyDA,EAAzD,GAA8D,EAAzF,CAAN,MAAwG,IAAxG,IAAgH2B,EAAE,KAAK,KAAK,CAA5H,GAAgI,KAAK,CAArI,GAAyIA,EAAE,CAAC9E,MAAnJ;MACH;;MACD,OAAOuL,IAAP;IACH,CAVM,EAWFrJ,IAXE,CAWG,EAXH,CAAP;EAYH,CA9IwC,CA+IzC;;;EACAuI,cAAc,CAAClI,GAAD,EAAM;IAChB,MAAMiJ,OAAO,GAAGjJ,GAAG,CAACJ,KAAJ,CAAU,EAAV,EAAckG,MAAd,CAAqB,CAACrI,MAAD,EAASoD,CAAT,KAAe;MAChD,IAAI7B,EAAJ;;MACA,MAAMkK,QAAQ,GAAG,CAAClK,EAAE,GAAG,KAAKP,cAAL,CAAoBoC,CAApB,CAAN,MAAkC,IAAlC,IAA0C7B,EAAE,KAAK,KAAK,CAAtD,GAA0DA,EAA1D,GAA+D,EAAhF;MACA,OAAQ,KAAK4F,gBAAL,CAAsBnH,MAAtB,EAA8ByL,QAA9B,KACH,KAAKtH,qBAAL,CAA2Bb,QAA3B,CAAoCmI,QAApC,KAAiDzL,MAAM,KAAKyL,QADjE;IAEH,CALe,CAAhB;;IAMA,IAAID,OAAO,CAACtJ,IAAR,CAAa,EAAb,MAAqBK,GAAzB,EAA8B;MAC1B,OAAOiJ,OAAO,CAACtJ,IAAR,CAAa,EAAb,CAAP;IACH;;IACD,OAAOK,GAAP;EACH;;EACDgI,iBAAiB,CAACrH,UAAD,EAAa;IAC1B,IAAIwI,eAAe,GAAG,EAAtB;IACA,MAAMvB,aAAa,GAAIjH,UAAU,IAC7BA,UAAU,CAACf,KAAX,CAAiB,EAAjB,EAAqBJ,GAArB,CAAyB,CAAC4J,UAAD,EAAa7C,KAAb,KAAuB;MAC5C,IAAIvH,EAAJ;;MACA,IAAI,KAAK4C,qBAAL,CAA2Bb,QAA3B,CAAoC,CAAC/B,EAAE,GAAG2B,UAAU,CAAC4F,KAAK,GAAG,CAAT,CAAhB,MAAiC,IAAjC,IAAyCvH,EAAE,KAAK,KAAK,CAArD,GAAyDA,EAAzD,GAA8D,EAAlG,KACA2B,UAAU,CAAC4F,KAAK,GAAG,CAAT,CAAV,KAA0B,KAAK9H,cAAL,CAAoB8H,KAAK,GAAG,CAA5B,CAD9B,EAC8D;QAC1D4C,eAAe,GAAGC,UAAlB;QACA,OAAOzI,UAAU,CAAC4F,KAAK,GAAG,CAAT,CAAjB;MACH;;MACD,IAAI4C,eAAe,CAACpJ,MAApB,EAA4B;QACxB,MAAMsJ,aAAa,GAAGF,eAAtB;QACAA,eAAe,GAAG,EAAlB;QACA,OAAOE,aAAP;MACH;;MACD,OAAOD,UAAP;IACH,CAbD,CADkB,IAelB,EAfJ;IAgBA,OAAOxB,aAAa,CAACjI,IAAd,CAAmB,EAAnB,CAAP;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACI2J,cAAc,CAACnD,KAAD,EAAQ;IAClB,IAAI,CAACA,KAAD,IAAUA,KAAK,KAAK,CAAxB,EAA2B;MACvB,OAAOoD,MAAM,CAACpD,KAAD,CAAb;IACH;;IACD,OAAO5F,MAAM,CAAC4F,KAAD,CAAN,CAAcqD,cAAd,CAA6B,UAA7B,EAAyC;MAC5CC,WAAW,EAAE,KAD+B;MAE5CC,qBAAqB,EAAE;IAFqB,CAAzC,CAAP;EAIH;;EACDjC,eAAe,CAACkC,QAAD,EAAW;IACtB,IAAI,KAAKpN,aAAL,IAAsB,CAAC,CAAC,KAAKK,mBAAjC,EAAsD;MAClD,IAAI,KAAK6B,cAAL,CAAoBsB,MAApB,KAA+B,KAAKnD,mBAAL,CAAyBmD,MAA5D,EAAoE;QAChE,MAAM,IAAI6J,KAAJ,CAAU,oDAAV,CAAN;MACH,CAFD,MAGK;QACD,OAAO,KAAKhN,mBAAZ;MACH;IACJ,CAPD,MAQK,IAAI,KAAKL,aAAT,EAAwB;MACzB,IAAIoN,QAAJ,EAAc;QACV,IAAI,KAAKlL,cAAL,KAAwB,IAA5B,EAAkC;UAC9B,OAAO,KAAKoL,WAAL,CAAiBF,QAAjB,CAAP;QACH;;QACD,IAAI,KAAKlL,cAAL,KAAwB,UAA5B,EAAwC;UACpC,OAAO,KAAKqL,gBAAL,CAAsBH,QAAtB,CAAP;QACH;MACJ;;MACD,OAAO,KAAKlL,cAAL,CAAoBwB,OAApB,CAA4B,KAA5B,EAAmC,KAAKzD,oBAAxC,CAAP;IACH;;IACD,OAAO,EAAP;EACH;;EACDuM,iBAAiB,GAAG;IAChB,MAAMH,WAAW,GAAG,KAAK7B,WAAL,CAAiB8B,aAArC;;IACA,IAAI,KAAKxM,eAAL,IACA,KAAKH,MAAL,CAAY6D,MAAZ,GAAqB,KAAKtB,cAAL,CAAoBsB,MAAzC,GAAkD,KAAK9D,MAAL,CAAY8D,MAA9D,KACI6I,WAAW,CAACzC,KAAZ,CAAkBlG,OAAlB,CAA0B,IAA1B,EAAgC,EAAhC,EAAoCF,MAF5C,EAEoD;MAChD,KAAKgK,mBAAL,GAA2B,CAAC,OAAD,EAAU,EAAV,CAA3B;MACA,KAAK7H,SAAL,CAAe0G,WAAW,CAACzC,KAA3B,EAAkC,KAAK1H,cAAvC;IACH;EACJ;;EACsB,IAAnBsL,mBAAmB,CAAC,CAACC,IAAD,EAAO7D,KAAP,CAAD,EAAgB;IACnC8D,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,MAAM,KAAKnD,SAAL,CAAeoD,WAAf,CAA2B,KAAKrD,WAAL,CAAiB8B,aAA5C,EAA2DmB,IAA3D,EAAiE7D,KAAjE,CAA7B;EACH;;EACDkE,sBAAsB,CAACrI,IAAD,EAAO;IACzB,MAAMsI,KAAK,GAAGtI,IAAI,CACbpC,KADS,CACH,EADG,EAETkG,MAFS,CAEDqC,IAAD,IAAU,KAAK9C,gBAAL,CAAsB8C,IAAtB,CAFR,CAAd;IAGA,OAAOmC,KAAK,CAACvK,MAAb;EACH;;EACDgI,UAAU,CAACpH,UAAD,EAAa;IACnB,OAAO,KAAK4J,WAAL,CAAiB,KAAKC,aAAL,CAAmB,KAAKC,aAAL,CAAmB9J,UAAnB,CAAnB,CAAjB,EAAqE,KAAKiB,qBAAL,CAA2B8I,MAA3B,CAAkC,GAAlC,EAAuCA,MAAvC,CAA8C,KAAKlO,oBAAnD,CAArE,CAAP;EACH;;EACDqN,WAAW,CAACF,QAAD,EAAW;IAClB,IAAI3K,EAAJ;;IACA,IAAI2K,QAAQ,KAAK,GAAjB,EAAsB;MAClB,OAAQ,GAAE,KAAKnN,oBAAqB,IAAG,KAAKA,oBAAqB,IAAG,KAAKA,oBAAqB,IAAG,KAAKA,oBAAqB,EAA3H;IACH;;IACD,MAAMqH,GAAG,GAAG,EAAZ;;IACA,KAAK,IAAIhD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8I,QAAQ,CAAC5J,MAA7B,EAAqCc,CAAC,EAAtC,EAA0C;MACtC,MAAMsF,KAAK,GAAG,CAACnH,EAAE,GAAG2K,QAAQ,CAAC9I,CAAD,CAAd,MAAuB,IAAvB,IAA+B7B,EAAE,KAAK,KAAK,CAA3C,GAA+CA,EAA/C,GAAoD,EAAlE;;MACA,IAAI,CAACmH,KAAL,EAAY;QACR;MACH;;MACD,IAAIA,KAAK,CAACtG,KAAN,CAAY,KAAZ,CAAJ,EAAwB;QACpBgE,GAAG,CAACC,IAAJ,CAASqC,KAAT;MACH;IACJ;;IACD,IAAItC,GAAG,CAAC9D,MAAJ,IAAc,CAAlB,EAAqB;MACjB,OAAQ,GAAE,KAAKvD,oBAAqB,IAAG,KAAKA,oBAAqB,IAAG,KAAKA,oBAAqB,EAA9F;IACH;;IACD,IAAIqH,GAAG,CAAC9D,MAAJ,GAAa,CAAb,IAAkB8D,GAAG,CAAC9D,MAAJ,IAAc,CAApC,EAAuC;MACnC,OAAQ,GAAE,KAAKvD,oBAAqB,IAAG,KAAKA,oBAAqB,EAAjE;IACH;;IACD,IAAIqH,GAAG,CAAC9D,MAAJ,GAAa,CAAb,IAAkB8D,GAAG,CAAC9D,MAAJ,IAAc,CAApC,EAAuC;MACnC,OAAO,KAAKvD,oBAAZ;IACH;;IACD,IAAIqH,GAAG,CAAC9D,MAAJ,GAAa,CAAb,IAAkB8D,GAAG,CAAC9D,MAAJ,IAAc,EAApC,EAAwC;MACpC,OAAO,EAAP;IACH;;IACD,OAAO,EAAP;EACH;;EACD+J,gBAAgB,CAACH,QAAD,EAAW;IACvB,IAAI3K,EAAJ;;IACA,MAAM2L,GAAG,GAAI,GAAE,KAAKnO,oBAAqB,GAAE,KAAKA,oBAAqB,GAAE,KAAKA,oBAAqB,EAArF,GACP,IAAG,KAAKA,oBAAqB,GAAE,KAAKA,oBAAqB,GAAE,KAAKA,oBAAqB,EAD9E,GAEP,IAAG,KAAKA,oBAAqB,GAAE,KAAKA,oBAAqB,GAAE,KAAKA,oBAAqB,EAF9E,GAGP,IAAG,KAAKA,oBAAqB,GAAE,KAAKA,oBAAqB,EAH9D;IAIA,MAAMoO,IAAI,GAAI,GAAE,KAAKpO,oBAAqB,GAAE,KAAKA,oBAAqB,EAAzD,GACR,IAAG,KAAKA,oBAAqB,GAAE,KAAKA,oBAAqB,GAAE,KAAKA,oBAAqB,EAD7E,GAER,IAAG,KAAKA,oBAAqB,GAAE,KAAKA,oBAAqB,GAAE,KAAKA,oBAAqB,EAF7E,GAGR,IAAG,KAAKA,oBAAqB,GAAE,KAAKA,oBAAqB,GAAE,KAAKA,oBAAqB,GAAE,KAAKA,oBAAqB,EAHzG,GAIR,IAAG,KAAKA,oBAAqB,GAAE,KAAKA,oBAAqB,EAJ9D;;IAKA,IAAImN,QAAQ,KAAK,GAAjB,EAAsB;MAClB,OAAOgB,GAAP;IACH;;IACD,MAAM9G,GAAG,GAAG,EAAZ;;IACA,KAAK,IAAIhD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8I,QAAQ,CAAC5J,MAA7B,EAAqCc,CAAC,EAAtC,EAA0C;MACtC,MAAMsF,KAAK,GAAG,CAACnH,EAAE,GAAG2K,QAAQ,CAAC9I,CAAD,CAAd,MAAuB,IAAvB,IAA+B7B,EAAE,KAAK,KAAK,CAA3C,GAA+CA,EAA/C,GAAoD,EAAlE;;MACA,IAAI,CAACmH,KAAL,EAAY;QACR;MACH;;MACD,IAAIA,KAAK,CAACtG,KAAN,CAAY,KAAZ,CAAJ,EAAwB;QACpBgE,GAAG,CAACC,IAAJ,CAASqC,KAAT;MACH;IACJ;;IACD,IAAItC,GAAG,CAAC9D,MAAJ,IAAc,CAAlB,EAAqB;MACjB,OAAO4K,GAAG,CAACzK,KAAJ,CAAU2D,GAAG,CAAC9D,MAAd,EAAsB4K,GAAG,CAAC5K,MAA1B,CAAP;IACH;;IACD,IAAI8D,GAAG,CAAC9D,MAAJ,GAAa,CAAb,IAAkB8D,GAAG,CAAC9D,MAAJ,IAAc,CAApC,EAAuC;MACnC,OAAO4K,GAAG,CAACzK,KAAJ,CAAU2D,GAAG,CAAC9D,MAAJ,GAAa,CAAvB,EAA0B4K,GAAG,CAAC5K,MAA9B,CAAP;IACH;;IACD,IAAI8D,GAAG,CAAC9D,MAAJ,GAAa,CAAb,IAAkB8D,GAAG,CAAC9D,MAAJ,IAAc,CAApC,EAAuC;MACnC,OAAO4K,GAAG,CAACzK,KAAJ,CAAU2D,GAAG,CAAC9D,MAAJ,GAAa,CAAvB,EAA0B4K,GAAG,CAAC5K,MAA9B,CAAP;IACH;;IACD,IAAI8D,GAAG,CAAC9D,MAAJ,GAAa,CAAb,IAAkB8D,GAAG,CAAC9D,MAAJ,GAAa,EAAnC,EAAuC;MACnC,OAAO4K,GAAG,CAACzK,KAAJ,CAAU2D,GAAG,CAAC9D,MAAJ,GAAa,CAAvB,EAA0B4K,GAAG,CAAC5K,MAA9B,CAAP;IACH;;IACD,IAAI8D,GAAG,CAAC9D,MAAJ,KAAe,EAAnB,EAAuB;MACnB,OAAO,EAAP;IACH;;IACD,IAAI8D,GAAG,CAAC9D,MAAJ,KAAe,EAAnB,EAAuB;MACnB,IAAI4J,QAAQ,CAAC5J,MAAT,KAAoB,EAAxB,EAA4B;QACxB,OAAO6K,IAAI,CAAC1K,KAAL,CAAW,EAAX,EAAe0K,IAAI,CAAC7K,MAApB,CAAP;MACH;;MACD,OAAO6K,IAAI,CAAC1K,KAAL,CAAW,EAAX,EAAe0K,IAAI,CAAC7K,MAApB,CAAP;IACH;;IACD,IAAI8D,GAAG,CAAC9D,MAAJ,GAAa,EAAb,IAAmB8D,GAAG,CAAC9D,MAAJ,IAAc,EAArC,EAAyC;MACrC,OAAO6K,IAAI,CAAC1K,KAAL,CAAW2D,GAAG,CAAC9D,MAAJ,GAAa,CAAxB,EAA2B6K,IAAI,CAAC7K,MAAhC,CAAP;IACH;;IACD,OAAO,EAAP;EACH;EACD;AACJ;AACA;;;EACI+I,iBAAiB,CAAChC,QAAQ,GAAG,KAAKA,QAAjB,EAA2B;IACxC,IAAI9H,EAAJ;;IACA,MAAM6L,YAAY,GAAG,CAAC7L,EAAE,GAAG8H,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAACgE,aAAnE,MAAsF,IAAtF,IAA8F9L,EAAE,KAAK,KAAK,CAA1G,GAA8G,KAAK,CAAnH,GAAuHA,EAAE,CAAC+L,UAA/I;;IACA,IAAI,EAAEF,YAAY,KAAK,IAAjB,IAAyBA,YAAY,KAAK,KAAK,CAA/C,GAAmD,KAAK,CAAxD,GAA4DA,YAAY,CAACC,aAA3E,CAAJ,EAA+F;MAC3F,OAAOhE,QAAQ,CAACgE,aAAhB;IACH,CAFD,MAGK;MACD,OAAO,KAAKhC,iBAAL,CAAuB+B,YAAvB,CAAP;IACH;EACJ;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACInD,iBAAiB,CAAC/G,UAAD,EAAa;IAC1B,IAAI,KAAK0G,YAAL,IAAsB,CAAC,KAAKnK,mBAAN,IAA6B,KAAKoK,WAA5D,EAA0E;MACtE,KAAKA,WAAL,GAAmB,KAAnB;MACA;IACH;;IACD,IAAIjI,KAAK,CAACC,OAAN,CAAc,KAAK7C,qBAAnB,CAAJ,EAA+C;MAC3C,KAAK8K,QAAL,CAAc,KAAKyD,SAAL,CAAe,KAAKT,WAAL,CAAiB,KAAKC,aAAL,CAAmB,KAAKC,aAAL,CAAmB9J,UAAnB,CAAnB,CAAjB,EAAqE,KAAKlE,qBAA1E,CAAf,CAAd;IACH,CAFD,MAGK,IAAI,KAAKA,qBAAT,EAAgC;MACjC,KAAK8K,QAAL,CAAc,KAAKyD,SAAL,CAAe,KAAKC,aAAL,CAAmBtK,UAAnB,CAAf,CAAd;IACH,CAFI,MAGA;MACD,KAAK4G,QAAL,CAAc,KAAKiD,aAAL,CAAmB7J,UAAnB,CAAd;IACH;EACJ;;EACDqK,SAAS,CAAC7E,KAAD,EAAQ;IACb,IAAI,CAAC,KAAKc,aAAN,IAAuBd,KAAK,KAAK,EAArC,EAAyC;MACrC,OAAOA,KAAP;IACH;;IACD,MAAM+E,GAAG,GAAG3K,MAAM,CAAC4F,KAAD,CAAlB;IACA,OAAO5F,MAAM,CAAC4K,KAAP,CAAaD,GAAb,IAAoB/E,KAApB,GAA4B+E,GAAnC;EACH;;EACDX,WAAW,CAACpE,KAAD,EAAQiF,0BAAR,EAAoC;IAC3C,OAAOjF,KAAK,GAAGA,KAAK,CAAClG,OAAN,CAAc,KAAKoL,gBAAL,CAAsBD,0BAAtB,CAAd,EAAiE,EAAjE,CAAH,GAA0EjF,KAAtF;EACH;;EACDsE,aAAa,CAACtE,KAAD,EAAQ;IACjB,IAAI,CAAC,KAAKjK,MAAV,EAAkB;MACd,OAAOiK,KAAP;IACH;;IACD,OAAOA,KAAK,GAAGA,KAAK,CAAClG,OAAN,CAAc,KAAK/D,MAAnB,EAA2B,EAA3B,CAAH,GAAoCiK,KAAhD;EACH;;EACDqE,aAAa,CAACrE,KAAD,EAAQ;IACjB,IAAI,CAAC,KAAKlK,MAAV,EAAkB;MACd,OAAOkK,KAAP;IACH;;IACD,OAAOA,KAAK,GAAGA,KAAK,CAAClG,OAAN,CAAc,KAAKhE,MAAnB,EAA2B,EAA3B,CAAH,GAAoCkK,KAAhD;EACH;;EACDmF,uBAAuB,CAACnI,MAAD,EAAS;IAC5B,OAAO,KAAKoH,WAAL,CAAiB,KAAKC,aAAL,CAAmB,KAAKC,aAAL,CAAmBtH,MAAnB,CAAnB,CAAjB,EAAiE,KAAKvB,qBAAtE,CAAP;EACH;;EACDyJ,gBAAgB,CAACD,0BAAD,EAA6B;IACzC,OAAO,IAAI9N,MAAJ,CAAW8N,0BAA0B,CAAC5L,GAA3B,CAAgC2I,IAAD,IAAW,KAAIA,IAAK,EAAnD,EAAsDxI,IAAtD,CAA2D,GAA3D,CAAX,EAA4E,IAA5E,CAAP;EACH;;EACD4L,0BAA0B,CAACpF,KAAD,EAAQ;IAC9B,MAAMqF,OAAO,GAAGnM,KAAK,CAACC,OAAN,CAAc,KAAKlD,aAAnB,IACV,KAAKA,aADK,GAEV,CAAC,KAAKA,aAAN,CAFN;IAGA,OAAO+J,KAAK,CAAClG,OAAN,CAAc,KAAKoL,gBAAL,CAAsBG,OAAtB,CAAd,EAA8C,GAA9C,CAAP;EACH;;EACDP,aAAa,CAAC9H,MAAD,EAAS;IAClB,IAAIA,MAAM,KAAK,EAAf,EAAmB;MACf,OAAOA,MAAP;IACH;;IACD,MAAMsI,kBAAkB,GAAG,KAAKC,2BAAL,CAAiC,KAAKjN,cAAtC,CAA3B;;IACA,MAAMkN,cAAc,GAAG,KAAKJ,0BAAL,CAAgC,KAAKD,uBAAL,CAA6BnI,MAA7B,CAAhC,CAAvB;;IACA,IAAI,CAAC,KAAK8D,aAAV,EAAyB;MACrB,OAAO0E,cAAP;IACH;;IACD,IAAIF,kBAAJ,EAAwB;MACpB,IAAItI,MAAM,KAAK,KAAK/G,aAApB,EAAmC;QAC/B,OAAO,IAAP;MACH;;MACD,OAAO,KAAKwP,eAAL,CAAqB,KAAKnN,cAA1B,EAA0CkN,cAA1C,CAAP;IACH,CALD,MAMK;MACD,OAAOpL,MAAM,CAACoL,cAAD,CAAb;IACH;EACJ,CA/YwC,CAgZzC;;;EACAD,2BAA2B,CAACG,aAAD,EAAgB;IACvC,MAAMC,OAAO,GAAGD,aAAa,CAAChM,KAAd,CAAoB,IAAIvC,MAAJ,CAAY,sBAAZ,CAApB,CAAhB;IACA,OAAOwO,OAAO,GAAGvL,MAAM,CAACuL,OAAO,CAAC,CAAD,CAAR,CAAT,GAAwB,IAAtC;EACH;;EACDF,eAAe,CAACG,mBAAD,EAAsBJ,cAAtB,EAAsC;IACjD,IAAII,mBAAmB,CAACrM,OAApB,CAA4B,GAA5B,IAAmC,CAAvC,EAA0C;MACtC,OAAOa,MAAM,CAACoL,cAAD,CAAN,CAAuBK,OAAvB,CAA+B,CAA/B,CAAP;IACH;;IACD,OAAOzL,MAAM,CAACoL,cAAD,CAAb;EACH;;AA1ZwC;;AA4Z7C9E,WAAW,CAACL,IAAZ;EAAA,iBAAwGK,WAAxG,EAvaqGhM,EAuarG,UAAqIe,QAArI,GAvaqGf,EAuarG,UAA0JgB,MAA1J,GAvaqGhB,EAuarG,UAA6KA,EAAE,CAACoR,UAAhL,GAvaqGpR,EAuarG,UAAuMA,EAAE,CAACqR,SAA1M;AAAA;;AACArF,WAAW,CAACJ,KAAZ,kBAxaqG5L,EAwarG;EAAA,OAA4GgM,WAA5G;EAAA,SAA4GA,WAA5G;AAAA;;AACA;EAAA,mDAzaqGhM,EAyarG,mBAA2FgM,WAA3F,EAAoH,CAAC;IACzGH,IAAI,EAAE1L;EADmG,CAAD,CAApH,EAE4B,YAAY;IAChC,OAAO,CAAC;MAAE0L,IAAI,EAAEyF,QAAR;MAAkBxF,UAAU,EAAE,CAAC;QACvBD,IAAI,EAAEzL,MADiB;QAEvB2L,IAAI,EAAE,CAAChL,QAAD;MAFiB,CAAD;IAA9B,CAAD,EAGW;MAAE8K,IAAI,EAAE/J,SAAR;MAAmBgK,UAAU,EAAE,CAAC;QAClCD,IAAI,EAAEzL,MAD4B;QAElC2L,IAAI,EAAE,CAAC/K,MAAD;MAF4B,CAAD;IAA/B,CAHX,EAMW;MAAE6K,IAAI,EAAE7L,EAAE,CAACoR;IAAX,CANX,EAMoC;MAAEvF,IAAI,EAAE7L,EAAE,CAACqR;IAAX,CANpC,CAAP;EAOH,CAVL;AAAA;;AAYA,MAAME,aAAN,CAAoB;EAChB7N,WAAW,CAACuI,QAAD,EAAWuF,YAAX,EAAyB7N,OAAzB,EAAkC;IACzC,KAAKsI,QAAL,GAAgBA,QAAhB;IACA,KAAKuF,YAAL,GAAoBA,YAApB;IACA,KAAK7N,OAAL,GAAeA,OAAf,CAHyC,CAIzC;;IACA,KAAKC,cAAL,GAAsB,EAAtB;IACA,KAAKzB,iBAAL,GAAyB,EAAzB;IACA,KAAKI,QAAL,GAAgB,EAAhB;IACA,KAAKlB,MAAL,GAAc,EAAd;IACA,KAAKD,MAAL,GAAc,EAAd;IACA,KAAKE,iBAAL,GAAyB,GAAzB;IACA,KAAKC,aAAL,GAAqB,GAArB;IACA,KAAKK,qBAAL,GAA6B,IAA7B;IACA,KAAKC,WAAL,GAAmB,IAAnB;IACA,KAAKH,aAAL,GAAqB,IAArB;IACA,KAAKC,oBAAL,GAA4B,IAA5B;IACA,KAAKI,mBAAL,GAA2B,IAA3B;IACA,KAAKN,YAAL,GAAoB,IAApB;IACA,KAAKD,eAAL,GAAuB,IAAvB;IACA,KAAKU,UAAL,GAAkB,IAAlB;IACA,KAAKF,cAAL,GAAsB,IAAtB;IACA,KAAKC,oBAAL,GAA4B,IAA5B;IACA,KAAKG,gBAAL,GAAwB,IAAxB;IACA,KAAKC,mBAAL,GAA2B,IAA3B;IACA,KAAKC,UAAL,GAAkB,IAAIpC,YAAJ,EAAlB;IACA,KAAKuR,UAAL,GAAkB,EAAlB;IACA,KAAKC,SAAL,GAAiB,IAAjB;IACA,KAAKC,oBAAL,GAA4B,EAA5B;IACA,KAAKC,WAAL,GAAmB,KAAnB,CA5ByC,CA6BzC;;IACA,KAAKlF,QAAL,GAAiBC,CAAD,IAAO,CAAG,CAA1B,CA9ByC,CA+BzC;;;IACA,KAAKkF,OAAL,GAAe,MAAM,CAAG,CAAxB;EACH;;EACDC,WAAW,CAACC,OAAD,EAAU;IACjB,MAAM;MAAEnO,cAAF;MAAkBzB,iBAAlB;MAAqCI,QAArC;MAA+ClB,MAA/C;MAAuDD,MAAvD;MAA+DE,iBAA/D;MAAkFC,aAAlF;MAAiGK,qBAAjG;MAAwHC,WAAxH;MAAqIH,aAArI;MAAoJC,oBAApJ;MAA0KI,mBAA1K;MAA+LN,YAA/L;MAA6MD,eAA7M;MAA8NU,UAA9N;MAA0OF,cAA1O;MAA0PC,oBAA1P;MAAgRG,gBAAhR;MAAkSC;IAAlS,IAA2T0P,OAAjU;;IACA,IAAInO,cAAJ,EAAoB;MAChB,IAAIA,cAAc,CAACoO,YAAf,KAAgCpO,cAAc,CAACqO,aAA/C,IACA,CAACrO,cAAc,CAACsO,WADpB,EACiC;QAC7B,KAAKV,YAAL,CAAkB/E,WAAlB,GAAgC,IAAhC;MACH;;MACD,IAAI7I,cAAc,CAACoO,YAAf,IAA+BpO,cAAc,CAACoO,YAAf,CAA4BjN,KAA5B,CAAkC,IAAlC,EAAwCG,MAAxC,GAAiD,CAApF,EAAuF;QACnF,KAAKyM,oBAAL,GAA4B/N,cAAc,CAACoO,YAAf,CACvBjN,KADuB,CACjB,IADiB,EAEvBoN,IAFuB,CAElB,CAACC,CAAD,EAAIC,CAAJ,KAAU;UAChB,OAAOD,CAAC,CAAClN,MAAF,GAAWmN,CAAC,CAACnN,MAApB;QACH,CAJ2B,CAA5B;;QAKA,KAAKoN,QAAL;MACH,CAPD,MAQK;QACD,KAAKX,oBAAL,GAA4B,EAA5B;QACA,KAAKF,UAAL,GAAkB7N,cAAc,CAACoO,YAAf,IAA+B,EAAjD;QACA,KAAKR,YAAL,CAAkB5N,cAAlB,GAAmC,KAAK6N,UAAxC;MACH;IACJ;;IACD,IAAItP,iBAAJ,EAAuB;MACnB,IAAI,CAACA,iBAAiB,CAAC6P,YAAnB,IAAmC,CAACxN,KAAK,CAACC,OAAN,CAActC,iBAAiB,CAAC6P,YAAhC,CAAxC,EAAuF;QACnF;MACH,CAFD,MAGK;QACD,KAAKR,YAAL,CAAkBzK,qBAAlB,GAA0C5E,iBAAiB,CAAC6P,YAAlB,IAAkC,EAA5E;MACH;IACJ,CA5BgB,CA6BjB;;;IACA,IAAIzP,QAAQ,IAAIA,QAAQ,CAACyP,YAAzB,EAAuC;MACnC,KAAKR,YAAL,CAAkBxK,qBAAlB,GAA0CzE,QAAQ,CAACyP,YAAnD;IACH;;IACD,IAAI3Q,MAAJ,EAAY;MACR,KAAKmQ,YAAL,CAAkBnQ,MAAlB,GAA2BA,MAAM,CAAC2Q,YAAlC;IACH;;IACD,IAAI5Q,MAAJ,EAAY;MACR,KAAKoQ,YAAL,CAAkBpQ,MAAlB,GAA2BA,MAAM,CAAC4Q,YAAlC;IACH;;IACD,IAAI1Q,iBAAJ,EAAuB;MACnB,KAAKkQ,YAAL,CAAkBlQ,iBAAlB,GAAsCA,iBAAiB,CAAC0Q,YAAxD;IACH;;IACD,IAAIzQ,aAAJ,EAAmB;MACf,KAAKiQ,YAAL,CAAkBjQ,aAAlB,GAAkCA,aAAa,CAACyQ,YAAhD;IACH;;IACD,IAAIpQ,qBAAJ,EAA2B;MACvB,KAAK4P,YAAL,CAAkB5P,qBAAlB,GAA0CA,qBAAqB,CAACoQ,YAAhE;IACH;;IACD,IAAInQ,WAAJ,EAAiB;MACb,KAAK2P,YAAL,CAAkB3P,WAAlB,GAAgCA,WAAW,CAACmQ,YAA5C;IACH;;IACD,IAAItQ,aAAJ,EAAmB;MACf,KAAK8P,YAAL,CAAkB9P,aAAlB,GAAkCA,aAAa,CAACsQ,YAAhD;IACH;;IACD,IAAIrQ,oBAAJ,EAA0B;MACtB,KAAK6P,YAAL,CAAkB7P,oBAAlB,GAAyCA,oBAAoB,CAACqQ,YAA9D;IACH;;IACD,IAAIjQ,mBAAJ,EAAyB;MACrB,KAAKyP,YAAL,CAAkBzP,mBAAlB,GAAwCA,mBAAmB,CAACiQ,YAA5D;IACH;;IACD,IAAIvQ,YAAJ,EAAkB;MACd,KAAK+P,YAAL,CAAkB/P,YAAlB,GAAiCA,YAAY,CAACuQ,YAA9C;IACH;;IACD,IAAIxQ,eAAJ,EAAqB;MACjB,KAAKgQ,YAAL,CAAkBhQ,eAAlB,GAAoCA,eAAe,CAACwQ,YAApD;IACH;;IACD,IAAI9P,UAAJ,EAAgB;MACZ,KAAKsP,YAAL,CAAkBtP,UAAlB,GAA+BA,UAAU,CAAC8P,YAA1C;IACH;;IACD,IAAIhQ,cAAJ,EAAoB;MAChB,KAAKwP,YAAL,CAAkBxP,cAAlB,GAAmCA,cAAc,CAACgQ,YAAlD;IACH;;IACD,IAAI/P,oBAAJ,EAA0B;MACtB,KAAKuP,YAAL,CAAkBvP,oBAAlB,GAAyCA,oBAAoB,CAAC+P,YAA9D;;MACA,IAAI,KAAKR,YAAL,CAAkBvP,oBAAtB,EAA4C;QACxC,KAAKuP,YAAL,CAAkBzK,qBAAlB,GACI,KAAKyK,YAAL,CAAkBzK,qBAAlB,CAAwCkE,MAAxC,CAAgDsH,CAAD,IAAOA,CAAC,KAAK,GAA5D,CADJ;MAEH;IACJ;;IACD,IAAInQ,gBAAJ,EAAsB;MAClB,KAAKoP,YAAL,CAAkBpP,gBAAlB,GAAqCA,gBAAgB,CAAC4P,YAAtD;IACH;;IACD,IAAI3P,mBAAJ,EAAyB;MACrB,KAAKmP,YAAL,CAAkBnP,mBAAlB,GAAwCA,mBAAmB,CAAC2P,YAA5D;IACH;;IACD,KAAKQ,UAAL;EACH,CAzHe,CA0HhB;;;EACAC,QAAQ,CAAC;IAAEnH;EAAF,CAAD,EAAY;IAChB,IAAInH,EAAJ,EAAQC,EAAR;;IACA,IAAI,CAAC,KAAKoN,YAAL,CAAkBtP,UAAnB,IAAiC,CAAC,KAAKuP,UAA3C,EAAuD;MACnD,OAAO,IAAP;IACH;;IACD,IAAI,KAAKD,YAAL,CAAkB1I,OAAtB,EAA+B;MAC3B,OAAO,KAAK4J,sBAAL,CAA4BpH,KAA5B,CAAP;IACH;;IACD,IAAI,KAAKkG,YAAL,CAAkBtI,YAAtB,EAAoC;MAChC,OAAO,KAAKwJ,sBAAL,CAA4BpH,KAA5B,CAAP;IACH;;IACD,IAAI,KAAKmG,UAAL,CAAgBtI,UAAhB,CAA2B,WAA3B,CAAJ,EAA6C;MACzC,OAAO,IAAP;IACH;;IACD,IAAI3F,iBAAiB,CAAC0C,QAAlB,CAA2B,KAAKuL,UAAhC,CAAJ,EAAiD;MAC7C,OAAO,IAAP;IACH;;IACD,IAAI,KAAKD,YAAL,CAAkBhQ,eAAtB,EAAuC;MACnC,OAAO,IAAP;IACH;;IACD,IAAI+B,SAAS,CAAC2C,QAAV,CAAmB,KAAKuL,UAAxB,CAAJ,EAAyC;MACrC,OAAO,KAAKkB,aAAL,CAAmBrH,KAAnB,CAAP;IACH;;IACD,IAAIA,KAAK,IAAIA,KAAK,CAAC1C,QAAN,GAAiB1D,MAAjB,IAA2B,CAAxC,EAA2C;MACvC,IAAI0N,YAAY,GAAG,CAAnB;;MACA,KAAK,MAAMC,GAAX,IAAkB,KAAKrB,YAAL,CAAkBxK,qBAApC,EAA2D;QACvD,IAAI,CAAC7C,EAAE,GAAG,KAAKqN,YAAL,CAAkBxK,qBAAlB,CAAwC6L,GAAxC,CAAN,MAAwD,IAAxD,IAAgE1O,EAAE,KAAK,KAAK,CAA5E,GAAgF,KAAK,CAArF,GAAyFA,EAAE,CAACzB,QAAhG,EAA0G;UACtG,IAAI,KAAK+O,UAAL,CAAgB5M,OAAhB,CAAwBgO,GAAxB,MAAiC,KAAKpB,UAAL,CAAgBqB,WAAhB,CAA4BD,GAA5B,CAArC,EAAuE;YACnE,MAAME,GAAG,GAAG,KAAKtB,UAAL,CACP1M,KADO,CACD,EADC,EAEPkG,MAFO,CAECjF,CAAD,IAAOA,CAAC,KAAK6M,GAFb,EAGP/N,IAHO,CAGF,EAHE,CAAZ;;YAIA8N,YAAY,IAAIG,GAAG,CAAC7N,MAApB;UACH,CAND,MAOK,IAAI,KAAKuM,UAAL,CAAgB5M,OAAhB,CAAwBgO,GAAxB,MAAiC,CAAC,CAAtC,EAAyC;YAC1CD,YAAY;UACf;;UACD,IAAI,KAAKnB,UAAL,CAAgB5M,OAAhB,CAAwBgO,GAAxB,MAAiC,CAAC,CAAlC,IACAvH,KAAK,CAAC1C,QAAN,GAAiB1D,MAAjB,IAA2B,KAAKuM,UAAL,CAAgB5M,OAAhB,CAAwBgO,GAAxB,CAD/B,EAC6D;YACzD,OAAO,IAAP;UACH;;UACD,IAAID,YAAY,KAAK,KAAKnB,UAAL,CAAgBvM,MAArC,EAA6C;YACzC,OAAO,IAAP;UACH;QACJ;MACJ;;MACD,IAAI,KAAKuM,UAAL,CAAgB5M,OAAhB,CAAwB,GAAxB,MAAiC,CAAjC,IACAyG,KAAK,CAAC1C,QAAN,GAAiB1D,MAAjB,KACI,KAAKuM,UAAL,CAAgBvM,MAAhB,GACIQ,MAAM,CAAC,CAAC,CAACtB,EAAE,GAAG,KAAKqN,UAAL,CAAgB1M,KAAhB,CAAsB,GAAtB,EAA2B,CAA3B,CAAN,MAAyC,IAAzC,IAAiDX,EAAE,KAAK,KAAK,CAA7D,GAAiEA,EAAjE,GAAsE,EAAvE,EAA2EW,KAA3E,CAAiF,GAAjF,EAAsF,CAAtF,CAAD,CADV,GAEI,CAJZ,EAIe;QACX,OAAO,IAAP;MACH;;MACD,IAAI,KAAK0M,UAAL,CAAgB5M,OAAhB,CAAwB,GAAxB,MAAiC,CAAjC,IAAsC,KAAK4M,UAAL,CAAgB5M,OAAhB,CAAwB,GAAxB,MAAiC,CAA3E,EAA8E;QAC1E,OAAO,IAAP;MACH,CAFD,MAGK,IAAK,KAAK4M,UAAL,CAAgB5M,OAAhB,CAAwB,GAAxB,IAA+B,CAA/B,IACNyG,KAAK,CAAC1C,QAAN,GAAiB1D,MAAjB,GAA0B,KAAKuM,UAAL,CAAgB5M,OAAhB,CAAwB,GAAxB,CADrB,IAEJ,KAAK4M,UAAL,CAAgB5M,OAAhB,CAAwB,GAAxB,IAA+B,CAA/B,IACGyG,KAAK,CAAC1C,QAAN,GAAiB1D,MAAjB,GAA0B,KAAKuM,UAAL,CAAgB5M,OAAhB,CAAwB,GAAxB,CAHzB,IAIL,KAAK4M,UAAL,CAAgB5M,OAAhB,CAAwB,GAAxB,MAAiC,CAJhC,EAImC;QACpC,OAAO,KAAK6N,sBAAL,CAA4BpH,KAA5B,CAAP;MACH;;MACD,IAAI,KAAKmG,UAAL,CAAgB5M,OAAhB,CAAwB,GAAxB,MAAiC,CAAC,CAAlC,IAAuC,KAAK4M,UAAL,CAAgB5M,OAAhB,CAAwB,GAAxB,MAAiC,CAAC,CAA7E,EAAgF;QAC5E,MAAMK,MAAM,GAAG,KAAKsM,YAAL,CAAkB5P,qBAAlB,GACT,KAAK6P,UAAL,CAAgBvM,MAAhB,GACE,KAAKsM,YAAL,CAAkBhC,sBAAlB,CAAyC,KAAKiC,UAA9C,CADF,GAEEmB,YAHO,GAIT,KAAKnB,UAAL,CAAgBvM,MAAhB,GAAyB0N,YAJ/B;;QAKA,IAAItH,KAAK,CAAC1C,QAAN,GAAiB1D,MAAjB,GAA0BA,MAA9B,EAAsC;UAClC,OAAO,KAAKwN,sBAAL,CAA4BpH,KAA5B,CAAP;QACH;MACJ;IACJ;;IACD,IAAIA,KAAJ,EAAW;MACP,KAAKhJ,UAAL,CAAgB0Q,IAAhB;MACA,OAAO,IAAP;IACH;;IACD,OAAO,IAAP;EACH;;EACDC,OAAO,GAAG;IACN,KAAKrB,WAAL,GAAmB,IAAnB;EACH;;EACDsB,aAAa,CAAC5H,KAAD,EAAQ;IACjB;IACA,IAAI,CAACA,KAAK,KAAK,EAAV,IAAgBA,KAAK,KAAK,IAA1B,IAAkCA,KAAK,KAAKxJ,SAA7C,KACA,KAAK0P,YAAL,CAAkB3N,WADtB,EACmC;MAC/B,KAAK2N,YAAL,CAAkB3N,WAAlB,GAAgC,KAAK2N,YAAL,CAAkBnE,cAAlB,CAAiC,EAAjC,CAAhC;IACH;EACJ;;EACD8F,OAAO,CAACC,CAAD,EAAI;IACP,MAAMC,EAAE,GAAGD,CAAC,CAACE,MAAb;IACA,KAAKC,WAAL,GAAmBF,EAAE,CAAC/H,KAAtB;;IACA,KAAKgH,QAAL;;IACA,IAAI,CAAC,KAAKb,UAAV,EAAsB;MAClB,KAAK/E,QAAL,CAAc2G,EAAE,CAAC/H,KAAjB;MACA;IACH;;IACD,MAAMhE,QAAQ,GAAG+L,EAAE,CAACG,cAAH,KAAsB,CAAtB,GACXH,EAAE,CAACG,cAAH,GAAoB,KAAKhC,YAAL,CAAkBnQ,MAAlB,CAAyB6D,MADlC,GAEXmO,EAAE,CAACG,cAFT;IAGA,IAAIC,UAAU,GAAG,CAAjB;IACA,IAAIjL,cAAc,GAAG,KAArB;;IACA,KAAKgJ,YAAL,CAAkB1D,iBAAlB,CAAoCxG,QAApC,EAA8C,KAAKsK,WAAnD,EAAgE,KAAK8B,KAAL,KAAe,WAAf,IAA8B,KAAKA,KAAL,KAAe,QAA7G,EAAuH,CAACjL,KAAD,EAAQkL,eAAR,KAA4B;MAC/I,KAAK/B,WAAL,GAAmB,KAAnB;MACA6B,UAAU,GAAGhL,KAAb;MACAD,cAAc,GAAGmL,eAAjB;IACH,CAJD,EAbO,CAkBP;;;IACA,IAAI,KAAK1F,iBAAL,OAA6BoF,EAAjC,EAAqC;MACjC;IACH;;IACD,KAAK3B,SAAL,GACI,KAAKA,SAAL,KAAmB,CAAnB,IAAwB,KAAK6B,WAAL,CAAiBrO,MAAjB,KAA4B,CAApD,GAAwD,IAAxD,GAA+D,KAAKwM,SADxE;IAEA,IAAIkC,eAAe,GAAG,KAAKlC,SAAL,GAChB,KAAK6B,WAAL,CAAiBrO,MAAjB,GAA0BoC,QAA1B,GAAqCmM,UADrB,GAEhBnM,QAAQ,IAAI,KAAKoM,KAAL,KAAe,WAAf,IAA8B,CAAClL,cAA/B,GAAgD,CAAhD,GAAoDiL,UAAxD,CAFd;;IAGA,IAAIG,eAAe,GAAG,KAAKC,qBAAL,EAAtB,EAAoD;MAChDD,eAAe,GAAG,KAAKC,qBAAL,EAAlB;IACH;;IACD,IAAID,eAAe,GAAG,CAAtB,EAAyB;MACrBA,eAAe,GAAG,CAAlB;IACH;;IACDP,EAAE,CAACS,iBAAH,CAAqBF,eAArB,EAAsCA,eAAtC;IACA,KAAKlC,SAAL,GAAiB,IAAjB;EACH;;EACDqC,MAAM,GAAG;IACL,IAAI,KAAKtC,UAAT,EAAqB;MACjB,KAAKD,YAAL,CAAkBtD,iBAAlB;IACH;;IACD,KAAK2D,OAAL;EACH;;EACDmC,OAAO,CAACZ,CAAD,EAAI;IACP,IAAI,CAAC,KAAK3B,UAAV,EAAsB;MAClB;IACH;;IACD,MAAM4B,EAAE,GAAGD,CAAC,CAACE,MAAb;IACA,MAAMW,QAAQ,GAAG,CAAjB;IACA,MAAMC,MAAM,GAAG,CAAf;;IACA,IAAIb,EAAE,KAAK,IAAP,IACAA,EAAE,CAACG,cAAH,KAAsB,IADtB,IAEAH,EAAE,CAACG,cAAH,KAAsBH,EAAE,CAACc,YAFzB,IAGAd,EAAE,CAACG,cAAH,GAAoB,KAAKhC,YAAL,CAAkBnQ,MAAlB,CAAyB6D,MAH7C,IAIA;IACAkO,CAAC,CAACgB,OAAF,KAAc,EALlB,EAKsB;MAClB,IAAI,KAAK5C,YAAL,CAAkB9P,aAAtB,EAAqC;QACjC;QACA,KAAK8P,YAAL,CAAkBnF,WAAlB,GAAgC,KAAKmF,YAAL,CAAkB5E,eAAlB,EAAhC;;QACA,IAAIyG,EAAE,CAACS,iBAAH,IACA,KAAKtC,YAAL,CAAkBnQ,MAAlB,GAA2B,KAAKmQ,YAAL,CAAkBnF,WAA7C,KAA6DgH,EAAE,CAAC/H,KADpE,EAC2E;UACvE;UACA+H,EAAE,CAACgB,KAAH;UACAhB,EAAE,CAACS,iBAAH,CAAqBG,QAArB,EAA+BC,MAA/B;QACH,CALD,MAMK;UACD;UACA,IAAIb,EAAE,CAACG,cAAH,GAAoB,KAAKhC,YAAL,CAAkB3N,WAAlB,CAA8BqB,MAAtD,EAA8D;YAC1D;YACAmO,EAAE,CAACS,iBAAH,CAAqB,KAAKtC,YAAL,CAAkB3N,WAAlB,CAA8BqB,MAAnD,EAA2D,KAAKsM,YAAL,CAAkB3N,WAAlB,CAA8BqB,MAAzF;UACH;QACJ;MACJ;IACJ;;IACD,MAAMoP,SAAS,GAAGjB,EAAE,KACf,CAACA,EAAE,CAAC/H,KAAJ,IAAa+H,EAAE,CAAC/H,KAAH,KAAa,KAAKkG,YAAL,CAAkBnQ,MAA5C,GACK,KAAKmQ,YAAL,CAAkBnQ,MAAlB,GAA2B,KAAKmQ,YAAL,CAAkBnF,WADlD,GAEKgH,EAAE,CAAC/H,KAHO,CAApB;IAIA;;IACA,IAAI+H,EAAE,IAAIA,EAAE,CAAC/H,KAAH,KAAagJ,SAAvB,EAAkC;MAC9BjB,EAAE,CAAC/H,KAAH,GAAWgJ,SAAX;IACH;IACD;;;IACA,IAAIjB,EAAE,IACF,CAACA,EAAE,CAACG,cAAH,IAAqBH,EAAE,CAACc,YAAzB,KACI,KAAK3C,YAAL,CAAkBnQ,MAAlB,CAAyB6D,MAFjC,EAEyC;MACrCmO,EAAE,CAACG,cAAH,GAAoB,KAAKhC,YAAL,CAAkBnQ,MAAlB,CAAyB6D,MAA7C;MACA;IACH;IACD;;;IACA,IAAImO,EAAE,IAAIA,EAAE,CAACc,YAAH,GAAkB,KAAKN,qBAAL,EAA5B,EAA0D;MACtDR,EAAE,CAACc,YAAH,GAAkB,KAAKN,qBAAL,EAAlB;IACH;EACJ,CAjTe,CAkThB;;;EACAU,SAAS,CAACnB,CAAD,EAAI;IACT,IAAIjP,EAAJ,EAAQC,EAAR;;IACA,IAAI,CAAC,KAAKqN,UAAV,EAAsB;MAClB;IACH;;IACD,KAAKiC,KAAL,GAAaN,CAAC,CAACoB,IAAF,GAASpB,CAAC,CAACoB,IAAX,GAAkBpB,CAAC,CAACP,GAAjC;IACA,MAAMQ,EAAE,GAAGD,CAAC,CAACE,MAAb;IACA,KAAKC,WAAL,GAAmBF,EAAE,CAAC/H,KAAtB;;IACA,KAAKgH,QAAL;;IACA,IAAIc,CAAC,CAACgB,OAAF,KAAc,EAAlB,EAAsB;MAClBhB,CAAC,CAACqB,cAAF;IACH;;IACD,IAAIrB,CAAC,CAACgB,OAAF,KAAc,EAAd,IAAoBhB,CAAC,CAACgB,OAAF,KAAc,CAAlC,IAAuChB,CAAC,CAACgB,OAAF,KAAc,EAAzD,EAA6D;MACzD,IAAIhB,CAAC,CAACgB,OAAF,KAAc,CAAd,IAAmBf,EAAE,CAAC/H,KAAH,CAASpG,MAAT,KAAoB,CAA3C,EAA8C;QAC1CmO,EAAE,CAACG,cAAH,GAAoBH,EAAE,CAACc,YAAvB;MACH;;MACD,IAAIf,CAAC,CAACgB,OAAF,KAAc,CAAd,IAAmBf,EAAE,CAACG,cAAH,KAAsB,CAA7C,EAAgD;QAC5C;QACA,KAAKrR,iBAAL,GAAyB,CAAC,CAACgC,EAAE,GAAG,KAAKhC,iBAAX,MAAkC,IAAlC,IAA0CgC,EAAE,KAAK,KAAK,CAAtD,GAA0D,KAAK,CAA/D,GAAmEA,EAAE,CAACe,MAAvE,IACnB,KAAK/C,iBADc,GAEnB,KAAKwB,OAAL,CAAaxB,iBAFnB;;QAGA,IAAI,KAAKd,MAAL,CAAY6D,MAAZ,GAAqB,CAArB,IAA0BmO,EAAE,CAACG,cAAH,IAAqB,KAAKnS,MAAL,CAAY6D,MAA/D,EAAuE;UACnEmO,EAAE,CAACS,iBAAH,CAAqB,KAAKzS,MAAL,CAAY6D,MAAjC,EAAyCmO,EAAE,CAACc,YAA5C;QACH,CAFD,MAGK;UACD,IAAI,KAAKZ,WAAL,CAAiBrO,MAAjB,KAA4BmO,EAAE,CAACG,cAA/B,IACAH,EAAE,CAACG,cAAH,KAAsB,CAD1B,EAC6B;YACzB,OAAO,KAAKrR,iBAAL,CAAuB+D,QAAvB,CAAgC,CAAC,CAAC9B,EAAE,GAAG,KAAKmP,WAAL,CAAiBF,EAAE,CAACG,cAAH,GAAoB,CAArC,CAAN,MAAmD,IAAnD,IAA2DpP,EAAE,KAAK,KAAK,CAAvE,GAA2EA,EAA3E,GAAgF,EAAjF,EAAqFwE,QAArF,EAAhC,MACD,KAAKvH,MAAL,CAAY6D,MAAZ,IAAsB,CAAtB,IACEmO,EAAE,CAACG,cAAH,GAAoB,KAAKnS,MAAL,CAAY6D,MADnC,IAEG,KAAK7D,MAAL,CAAY6D,MAAZ,KAAuB,CAHxB,CAAP,EAGmC;cAC/BmO,EAAE,CAACS,iBAAH,CAAqBT,EAAE,CAACG,cAAH,GAAoB,CAAzC,EAA4CH,EAAE,CAACc,YAA/C;YACH;UACJ;QACJ;MACJ;;MACD,KAAKO,wBAAL,CAA8BrB,EAA9B;;MACA,IAAI,KAAK7B,YAAL,CAAkBnQ,MAAlB,CAAyB6D,MAAzB,IACAmO,EAAE,CAACG,cAAH,IAAqB,KAAKhC,YAAL,CAAkBnQ,MAAlB,CAAyB6D,MAD9C,IAEAmO,EAAE,CAACc,YAAH,IAAmB,KAAK3C,YAAL,CAAkBnQ,MAAlB,CAAyB6D,MAFhD,EAEwD;QACpDkO,CAAC,CAACqB,cAAF;MACH;;MACD,MAAME,WAAW,GAAGtB,EAAE,CAACG,cAAvB;;MACA,IAAIJ,CAAC,CAACgB,OAAF,KAAc,CAAd,IACA,CAACf,EAAE,CAACuB,QADJ,IAEAD,WAAW,KAAK,CAFhB,IAGAtB,EAAE,CAACc,YAAH,KAAoBd,EAAE,CAAC/H,KAAH,CAASpG,MAH7B,IAIAmO,EAAE,CAAC/H,KAAH,CAASpG,MAAT,KAAoB,CAJxB,EAI2B;QACvB,KAAKwM,SAAL,GAAiB,KAAKF,YAAL,CAAkBnQ,MAAlB,GAA2B,KAAKmQ,YAAL,CAAkBnQ,MAAlB,CAAyB6D,MAApD,GAA6D,CAA9E;;QACA,KAAKsM,YAAL,CAAkBnK,SAAlB,CAA4B,KAAKmK,YAAL,CAAkBnQ,MAA9C,EAAsD,KAAKmQ,YAAL,CAAkB5N,cAAxE,EAAwF,KAAK8N,SAA7F;MACH;IACJ;;IACD,IAAI,CAAC,CAAC,KAAKtQ,MAAP,IACA,KAAKA,MAAL,CAAY8D,MAAZ,GAAqB,CADrB,IAEA,KAAKqO,WAAL,CAAiBrO,MAAjB,GAA0B,KAAK9D,MAAL,CAAY8D,MAAtC,GAA+CmO,EAAE,CAACG,cAFtD,EAEsE;MAClEH,EAAE,CAACS,iBAAH,CAAqB,KAAKP,WAAL,CAAiBrO,MAAjB,GAA0B,KAAK9D,MAAL,CAAY8D,MAA3D,EAAmE,KAAKqO,WAAL,CAAiBrO,MAApF;IACH,CAJD,MAKK,IAAKkO,CAAC,CAACgB,OAAF,KAAc,EAAd,IAAoBhB,CAAC,CAACyB,OAAvB,IACJzB,CAAC,CAACgB,OAAF,KAAc,EAAd,IAAoBhB,CAAC,CAAC0B,OADtB,CAC+B;IAD/B,EAEH;MACEzB,EAAE,CAACS,iBAAH,CAAqB,CAArB,EAAwB,KAAKD,qBAAL,EAAxB;MACAT,CAAC,CAACqB,cAAF;IACH;;IACD,KAAKjD,YAAL,CAAkBlF,QAAlB,GAA6B+G,EAAE,CAACG,cAAhC;IACA,KAAKhC,YAAL,CAAkBjF,MAAlB,GAA2B8G,EAAE,CAACc,YAA9B;EACH;EACD;;;EACAY,UAAU,CAACjP,UAAD,EAAa;IACnB,OAAOlF,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,aAAa;MAChD,IAAI,OAAOkF,UAAP,KAAsB,QAAtB,IAAkCA,UAAU,KAAK,IAAjD,IAAyD,WAAWA,UAAxE,EAAoF;QAChF,IAAI,aAAaA,UAAjB,EAA6B;UACzB,KAAKkP,gBAAL,CAAsB5H,OAAO,CAACtH,UAAU,CAACmP,OAAZ,CAA7B;QACH,CAH+E,CAIhF;;;QACAnP,UAAU,GAAGA,UAAU,CAACwF,KAAxB;MACH;;MACD,IAAI,OAAOxF,UAAP,KAAsB,QAAtB,IAAkC,KAAK2L,UAAL,CAAgBtI,UAAhB,CAA2B,WAA3B,CAAtC,EAA+E;QAC3E;QACArD,UAAU,GAAG,KAAK0L,YAAL,CAAkB/C,cAAlB,CAAiC3I,UAAjC,CAAb;;QACA,IAAI,CAACtB,KAAK,CAACC,OAAN,CAAc,KAAKlD,aAAnB,CAAL,EAAwC;UACpC;UACAuE,UAAU,GACN,KAAKvE,aAAL,KAAuB,GAAvB,GACMuE,UAAU,CAACV,OAAX,CAAmB,GAAnB,EAAwB,KAAK7D,aAA7B,CADN,GAEMuE,UAHV;QAIH;;QACD,KAAK0L,YAAL,CAAkBpF,aAAlB,GAAkC,IAAlC;MACH;;MACD,IAAI,OAAOtG,UAAP,KAAsB,QAA1B,EAAoC;QAChC;QACAA,UAAU,GAAG,EAAb;MACH;;MACD,KAAKyN,WAAL,GAAmBzN,UAAnB;;MACA,KAAKwM,QAAL;;MACA,IAAKxM,UAAU,IAAI,KAAK0L,YAAL,CAAkB5N,cAAjC,IACC,KAAK4N,YAAL,CAAkB5N,cAAlB,KACI,KAAK4N,YAAL,CAAkBnQ,MAAlB,IAA4B,KAAKmQ,YAAL,CAAkB9P,aADlD,CADL,EAEwE;QACpE;QACA,KAAK8P,YAAL,CAAkBhF,YAAlB,GAAiC,IAAjC;QACA,KAAKgF,YAAL,CAAkBtC,mBAAlB,GAAwC,CACpC,OADoC,EAEpC,KAAKsC,YAAL,CAAkBnK,SAAlB,CAA4BvB,UAA5B,EAAwC,KAAK0L,YAAL,CAAkB5N,cAA1D,CAFoC,CAAxC,CAHoE,CAOpE;;QACA,KAAK4N,YAAL,CAAkBhF,YAAlB,GAAiC,KAAjC;MACH,CAXD,MAYK;QACD,KAAKgF,YAAL,CAAkBtC,mBAAlB,GAAwC,CAAC,OAAD,EAAUpJ,UAAV,CAAxC;MACH;;MACD,KAAKyN,WAAL,GAAmBzN,UAAnB;IACH,CA1Ce,CAAhB;EA2CH;;EACDoP,gBAAgB,CAACC,EAAD,EAAK;IACjB,KAAK3D,YAAL,CAAkB9E,QAAlB,GAA6B,KAAKA,QAAL,GAAgByI,EAA7C;EACH;;EACDC,iBAAiB,CAACD,EAAD,EAAK;IAClB,KAAKtD,OAAL,GAAesD,EAAf;EACH;;EACDlH,iBAAiB,CAAChC,QAAQ,GAAG,KAAKA,QAAjB,EAA2B;IACxC,IAAI9H,EAAJ;;IACA,MAAM6L,YAAY,GAAG,CAAC7L,EAAE,GAAG8H,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAACgE,aAAnE,MAAsF,IAAtF,IAA8F9L,EAAE,KAAK,KAAK,CAA1G,GAA8G,KAAK,CAAnH,GAAuHA,EAAE,CAAC+L,UAA/I;;IACA,IAAI,EAAEF,YAAY,KAAK,IAAjB,IAAyBA,YAAY,KAAK,KAAK,CAA/C,GAAmD,KAAK,CAAxD,GAA4DA,YAAY,CAACC,aAA3E,CAAJ,EAA+F;MAC3F,OAAOhE,QAAQ,CAACgE,aAAhB;IACH,CAFD,MAGK;MACD,OAAO,KAAKhC,iBAAL,CAAuB+B,YAAvB,CAAP;IACH;EACJ;;EACD0E,wBAAwB,CAACrB,EAAD,EAAK;IACzBA,EAAE,CAACG,cAAH,GAAoB6B,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAAS,KAAKlU,MAAL,CAAY6D,MAArB,EAA6BmO,EAAE,CAACG,cAAhC,CAAT,EAA0D,KAAKD,WAAL,CAAiBrO,MAAjB,GAA0B,KAAK9D,MAAL,CAAY8D,MAAhG,CAApB;IACAmO,EAAE,CAACc,YAAH,GAAkBkB,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAAS,KAAKlU,MAAL,CAAY6D,MAArB,EAA6BmO,EAAE,CAACc,YAAhC,CAAT,EAAwD,KAAKZ,WAAL,CAAiBrO,MAAjB,GAA0B,KAAK9D,MAAL,CAAY8D,MAA9F,CAAlB;EACH;EACD;;;EACA8P,gBAAgB,CAACQ,UAAD,EAAa;IACzB,KAAKhE,YAAL,CAAkBtC,mBAAlB,GAAwC,CAAC,UAAD,EAAasG,UAAb,CAAxC;EACH;;EACDC,qBAAqB,CAACC,OAAD,EAAU;IAC3B,OAASA,OAAO,CAAC1Q,KAAR,CAAc,UAAd,KACL0Q,OAAO,CACF3Q,KADL,CACW,EADX,EAEK4Q,MAFL,CAEY,CAACC,KAAD,EAAQC,OAAR,EAAiBnK,KAAjB,KAA2B;MACnC,KAAKoK,MAAL,GAAcD,OAAO,KAAK,GAAZ,GAAkBnK,KAAlB,GAA0B,KAAKoK,MAA7C;;MACA,IAAID,OAAO,KAAK,GAAhB,EAAqB;QACjB,OAAO,KAAKrE,YAAL,CAAkBhH,gBAAlB,CAAmCqL,OAAnC,IACDD,KAAK,GAAGC,OADP,GAEDD,KAFN;MAGH;;MACD,KAAKG,IAAL,GAAYrK,KAAZ;MACA,MAAMsK,YAAY,GAAGtQ,MAAM,CAACgQ,OAAO,CAACrQ,KAAR,CAAc,KAAKyQ,MAAL,GAAc,CAA5B,EAA+B,KAAKC,IAApC,CAAD,CAA3B;MACA,MAAME,WAAW,GAAG,IAAIzR,KAAJ,CAAUwR,YAAY,GAAG,CAAzB,EAA4BlR,IAA5B,CAAiC4Q,OAAO,CAAC,KAAKI,MAAL,GAAc,CAAf,CAAxC,CAApB;MACA,OAAOF,KAAK,GAAGK,WAAf;IACH,CAbD,EAaG,EAbH,CADI,IAeJP,OAfJ;EAgBH,CA5ce,CA6chB;;;EACAlD,UAAU,GAAG;IACT,KAAKhB,YAAL,CAAkB5N,cAAlB,GAAmC,KAAK6R,qBAAL,CAA2B,KAAKhE,UAAL,IAAmB,EAA9C,CAAnC;IACA,KAAKD,YAAL,CAAkBtC,mBAAlB,GAAwC,CACpC,OADoC,EAEpC,KAAKsC,YAAL,CAAkBnK,SAAlB,CAA4B,KAAKkM,WAAjC,EAA8C,KAAK/B,YAAL,CAAkB5N,cAAhE,CAFoC,CAAxC;EAIH;;EACD+O,aAAa,CAACrH,KAAD,EAAQ;IACjB,IAAInH,EAAJ;;IACA,MAAM+R,UAAU,GAAG,KAAKzE,UAAL,CACd1M,KADc,CACR,EADQ,EAEdkG,MAFc,CAEN3H,CAAD,IAAOA,CAAC,KAAK,GAFN,EAEW4B,MAF9B;;IAGA,IAAI,CAACoG,KAAL,EAAY;MACR,OAAO,IAAP,CADQ,CACK;IAChB;;IACD,IAAK,EAAE,CAACnH,EAAE,GAAGmH,KAAK,CAACA,KAAK,CAACpG,MAAN,GAAe,CAAhB,CAAX,MAAmC,IAAnC,IAA2Cf,EAAE,KAAK,KAAK,CAAvD,GAA2DA,EAA3D,GAAgE,CAAC,CAAnE,MAA0E,CAA1E,IAA+EmH,KAAK,CAACpG,MAAN,GAAegR,UAA/F,IACA5K,KAAK,CAACpG,MAAN,IAAgBgR,UAAU,GAAG,CADjC,EACoC;MAChC,OAAO,KAAKxD,sBAAL,CAA4BpH,KAA5B,CAAP;IACH;;IACD,OAAO,IAAP;EACH;;EACDuI,qBAAqB,GAAG;IACpB,OAAQ,KAAKrC,YAAL,CAAkB3N,WAAlB,CAA8BqB,MAA9B,IACJ,KAAKsM,YAAL,CAAkB3N,WAAlB,CAA8BqB,MAA9B,GAAuC,KAAKsM,YAAL,CAAkBnQ,MAAlB,CAAyB6D,MADpE;EAEH;;EACDwN,sBAAsB,CAAC7O,WAAD,EAAc;IAChC,OAAO;MACHsD,IAAI,EAAE;QACFgP,YAAY,EAAE,KAAK1E,UADjB;QAEF5N;MAFE;IADH,CAAP;EAMH;;EACDyO,QAAQ,GAAG;IACP,IAAI,KAAKX,oBAAL,CAA0BzM,MAA1B,GAAmC,CAAvC,EAA0C;MACtC,KAAKyM,oBAAL,CAA0BlG,IAA1B,CAAgCtE,IAAD,IAAU;QACrC,IAAIhD,EAAJ,EAAQC,EAAR,EAAYC,EAAZ;;QACA,MAAMkB,IAAI,GAAG,CAAC,CAACpB,EAAE,GAAG,KAAKqN,YAAL,CAAkBtE,UAAlB,CAA6B,KAAKqG,WAAlC,CAAN,MAA0D,IAA1D,IAAkEpP,EAAE,KAAK,KAAK,CAA9E,GAAkF,KAAK,CAAvF,GAA2FA,EAAE,CAACe,MAA/F,MACR,CAACd,EAAE,GAAG,KAAKoN,YAAL,CAAkBtE,UAAlB,CAA6B/F,IAA7B,CAAN,MAA8C,IAA9C,IAAsD/C,EAAE,KAAK,KAAK,CAAlE,GAAsE,KAAK,CAA3E,GAA+EA,EAAE,CAACc,MAD1E,CAAb;;QAEA,IAAI,KAAKqO,WAAL,IAAoBhO,IAAxB,EAA8B;UAC1B,KAAKkM,UAAL,GAAkBtK,IAAlB;UACA,KAAKvD,cAAL,GAAsBuD,IAAtB;UACA,KAAKqK,YAAL,CAAkB5N,cAAlB,GAAmCuD,IAAnC;UACA,OAAO5B,IAAP;QACH,CALD,MAMK;UACD,MAAM6Q,UAAU,GAAG,CAAC/R,EAAE,GAAG,KAAKsN,oBAAL,CAA0B,KAAKA,oBAAL,CAA0BzM,MAA1B,GAAmC,CAA7D,CAAN,MAA2E,IAA3E,IAAmFb,EAAE,KAAK,KAAK,CAA/F,GAAmGA,EAAnG,GAAwG,EAA3H;UACA,KAAKoN,UAAL,GACI,KAAK7N,cAAL,GACI,KAAK4N,YAAL,CAAkB5N,cAAlB,GACIwS,UAHZ;QAIH;MACJ,CAjBD;IAkBH;EACJ;;AApgBe;;AAsgBpB7E,aAAa,CAAC5F,IAAd;EAAA,iBAA0G4F,aAA1G,EA37BqGvR,EA27BrG,mBAAyIe,QAAzI,GA37BqGf,EA27BrG,mBAA8JgM,WAA9J,GA37BqGhM,EA27BrG,mBAAsLgB,MAAtL;AAAA;;AACAuQ,aAAa,CAAC8E,IAAd,kBA57BqGrW,EA47BrG;EAAA,MAA8FuR,aAA9F;EAAA;EAAA;IAAA;MA57BqGvR,EA47BrG;QAAA,OAA8F,aAA9F;MAAA;QAAA,OAA8F,yBAA9F;MAAA;QAAA,OAA8F,mBAA9F;MAAA;QAAA,OAA8F,YAA9F;MAAA;QAAA,OAA8F,mBAA9F;MAAA;QAAA,OAA8F,qBAA9F;MAAA;IAAA;EAAA;EAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;EAAA;EAAA;IAAA;EAAA;EAAA;EAAA,WA57BqGA,EA47BrG,oBAAmjC,CAC3iC;IACIsW,OAAO,EAAEzV,iBADb;IAEI0V,WAAW,EAAElW,UAAU,CAAC,MAAMkR,aAAP,CAF3B;IAGIhJ,KAAK,EAAE;EAHX,CAD2iC,EAM3iC;IACI+N,OAAO,EAAExV,aADb;IAEIyV,WAAW,EAAElW,UAAU,CAAC,MAAMkR,aAAP,CAF3B;IAGIhJ,KAAK,EAAE;EAHX,CAN2iC,EAW3iCyD,WAX2iC,CAAnjC,GA57BqGhM,EA47BrG;AAAA;;AAaA;EAAA,mDAz8BqGA,EAy8BrG,mBAA2FuR,aAA3F,EAAsH,CAAC;IAC3G1F,IAAI,EAAEvL,SADqG;IAE3GyL,IAAI,EAAE,CAAC;MACCyK,QAAQ,EAAE,6BADX;MAECC,SAAS,EAAE,CACP;QACIH,OAAO,EAAEzV,iBADb;QAEI0V,WAAW,EAAElW,UAAU,CAAC,MAAMkR,aAAP,CAF3B;QAGIhJ,KAAK,EAAE;MAHX,CADO,EAMP;QACI+N,OAAO,EAAExV,aADb;QAEIyV,WAAW,EAAElW,UAAU,CAAC,MAAMkR,aAAP,CAF3B;QAGIhJ,KAAK,EAAE;MAHX,CANO,EAWPyD,WAXO,CAFZ;MAeC0K,QAAQ,EAAE;IAfX,CAAD;EAFqG,CAAD,CAAtH,EAmB4B,YAAY;IAChC,OAAO,CAAC;MAAE7K,IAAI,EAAEyF,QAAR;MAAkBxF,UAAU,EAAE,CAAC;QACvBD,IAAI,EAAEzL,MADiB;QAEvB2L,IAAI,EAAE,CAAChL,QAAD;MAFiB,CAAD;IAA9B,CAAD,EAGW;MAAE8K,IAAI,EAAEG;IAAR,CAHX,EAGkC;MAAEH,IAAI,EAAE/J,SAAR;MAAmBgK,UAAU,EAAE,CAAC;QACzDD,IAAI,EAAEzL,MADmD;QAEzD2L,IAAI,EAAE,CAAC/K,MAAD;MAFmD,CAAD;IAA/B,CAHlC,CAAP;EAOH,CA3BL,EA2BuB;IAAE4C,cAAc,EAAE,CAAC;MAC1BiI,IAAI,EAAEtL,KADoB;MAE1BwL,IAAI,EAAE,CAAC,MAAD;IAFoB,CAAD,CAAlB;IAGP5J,iBAAiB,EAAE,CAAC;MACpB0J,IAAI,EAAEtL;IADc,CAAD,CAHZ;IAKPgC,QAAQ,EAAE,CAAC;MACXsJ,IAAI,EAAEtL;IADK,CAAD,CALH;IAOPc,MAAM,EAAE,CAAC;MACTwK,IAAI,EAAEtL;IADG,CAAD,CAPD;IASPa,MAAM,EAAE,CAAC;MACTyK,IAAI,EAAEtL;IADG,CAAD,CATD;IAWPe,iBAAiB,EAAE,CAAC;MACpBuK,IAAI,EAAEtL;IADc,CAAD,CAXZ;IAaPgB,aAAa,EAAE,CAAC;MAChBsK,IAAI,EAAEtL;IADU,CAAD,CAbR;IAePqB,qBAAqB,EAAE,CAAC;MACxBiK,IAAI,EAAEtL;IADkB,CAAD,CAfhB;IAiBPsB,WAAW,EAAE,CAAC;MACdgK,IAAI,EAAEtL;IADQ,CAAD,CAjBN;IAmBPmB,aAAa,EAAE,CAAC;MAChBmK,IAAI,EAAEtL;IADU,CAAD,CAnBR;IAqBPoB,oBAAoB,EAAE,CAAC;MACvBkK,IAAI,EAAEtL;IADiB,CAAD,CArBf;IAuBPwB,mBAAmB,EAAE,CAAC;MACtB8J,IAAI,EAAEtL;IADgB,CAAD,CAvBd;IAyBPkB,YAAY,EAAE,CAAC;MACfoK,IAAI,EAAEtL;IADS,CAAD,CAzBP;IA2BPiB,eAAe,EAAE,CAAC;MAClBqK,IAAI,EAAEtL;IADY,CAAD,CA3BV;IA6BP2B,UAAU,EAAE,CAAC;MACb2J,IAAI,EAAEtL;IADO,CAAD,CA7BL;IA+BPyB,cAAc,EAAE,CAAC;MACjB6J,IAAI,EAAEtL;IADW,CAAD,CA/BT;IAiCP0B,oBAAoB,EAAE,CAAC;MACvB4J,IAAI,EAAEtL;IADiB,CAAD,CAjCf;IAmCP6B,gBAAgB,EAAE,CAAC;MACnByJ,IAAI,EAAEtL;IADa,CAAD,CAnCX;IAqCP8B,mBAAmB,EAAE,CAAC;MACtBwJ,IAAI,EAAEtL;IADgB,CAAD,CArCd;IAuCP+B,UAAU,EAAE,CAAC;MACbuJ,IAAI,EAAErL;IADO,CAAD,CAvCL;IAyCPyS,OAAO,EAAE,CAAC;MACVpH,IAAI,EAAEpL,YADI;MAEVsL,IAAI,EAAE,CAAC,OAAD;IAFI,CAAD,CAzCF;IA4CPmH,aAAa,EAAE,CAAC;MAChBrH,IAAI,EAAEpL,YADU;MAEhBsL,IAAI,EAAE,CAAC,eAAD,EAAkB,CAAC,QAAD,CAAlB;IAFU,CAAD,CA5CR;IA+CPoH,OAAO,EAAE,CAAC;MACVtH,IAAI,EAAEpL,YADI;MAEVsL,IAAI,EAAE,CAAC,OAAD,EAAU,CAAC,QAAD,CAAV;IAFI,CAAD,CA/CF;IAkDPgI,MAAM,EAAE,CAAC;MACTlI,IAAI,EAAEpL,YADG;MAETsL,IAAI,EAAE,CAAC,MAAD;IAFG,CAAD,CAlDD;IAqDPiI,OAAO,EAAE,CAAC;MACVnI,IAAI,EAAEpL,YADI;MAEVsL,IAAI,EAAE,CAAC,OAAD,EAAU,CAAC,QAAD,CAAV;IAFI,CAAD,CArDF;IAwDPwI,SAAS,EAAE,CAAC;MACZ1I,IAAI,EAAEpL,YADM;MAEZsL,IAAI,EAAE,CAAC,SAAD,EAAY,CAAC,QAAD,CAAZ;IAFM,CAAD;EAxDJ,CA3BvB;AAAA;;AAwFA,MAAM4K,QAAN,CAAe;EACXjT,WAAW,CAAC8N,YAAD,EAAe;IACtB,KAAKA,YAAL,GAAoBA,YAApB;EACH;;EACDoF,SAAS,CAACtL,KAAD,EAAQnE,IAAR,EAAc7F,iBAAiB,GAAG,IAAlC,EAAwC;IAC7C,IAAI,CAACgK,KAAD,IAAU,OAAOA,KAAP,KAAiB,QAA/B,EAAyC;MACrC,OAAO,EAAP;IACH;;IACD,IAAIhK,iBAAJ,EAAuB;MACnB,KAAKkQ,YAAL,CAAkBlQ,iBAAlB,GAAsCA,iBAAtC;IACH;;IACD,IAAI,OAAO6F,IAAP,KAAgB,QAApB,EAA8B;MAC1B,OAAO,KAAKqK,YAAL,CAAkBnK,SAAlB,CAA6B,GAAEiE,KAAM,EAArC,EAAwCnE,IAAxC,CAAP;IACH;;IACD,OAAO,KAAKqK,YAAL,CAAkBvK,oBAAlB,CAAwC,GAAEqE,KAAM,EAAhD,EAAmDnE,IAAnD,CAAP;EACH;;AAfU;;AAiBfwP,QAAQ,CAAChL,IAAT;EAAA,iBAAqGgL,QAArG,EAljCqG3W,EAkjCrG,mBAA+HyD,kBAA/H;AAAA;;AACAkT,QAAQ,CAACE,KAAT,kBAnjCqG7W,EAmjCrG;EAAA;EAAA,MAAmG2W,QAAnG;EAAA;AAAA;;AACA;EAAA,mDApjCqG3W,EAojCrG,mBAA2F2W,QAA3F,EAAiH,CAAC;IACtG9K,IAAI,EAAEnL,IADgG;IAEtGqL,IAAI,EAAE,CAAC;MACCoD,IAAI,EAAE,MADP;MAEC2H,IAAI,EAAE;IAFP,CAAD;EAFgG,CAAD,CAAjH,EAM4B,YAAY;IAAE,OAAO,CAAC;MAAEjL,IAAI,EAAEpI;IAAR,CAAD,CAAP;EAAwC,CANlF;AAAA;AAQA;AACA;AACA;;;AACA,SAASsT,cAAT,CAAwBC,UAAxB,EAAoCC,WAApC,EAAiD;EAC7C,OAAOA,WAAW,YAAYC,QAAvB,GACDC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,UAAlB,CAAd,EAA6CC,WAAW,EAAxD,CADC,GAC6DE,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,UAAlB,CAAd,EAA6CC,WAA7C,CADpE;AAEH;;AACD,MAAMI,aAAN,CAAoB;EACF,OAAPC,OAAO,CAACL,WAAD,EAAc;IACxB,OAAO;MACHM,QAAQ,EAAEF,aADP;MAEHZ,SAAS,EAAE,CACP;QACIH,OAAO,EAAErV,UADb;QAEIuW,QAAQ,EAAEP;MAFd,CADO,EAKP;QACIX,OAAO,EAAEpV,cADb;QAEIsW,QAAQ,EAAErW;MAFd,CALO,EASP;QACImV,OAAO,EAAEtV,MADb;QAEIyW,UAAU,EAAEV,cAFhB;QAGIW,IAAI,EAAE,CAACxW,cAAD,EAAiBD,UAAjB;MAHV,CATO,EAcPwC,kBAdO;IAFR,CAAP;EAmBH;;EACc,OAARkU,QAAQ,GAAG;IACd,OAAO;MACHJ,QAAQ,EAAEF;IADP,CAAP;EAGH;;AA1Be;;AA4BpBA,aAAa,CAAC1L,IAAd;EAAA,iBAA0G0L,aAA1G;AAAA;;AACAA,aAAa,CAACO,IAAd,kBAhmCqG5X,EAgmCrG;EAAA,MAA2GqX;AAA3G;AACAA,aAAa,CAACQ,IAAd,kBAjmCqG7X,EAimCrG;;AACA;EAAA,mDAlmCqGA,EAkmCrG,mBAA2FqX,aAA3F,EAAsH,CAAC;IAC3GxL,IAAI,EAAElL,QADqG;IAE3GoL,IAAI,EAAE,CAAC;MACC+L,OAAO,EAAE,CAACvG,aAAD,EAAgBoF,QAAhB,CADV;MAECoB,YAAY,EAAE,CAACxG,aAAD,EAAgBoF,QAAhB;IAFf,CAAD;EAFqG,CAAD,CAAtH;AAAA;;AAQA,MAAMqB,cAAc,GAAG,OAAOC,UAAP,KAAsB,WAAtB,GACjBA,UADiB,GAEjB,OAAOC,MAAP,KAAkB,WAAlB,GACIA,MADJ,GAEI,OAAOC,MAAP,KAAkB,WAAlB,GACIA,MADJ,GAEI,OAAOC,IAAP,KAAgB,WAAhB,GACIA,IADJ,GAEI,EARlB;;AASA,CAAC,YAAY;EACT,IAAI,CAACJ,cAAc,CAACK,aAApB,EAAmC;IAC/B;IACAL,cAAc,CAACK,aAAf,GAA+B,UAAUC,UAAV,EAAsBC,KAAtB,EAA6B,CAAG,CAA/D;EACH;AACJ,CALD;AAOA;AACA;AACA;;;AAEA,SAASrX,cAAT,EAAyBuC,kBAAzB,EAA6C8N,aAA7C,EAA4DoF,QAA5D,EAAsE3K,WAAtE,EAAmF/K,UAAnF,EAA+FoW,aAA/F,EAA8GN,cAA9G,EAA8H/V,MAA9H,EAAsIG,aAAtI,EAAqJoC,SAArJ,EAAgKC,iBAAhK"},"metadata":{},"sourceType":"module"}